// @generated by protoc-gen-es v1.2.1 with parameter "target=ts,import_extension=none"
// @generated from file github.com/kralicky/totem/totem.proto (package totem, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Status } from "../../../google/rpc/status_pb";
import { ServiceDescriptorProto } from "../../../google/protobuf/descriptor_pb";

/**
 * @generated from message totem.RPC
 */
export class RPC extends Message<RPC> {
  /**
   * @generated from field: uint64 tag = 1;
   */
  tag = protoInt64.zero;

  /**
   * @generated from field: string serviceName = 2;
   */
  serviceName = "";

  /**
   * @generated from field: string methodName = 3;
   */
  methodName = "";

  /**
   * @generated from oneof totem.RPC.content
   */
  content: {
    /**
     * @generated from field: bytes request = 4;
     */
    value: Uint8Array;
    case: "request";
  } | {
    /**
     * @generated from field: totem.Response response = 5;
     */
    value: Response;
    case: "response";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from field: totem.MD metadata = 6;
   */
  metadata?: MD;

  constructor(data?: PartialMessage<RPC>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "totem.RPC";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tag", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "serviceName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "methodName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "request", kind: "scalar", T: 12 /* ScalarType.BYTES */, oneof: "content" },
    { no: 5, name: "response", kind: "message", T: Response, oneof: "content" },
    { no: 6, name: "metadata", kind: "message", T: MD },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RPC {
    return new RPC().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RPC {
    return new RPC().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RPC {
    return new RPC().fromJsonString(jsonString, options);
  }

  static equals(a: RPC | PlainMessage<RPC> | undefined, b: RPC | PlainMessage<RPC> | undefined): boolean {
    return proto3.util.equals(RPC, a, b);
  }
}

/**
 * @generated from message totem.Response
 */
export class Response extends Message<Response> {
  /**
   * @generated from field: bytes response = 1;
   */
  response = new Uint8Array(0);

  /**
   * @generated from field: google.rpc.Status statusProto = 2;
   */
  statusProto?: Status;

  constructor(data?: PartialMessage<Response>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "totem.Response";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "statusProto", kind: "message", T: Status },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Response {
    return new Response().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Response {
    return new Response().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Response {
    return new Response().fromJsonString(jsonString, options);
  }

  static equals(a: Response | PlainMessage<Response> | undefined, b: Response | PlainMessage<Response> | undefined): boolean {
    return proto3.util.equals(Response, a, b);
  }
}

/**
 * @generated from message totem.MD
 */
export class MD extends Message<MD> {
  /**
   * @generated from field: map<string, totem.MDValues> data = 1;
   */
  data: { [key: string]: MDValues } = {};

  constructor(data?: PartialMessage<MD>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "totem.MD";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: MDValues} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MD {
    return new MD().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MD {
    return new MD().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MD {
    return new MD().fromJsonString(jsonString, options);
  }

  static equals(a: MD | PlainMessage<MD> | undefined, b: MD | PlainMessage<MD> | undefined): boolean {
    return proto3.util.equals(MD, a, b);
  }
}

/**
 * @generated from message totem.MDValues
 */
export class MDValues extends Message<MDValues> {
  /**
   * @generated from field: repeated string items = 1;
   */
  items: string[] = [];

  constructor(data?: PartialMessage<MDValues>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "totem.MDValues";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "items", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MDValues {
    return new MDValues().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MDValues {
    return new MDValues().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MDValues {
    return new MDValues().fromJsonString(jsonString, options);
  }

  static equals(a: MDValues | PlainMessage<MDValues> | undefined, b: MDValues | PlainMessage<MDValues> | undefined): boolean {
    return proto3.util.equals(MDValues, a, b);
  }
}

/**
 * @generated from message totem.DiscoveryRequest
 */
export class DiscoveryRequest extends Message<DiscoveryRequest> {
  /**
   * @generated from field: string initiator = 1;
   */
  initiator = "";

  /**
   * @generated from field: repeated string visited = 2;
   */
  visited: string[] = [];

  /**
   * @generated from field: int32 remainingHops = 3;
   */
  remainingHops = 0;

  constructor(data?: PartialMessage<DiscoveryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "totem.DiscoveryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "initiator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "visited", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "remainingHops", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DiscoveryRequest {
    return new DiscoveryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DiscoveryRequest {
    return new DiscoveryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DiscoveryRequest {
    return new DiscoveryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DiscoveryRequest | PlainMessage<DiscoveryRequest> | undefined, b: DiscoveryRequest | PlainMessage<DiscoveryRequest> | undefined): boolean {
    return proto3.util.equals(DiscoveryRequest, a, b);
  }
}

/**
 * @generated from message totem.ServiceInfo
 */
export class ServiceInfo extends Message<ServiceInfo> {
  /**
   * @generated from field: repeated google.protobuf.ServiceDescriptorProto services = 1;
   */
  services: ServiceDescriptorProto[] = [];

  constructor(data?: PartialMessage<ServiceInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "totem.ServiceInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "services", kind: "message", T: ServiceDescriptorProto, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServiceInfo {
    return new ServiceInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServiceInfo {
    return new ServiceInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServiceInfo {
    return new ServiceInfo().fromJsonString(jsonString, options);
  }

  static equals(a: ServiceInfo | PlainMessage<ServiceInfo> | undefined, b: ServiceInfo | PlainMessage<ServiceInfo> | undefined): boolean {
    return proto3.util.equals(ServiceInfo, a, b);
  }
}

