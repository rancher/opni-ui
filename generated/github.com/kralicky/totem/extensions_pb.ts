// @generated by protoc-gen-es v1.2.1 with parameter "target=ts,import_extension=none"
// @generated from file github.com/kralicky/totem/extensions.proto (package totem, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum totem.ReplicationStrategy
 */
export enum ReplicationStrategy {
  /**
   * @generated from enum value: First = 0;
   */
  First = 0,

  /**
   * @generated from enum value: Broadcast = 1;
   */
  Broadcast = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(ReplicationStrategy)
proto3.util.setEnumType(ReplicationStrategy, "totem.ReplicationStrategy", [
  { no: 0, name: "First" },
  { no: 1, name: "Broadcast" },
]);

/**
 * @generated from message totem.QOS
 */
export class QOS extends Message<QOS> {
  /**
   * @generated from field: totem.ReplicationStrategy replicationStrategy = 1;
   */
  replicationStrategy = ReplicationStrategy.First;

  constructor(data?: PartialMessage<QOS>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "totem.QOS";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "replicationStrategy", kind: "enum", T: proto3.getEnumType(ReplicationStrategy) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QOS {
    return new QOS().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QOS {
    return new QOS().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QOS {
    return new QOS().fromJsonString(jsonString, options);
  }

  static equals(a: QOS | PlainMessage<QOS> | undefined, b: QOS | PlainMessage<QOS> | undefined): boolean {
    return proto3.util.equals(QOS, a, b);
  }
}

/**
 * @generated from message totem.Visibility
 */
export class Visibility extends Message<Visibility> {
  /**
   * @generated from field: bool splicedClients = 1;
   */
  splicedClients = false;

  constructor(data?: PartialMessage<Visibility>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "totem.Visibility";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "splicedClients", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Visibility {
    return new Visibility().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Visibility {
    return new Visibility().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Visibility {
    return new Visibility().fromJsonString(jsonString, options);
  }

  static equals(a: Visibility | PlainMessage<Visibility> | undefined, b: Visibility | PlainMessage<Visibility> | undefined): boolean {
    return proto3.util.equals(Visibility, a, b);
  }
}

