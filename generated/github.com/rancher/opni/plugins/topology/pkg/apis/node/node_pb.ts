// @generated by protoc-gen-es v1.2.1 with parameter "target=ts,import_extension=none"
// @generated from file github.com/rancher/opni/plugins/topology/pkg/apis/node/node.proto (package node.topology, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum node.topology.ConfigStatus
 */
export enum ConfigStatus {
  /**
   * @generated from enum value: Unknown = 0;
   */
  Unknown = 0,

  /**
   * @generated from enum value: UpToDate = 1;
   */
  UpToDate = 1,

  /**
   * @generated from enum value: NeedsUpdate = 2;
   */
  NeedsUpdate = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(ConfigStatus)
proto3.util.setEnumType(ConfigStatus, "node.topology.ConfigStatus", [
  { no: 0, name: "Unknown" },
  { no: 1, name: "UpToDate" },
  { no: 2, name: "NeedsUpdate" },
]);

/**
 * @generated from message node.topology.TopologyCapabilityConfig
 */
export class TopologyCapabilityConfig extends Message<TopologyCapabilityConfig> {
  /**
   * @generated from field: bool enabled = 1;
   */
  enabled = false;

  /**
   * @generated from field: repeated string conditions = 2;
   */
  conditions: string[] = [];

  /**
   * @generated from field: node.topology.TopologyCapabilitySpec spec = 3;
   */
  spec?: TopologyCapabilitySpec;

  constructor(data?: PartialMessage<TopologyCapabilityConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "node.topology.TopologyCapabilityConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "conditions", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "spec", kind: "message", T: TopologyCapabilitySpec },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TopologyCapabilityConfig {
    return new TopologyCapabilityConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TopologyCapabilityConfig {
    return new TopologyCapabilityConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TopologyCapabilityConfig {
    return new TopologyCapabilityConfig().fromJsonString(jsonString, options);
  }

  static equals(a: TopologyCapabilityConfig | PlainMessage<TopologyCapabilityConfig> | undefined, b: TopologyCapabilityConfig | PlainMessage<TopologyCapabilityConfig> | undefined): boolean {
    return proto3.util.equals(TopologyCapabilityConfig, a, b);
  }
}

/**
 * TODO(topology) add spec fields
 *
 * @generated from message node.topology.TopologyCapabilitySpec
 */
export class TopologyCapabilitySpec extends Message<TopologyCapabilitySpec> {
  constructor(data?: PartialMessage<TopologyCapabilitySpec>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "node.topology.TopologyCapabilitySpec";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TopologyCapabilitySpec {
    return new TopologyCapabilitySpec().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TopologyCapabilitySpec {
    return new TopologyCapabilitySpec().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TopologyCapabilitySpec {
    return new TopologyCapabilitySpec().fromJsonString(jsonString, options);
  }

  static equals(a: TopologyCapabilitySpec | PlainMessage<TopologyCapabilitySpec> | undefined, b: TopologyCapabilitySpec | PlainMessage<TopologyCapabilitySpec> | undefined): boolean {
    return proto3.util.equals(TopologyCapabilitySpec, a, b);
  }
}

/**
 * @generated from message node.topology.SyncRequest
 */
export class SyncRequest extends Message<SyncRequest> {
  /**
   * @generated from field: node.topology.TopologyCapabilityConfig currentConfig = 1;
   */
  currentConfig?: TopologyCapabilityConfig;

  constructor(data?: PartialMessage<SyncRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "node.topology.SyncRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "currentConfig", kind: "message", T: TopologyCapabilityConfig },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SyncRequest {
    return new SyncRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SyncRequest {
    return new SyncRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SyncRequest {
    return new SyncRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SyncRequest | PlainMessage<SyncRequest> | undefined, b: SyncRequest | PlainMessage<SyncRequest> | undefined): boolean {
    return proto3.util.equals(SyncRequest, a, b);
  }
}

/**
 * @generated from message node.topology.SyncResponse
 */
export class SyncResponse extends Message<SyncResponse> {
  /**
   * @generated from field: node.topology.ConfigStatus configStatus = 1;
   */
  configStatus = ConfigStatus.Unknown;

  /**
   * @generated from field: node.topology.TopologyCapabilityConfig updatedConfig = 2;
   */
  updatedConfig?: TopologyCapabilityConfig;

  constructor(data?: PartialMessage<SyncResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "node.topology.SyncResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "configStatus", kind: "enum", T: proto3.getEnumType(ConfigStatus) },
    { no: 2, name: "updatedConfig", kind: "message", T: TopologyCapabilityConfig },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SyncResponse {
    return new SyncResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SyncResponse {
    return new SyncResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SyncResponse {
    return new SyncResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SyncResponse | PlainMessage<SyncResponse> | undefined, b: SyncResponse | PlainMessage<SyncResponse> | undefined): boolean {
    return proto3.util.equals(SyncResponse, a, b);
  }
}

