// @generated by protoc-gen-es v1.2.1 with parameter "target=ts,import_extension=none"
// @generated from file github.com/rancher/opni/plugins/topology/pkg/apis/stream/stream.proto (package stream.topology, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Reference } from "../../../../../pkg/apis/core/v1/core_pb";

/**
 * @generated from enum stream.topology.GraphRepr
 */
export enum GraphRepr {
  /**
   * @generated from enum value: None = 0;
   */
  None = 0,

  /**
   * @generated from enum value: KubectlGraph = 1;
   */
  KubectlGraph = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(GraphRepr)
proto3.util.setEnumType(GraphRepr, "stream.topology.GraphRepr", [
  { no: 0, name: "None" },
  { no: 1, name: "KubectlGraph" },
]);

/**
 * @generated from message stream.topology.Payload
 */
export class Payload extends Message<Payload> {
  /**
   * @generated from field: stream.topology.TopologyGraph graph = 1;
   */
  graph?: TopologyGraph;

  constructor(data?: PartialMessage<Payload>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stream.topology.Payload";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "graph", kind: "message", T: TopologyGraph },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Payload {
    return new Payload().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Payload {
    return new Payload().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Payload {
    return new Payload().fromJsonString(jsonString, options);
  }

  static equals(a: Payload | PlainMessage<Payload> | undefined, b: Payload | PlainMessage<Payload> | undefined): boolean {
    return proto3.util.equals(Payload, a, b);
  }
}

/**
 * FIXME: copied from orchestrator.proto due to duplicate symbol bug
 *
 * @generated from message stream.topology.TopologyGraph
 */
export class TopologyGraph extends Message<TopologyGraph> {
  /**
   * @generated from field: core.Reference clusterId = 1;
   */
  clusterId?: Reference;

  /**
   * @generated from field: bytes data = 2;
   */
  data = new Uint8Array(0);

  /**
   * @generated from field: stream.topology.GraphRepr repr = 3;
   */
  repr = GraphRepr.None;

  constructor(data?: PartialMessage<TopologyGraph>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stream.topology.TopologyGraph";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "clusterId", kind: "message", T: Reference },
    { no: 2, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "repr", kind: "enum", T: proto3.getEnumType(GraphRepr) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TopologyGraph {
    return new TopologyGraph().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TopologyGraph {
    return new TopologyGraph().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TopologyGraph {
    return new TopologyGraph().fromJsonString(jsonString, options);
  }

  static equals(a: TopologyGraph | PlainMessage<TopologyGraph> | undefined, b: TopologyGraph | PlainMessage<TopologyGraph> | undefined): boolean {
    return proto3.util.equals(TopologyGraph, a, b);
  }
}

