// @generated by protoc-gen-es v1.2.1 with parameter "target=ts,import_extension=none"
// @generated from file github.com/rancher/opni/plugins/aiops/pkg/apis/modeltraining/modeltraining.proto (package modeltraining, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message modeltraining.GPUInfo
 */
export class GPUInfo extends Message<GPUInfo> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string capacity = 2;
   */
  capacity = "";

  /**
   * @generated from field: string allocatable = 3;
   */
  allocatable = "";

  constructor(data?: PartialMessage<GPUInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "modeltraining.GPUInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "capacity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "allocatable", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GPUInfo {
    return new GPUInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GPUInfo {
    return new GPUInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GPUInfo {
    return new GPUInfo().fromJsonString(jsonString, options);
  }

  static equals(a: GPUInfo | PlainMessage<GPUInfo> | undefined, b: GPUInfo | PlainMessage<GPUInfo> | undefined): boolean {
    return proto3.util.equals(GPUInfo, a, b);
  }
}

/**
 * @generated from message modeltraining.GPUInfoList
 */
export class GPUInfoList extends Message<GPUInfoList> {
  /**
   * @generated from field: repeated modeltraining.GPUInfo items = 1;
   */
  items: GPUInfo[] = [];

  constructor(data?: PartialMessage<GPUInfoList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "modeltraining.GPUInfoList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "items", kind: "message", T: GPUInfo, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GPUInfoList {
    return new GPUInfoList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GPUInfoList {
    return new GPUInfoList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GPUInfoList {
    return new GPUInfoList().fromJsonString(jsonString, options);
  }

  static equals(a: GPUInfoList | PlainMessage<GPUInfoList> | undefined, b: GPUInfoList | PlainMessage<GPUInfoList> | undefined): boolean {
    return proto3.util.equals(GPUInfoList, a, b);
  }
}

/**
 * @generated from message modeltraining.ModelStatus
 */
export class ModelStatus extends Message<ModelStatus> {
  /**
   * @generated from field: string status = 1;
   */
  status = "";

  /**
   * @generated from field: modeltraining.ModelTrainingStatistics statistics = 2;
   */
  statistics?: ModelTrainingStatistics;

  constructor(data?: PartialMessage<ModelStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "modeltraining.ModelStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "statistics", kind: "message", T: ModelTrainingStatistics },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ModelStatus {
    return new ModelStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ModelStatus {
    return new ModelStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ModelStatus {
    return new ModelStatus().fromJsonString(jsonString, options);
  }

  static equals(a: ModelStatus | PlainMessage<ModelStatus> | undefined, b: ModelStatus | PlainMessage<ModelStatus> | undefined): boolean {
    return proto3.util.equals(ModelStatus, a, b);
  }
}

/**
 * @generated from message modeltraining.ModelTrainingResponse
 */
export class ModelTrainingResponse extends Message<ModelTrainingResponse> {
  /**
   * @generated from field: string response = 1;
   */
  response = "";

  constructor(data?: PartialMessage<ModelTrainingResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "modeltraining.ModelTrainingResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ModelTrainingResponse {
    return new ModelTrainingResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ModelTrainingResponse {
    return new ModelTrainingResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ModelTrainingResponse {
    return new ModelTrainingResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ModelTrainingResponse | PlainMessage<ModelTrainingResponse> | undefined, b: ModelTrainingResponse | PlainMessage<ModelTrainingResponse> | undefined): boolean {
    return proto3.util.equals(ModelTrainingResponse, a, b);
  }
}

/**
 * @generated from message modeltraining.ModelTrainingParameters
 */
export class ModelTrainingParameters extends Message<ModelTrainingParameters> {
  /**
   * @generated from field: string clusterId = 1;
   */
  clusterId = "";

  /**
   * @generated from field: string namespace = 2;
   */
  namespace = "";

  /**
   * @generated from field: string deployment = 3;
   */
  deployment = "";

  constructor(data?: PartialMessage<ModelTrainingParameters>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "modeltraining.ModelTrainingParameters";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "clusterId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "deployment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ModelTrainingParameters {
    return new ModelTrainingParameters().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ModelTrainingParameters {
    return new ModelTrainingParameters().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ModelTrainingParameters {
    return new ModelTrainingParameters().fromJsonString(jsonString, options);
  }

  static equals(a: ModelTrainingParameters | PlainMessage<ModelTrainingParameters> | undefined, b: ModelTrainingParameters | PlainMessage<ModelTrainingParameters> | undefined): boolean {
    return proto3.util.equals(ModelTrainingParameters, a, b);
  }
}

/**
 * @generated from message modeltraining.ModelTrainingParametersList
 */
export class ModelTrainingParametersList extends Message<ModelTrainingParametersList> {
  /**
   * @generated from field: repeated modeltraining.ModelTrainingParameters items = 1;
   */
  items: ModelTrainingParameters[] = [];

  constructor(data?: PartialMessage<ModelTrainingParametersList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "modeltraining.ModelTrainingParametersList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "items", kind: "message", T: ModelTrainingParameters, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ModelTrainingParametersList {
    return new ModelTrainingParametersList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ModelTrainingParametersList {
    return new ModelTrainingParametersList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ModelTrainingParametersList {
    return new ModelTrainingParametersList().fromJsonString(jsonString, options);
  }

  static equals(a: ModelTrainingParametersList | PlainMessage<ModelTrainingParametersList> | undefined, b: ModelTrainingParametersList | PlainMessage<ModelTrainingParametersList> | undefined): boolean {
    return proto3.util.equals(ModelTrainingParametersList, a, b);
  }
}

/**
 * @generated from message modeltraining.ModelTrainingStatistics
 */
export class ModelTrainingStatistics extends Message<ModelTrainingStatistics> {
  /**
   * @generated from field: int64 timeElapsed = 1;
   */
  timeElapsed = protoInt64.zero;

  /**
   * @generated from field: int64 percentageCompleted = 2;
   */
  percentageCompleted = protoInt64.zero;

  /**
   * @generated from field: int64 remainingTime = 3;
   */
  remainingTime = protoInt64.zero;

  /**
   * @generated from field: int64 currentEpoch = 4;
   */
  currentEpoch = protoInt64.zero;

  /**
   * @generated from field: double modelAccuracy = 5;
   */
  modelAccuracy = 0;

  /**
   * @generated from field: string stage = 6;
   */
  stage = "";

  constructor(data?: PartialMessage<ModelTrainingStatistics>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "modeltraining.ModelTrainingStatistics";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "timeElapsed", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "percentageCompleted", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "remainingTime", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "currentEpoch", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "modelAccuracy", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 6, name: "stage", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ModelTrainingStatistics {
    return new ModelTrainingStatistics().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ModelTrainingStatistics {
    return new ModelTrainingStatistics().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ModelTrainingStatistics {
    return new ModelTrainingStatistics().fromJsonString(jsonString, options);
  }

  static equals(a: ModelTrainingStatistics | PlainMessage<ModelTrainingStatistics> | undefined, b: ModelTrainingStatistics | PlainMessage<ModelTrainingStatistics> | undefined): boolean {
    return proto3.util.equals(ModelTrainingStatistics, a, b);
  }
}

/**
 * @generated from message modeltraining.WorkloadAggregation
 */
export class WorkloadAggregation extends Message<WorkloadAggregation> {
  /**
   * @generated from field: string clusterId = 1;
   */
  clusterId = "";

  /**
   * @generated from field: string namespace = 2;
   */
  namespace = "";

  /**
   * @generated from field: string deployment = 3;
   */
  deployment = "";

  /**
   * @generated from field: int64 logCount = 4;
   */
  logCount = protoInt64.zero;

  constructor(data?: PartialMessage<WorkloadAggregation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "modeltraining.WorkloadAggregation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "clusterId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "deployment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "logCount", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkloadAggregation {
    return new WorkloadAggregation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkloadAggregation {
    return new WorkloadAggregation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkloadAggregation {
    return new WorkloadAggregation().fromJsonString(jsonString, options);
  }

  static equals(a: WorkloadAggregation | PlainMessage<WorkloadAggregation> | undefined, b: WorkloadAggregation | PlainMessage<WorkloadAggregation> | undefined): boolean {
    return proto3.util.equals(WorkloadAggregation, a, b);
  }
}

/**
 * @generated from message modeltraining.WorkloadAggregationList
 */
export class WorkloadAggregationList extends Message<WorkloadAggregationList> {
  /**
   * @generated from field: repeated modeltraining.WorkloadAggregation items = 1;
   */
  items: WorkloadAggregation[] = [];

  constructor(data?: PartialMessage<WorkloadAggregationList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "modeltraining.WorkloadAggregationList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "items", kind: "message", T: WorkloadAggregation, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkloadAggregationList {
    return new WorkloadAggregationList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkloadAggregationList {
    return new WorkloadAggregationList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkloadAggregationList {
    return new WorkloadAggregationList().fromJsonString(jsonString, options);
  }

  static equals(a: WorkloadAggregationList | PlainMessage<WorkloadAggregationList> | undefined, b: WorkloadAggregationList | PlainMessage<WorkloadAggregationList> | undefined): boolean {
    return proto3.util.equals(WorkloadAggregationList, a, b);
  }
}

