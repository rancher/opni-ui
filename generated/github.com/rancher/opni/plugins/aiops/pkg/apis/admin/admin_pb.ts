// @generated by protoc-gen-es v1.2.1 with parameter "target=ts,import_extension=none"
// @generated from file github.com/rancher/opni/plugins/aiops/pkg/apis/admin/admin.proto (package admin, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message admin.PretrainedModel
 */
export class PretrainedModel extends Message<PretrainedModel> {
  /**
   * @generated from field: optional string httpSource = 2;
   */
  httpSource?: string;

  /**
   * @generated from field: optional string imageSource = 3;
   */
  imageSource?: string;

  /**
   * @generated from field: optional int32 replicas = 4;
   */
  replicas?: number;

  constructor(data?: PartialMessage<PretrainedModel>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "admin.PretrainedModel";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "httpSource", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "imageSource", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "replicas", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PretrainedModel {
    return new PretrainedModel().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PretrainedModel {
    return new PretrainedModel().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PretrainedModel {
    return new PretrainedModel().fromJsonString(jsonString, options);
  }

  static equals(a: PretrainedModel | PlainMessage<PretrainedModel> | undefined, b: PretrainedModel | PlainMessage<PretrainedModel> | undefined): boolean {
    return proto3.util.equals(PretrainedModel, a, b);
  }
}

/**
 * @generated from message admin.GPUSettings
 */
export class GPUSettings extends Message<GPUSettings> {
  /**
   * @generated from field: optional string runtimeClass = 1;
   */
  runtimeClass?: string;

  constructor(data?: PartialMessage<GPUSettings>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "admin.GPUSettings";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "runtimeClass", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GPUSettings {
    return new GPUSettings().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GPUSettings {
    return new GPUSettings().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GPUSettings {
    return new GPUSettings().fromJsonString(jsonString, options);
  }

  static equals(a: GPUSettings | PlainMessage<GPUSettings> | undefined, b: GPUSettings | PlainMessage<GPUSettings> | undefined): boolean {
    return proto3.util.equals(GPUSettings, a, b);
  }
}

/**
 * @generated from message admin.AISettings
 */
export class AISettings extends Message<AISettings> {
  /**
   * @generated from field: optional admin.GPUSettings gpuSettings = 1;
   */
  gpuSettings?: GPUSettings;

  /**
   * @generated from field: optional int32 drainReplicas = 2;
   */
  drainReplicas?: number;

  /**
   * @generated from field: optional admin.PretrainedModel controlplane = 3;
   */
  controlplane?: PretrainedModel;

  /**
   * @generated from field: optional admin.PretrainedModel rancher = 4;
   */
  rancher?: PretrainedModel;

  /**
   * @generated from field: optional admin.PretrainedModel longhorn = 5;
   */
  longhorn?: PretrainedModel;

  constructor(data?: PartialMessage<AISettings>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "admin.AISettings";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "gpuSettings", kind: "message", T: GPUSettings, opt: true },
    { no: 2, name: "drainReplicas", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 3, name: "controlplane", kind: "message", T: PretrainedModel, opt: true },
    { no: 4, name: "rancher", kind: "message", T: PretrainedModel, opt: true },
    { no: 5, name: "longhorn", kind: "message", T: PretrainedModel, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AISettings {
    return new AISettings().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AISettings {
    return new AISettings().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AISettings {
    return new AISettings().fromJsonString(jsonString, options);
  }

  static equals(a: AISettings | PlainMessage<AISettings> | undefined, b: AISettings | PlainMessage<AISettings> | undefined): boolean {
    return proto3.util.equals(AISettings, a, b);
  }
}

/**
 * @generated from message admin.UpgradeAvailableResponse
 */
export class UpgradeAvailableResponse extends Message<UpgradeAvailableResponse> {
  /**
   * @generated from field: optional bool UpgradePending = 1;
   */
  UpgradePending?: boolean;

  constructor(data?: PartialMessage<UpgradeAvailableResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "admin.UpgradeAvailableResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "UpgradePending", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpgradeAvailableResponse {
    return new UpgradeAvailableResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpgradeAvailableResponse {
    return new UpgradeAvailableResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpgradeAvailableResponse {
    return new UpgradeAvailableResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpgradeAvailableResponse | PlainMessage<UpgradeAvailableResponse> | undefined, b: UpgradeAvailableResponse | PlainMessage<UpgradeAvailableResponse> | undefined): boolean {
    return proto3.util.equals(UpgradeAvailableResponse, a, b);
  }
}

/**
 * @generated from message admin.RuntimeClassResponse
 */
export class RuntimeClassResponse extends Message<RuntimeClassResponse> {
  /**
   * @generated from field: repeated string RuntimeClasses = 1;
   */
  RuntimeClasses: string[] = [];

  constructor(data?: PartialMessage<RuntimeClassResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "admin.RuntimeClassResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "RuntimeClasses", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RuntimeClassResponse {
    return new RuntimeClassResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RuntimeClassResponse {
    return new RuntimeClassResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RuntimeClassResponse {
    return new RuntimeClassResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RuntimeClassResponse | PlainMessage<RuntimeClassResponse> | undefined, b: RuntimeClassResponse | PlainMessage<RuntimeClassResponse> | undefined): boolean {
    return proto3.util.equals(RuntimeClassResponse, a, b);
  }
}

