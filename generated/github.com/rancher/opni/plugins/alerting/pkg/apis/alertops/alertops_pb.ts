// @generated by protoc-gen-es v1.2.1 with parameter "target=ts,import_extension=none"
// @generated from file github.com/rancher/opni/plugins/alerting/pkg/apis/alertops/alertops.proto (package alerting.ops, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { PutConfigRequest } from "../../../../../pkg/apis/alerting/v1/sidecar_pb";

/**
 * @generated from enum alerting.ops.InstallState
 */
export enum InstallState {
  /**
   * @generated from enum value: InstallUnknown = 0;
   */
  InstallUnknown = 0,

  /**
   * @generated from enum value: NotInstalled = 1;
   */
  NotInstalled = 1,

  /**
   * @generated from enum value: InstallUpdating = 2;
   */
  InstallUpdating = 2,

  /**
   * @generated from enum value: Installed = 3;
   */
  Installed = 3,

  /**
   * @generated from enum value: Uninstalling = 4;
   */
  Uninstalling = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(InstallState)
proto3.util.setEnumType(InstallState, "alerting.ops.InstallState", [
  { no: 0, name: "InstallUnknown" },
  { no: 1, name: "NotInstalled" },
  { no: 2, name: "InstallUpdating" },
  { no: 3, name: "Installed" },
  { no: 4, name: "Uninstalling" },
]);

/**
 * @generated from message alerting.ops.ConnectRequest
 */
export class ConnectRequest extends Message<ConnectRequest> {
  /**
   * @generated from field: string lifecycleUuid = 1;
   */
  lifecycleUuid = "";

  constructor(data?: PartialMessage<ConnectRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.ops.ConnectRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "lifecycleUuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConnectRequest {
    return new ConnectRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConnectRequest {
    return new ConnectRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConnectRequest {
    return new ConnectRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ConnectRequest | PlainMessage<ConnectRequest> | undefined, b: ConnectRequest | PlainMessage<ConnectRequest> | undefined): boolean {
    return proto3.util.equals(ConnectRequest, a, b);
  }
}

/**
 * @generated from message alerting.ops.SyncRequest
 */
export class SyncRequest extends Message<SyncRequest> {
  /**
   * @generated from field: repeated alerting.PutConfigRequest items = 1;
   */
  items: PutConfigRequest[] = [];

  constructor(data?: PartialMessage<SyncRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.ops.SyncRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "items", kind: "message", T: PutConfigRequest, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SyncRequest {
    return new SyncRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SyncRequest {
    return new SyncRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SyncRequest {
    return new SyncRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SyncRequest | PlainMessage<SyncRequest> | undefined, b: SyncRequest | PlainMessage<SyncRequest> | undefined): boolean {
    return proto3.util.equals(SyncRequest, a, b);
  }
}

/**
 * @generated from message alerting.ops.UninstallRequest
 */
export class UninstallRequest extends Message<UninstallRequest> {
  /**
   * @generated from field: bool deleteData = 1;
   */
  deleteData = false;

  constructor(data?: PartialMessage<UninstallRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.ops.UninstallRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deleteData", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UninstallRequest {
    return new UninstallRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UninstallRequest {
    return new UninstallRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UninstallRequest {
    return new UninstallRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UninstallRequest | PlainMessage<UninstallRequest> | undefined, b: UninstallRequest | PlainMessage<UninstallRequest> | undefined): boolean {
    return proto3.util.equals(UninstallRequest, a, b);
  }
}

/**
 * @generated from message alerting.ops.InstallStatus
 */
export class InstallStatus extends Message<InstallStatus> {
  /**
   * @generated from field: alerting.ops.InstallState state = 1;
   */
  state = InstallState.InstallUnknown;

  /**
   * @generated from field: string version = 2;
   */
  version = "";

  /**
   * @generated from field: map<string, string> metadata = 3;
   */
  metadata: { [key: string]: string } = {};

  constructor(data?: PartialMessage<InstallStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.ops.InstallStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "state", kind: "enum", T: proto3.getEnumType(InstallState) },
    { no: 2, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "metadata", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InstallStatus {
    return new InstallStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InstallStatus {
    return new InstallStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InstallStatus {
    return new InstallStatus().fromJsonString(jsonString, options);
  }

  static equals(a: InstallStatus | PlainMessage<InstallStatus> | undefined, b: InstallStatus | PlainMessage<InstallStatus> | undefined): boolean {
    return proto3.util.equals(InstallStatus, a, b);
  }
}

/**
 * @generated from message alerting.ops.ClusterConfiguration
 */
export class ClusterConfiguration extends Message<ClusterConfiguration> {
  /**
   * number of replicas for the opni-alerting (odd-number for HA)
   *
   * @generated from field: int32 numReplicas = 2;
   */
  numReplicas = 0;

  /**
   * Maximum time to wait for cluster
   * connections to settle before
   * evaluating notifications.
   *
   * @generated from field: string clusterSettleTimeout = 3;
   */
  clusterSettleTimeout = "";

  /**
   * Interval for gossip state syncs.
   * Setting this interval lower
   * (more frequent) will increase
   * convergence speeds across larger
   * clusters at the expense of
   * increased bandwidth usage.
   *
   * @generated from field: string clusterPushPullInterval = 4;
   */
  clusterPushPullInterval = "";

  /**
   * Interval between sending gossip
   * messages. By lowering this
   * value (more frequent) gossip
   * messages are propagated across
   * the cluster more quickly at the
   * expense of increased bandwidth.
   *
   * @generated from field: string clusterGossipInterval = 5;
   */
  clusterGossipInterval = "";

  /**
   * @generated from field: alerting.ops.ResourceLimitSpec resourceLimits = 6;
   */
  resourceLimits?: ResourceLimitSpec;

  constructor(data?: PartialMessage<ClusterConfiguration>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.ops.ClusterConfiguration";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "numReplicas", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "clusterSettleTimeout", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "clusterPushPullInterval", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "clusterGossipInterval", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "resourceLimits", kind: "message", T: ResourceLimitSpec },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClusterConfiguration {
    return new ClusterConfiguration().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClusterConfiguration {
    return new ClusterConfiguration().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClusterConfiguration {
    return new ClusterConfiguration().fromJsonString(jsonString, options);
  }

  static equals(a: ClusterConfiguration | PlainMessage<ClusterConfiguration> | undefined, b: ClusterConfiguration | PlainMessage<ClusterConfiguration> | undefined): boolean {
    return proto3.util.equals(ClusterConfiguration, a, b);
  }
}

/**
 * @generated from message alerting.ops.ResourceLimitSpec
 */
export class ResourceLimitSpec extends Message<ResourceLimitSpec> {
  /**
   * Storage resource limit for alerting volume
   *
   * @generated from field: string storage = 1;
   */
  storage = "";

  /**
   * CPU resource limit per replica
   *
   * @generated from field: string cpu = 2;
   */
  cpu = "";

  /**
   * Memory resource limit per replica
   *
   * @generated from field: string memory = 3;
   */
  memory = "";

  constructor(data?: PartialMessage<ResourceLimitSpec>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.ops.ResourceLimitSpec";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "storage", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "cpu", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "memory", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResourceLimitSpec {
    return new ResourceLimitSpec().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResourceLimitSpec {
    return new ResourceLimitSpec().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResourceLimitSpec {
    return new ResourceLimitSpec().fromJsonString(jsonString, options);
  }

  static equals(a: ResourceLimitSpec | PlainMessage<ResourceLimitSpec> | undefined, b: ResourceLimitSpec | PlainMessage<ResourceLimitSpec> | undefined): boolean {
    return proto3.util.equals(ResourceLimitSpec, a, b);
  }
}

