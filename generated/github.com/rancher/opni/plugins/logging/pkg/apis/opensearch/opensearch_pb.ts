// @generated by protoc-gen-es v1.2.1 with parameter "target=ts,import_extension=none"
// @generated from file github.com/rancher/opni/plugins/logging/pkg/apis/opensearch/opensearch.proto (package opensearch, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message opensearch.ClusterReference
 */
export class ClusterReference extends Message<ClusterReference> {
  /**
   * @generated from field: string AuthorizedClusterID = 1;
   */
  AuthorizedClusterID = "";

  constructor(data?: PartialMessage<ClusterReference>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "opensearch.ClusterReference";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "AuthorizedClusterID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClusterReference {
    return new ClusterReference().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClusterReference {
    return new ClusterReference().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClusterReference {
    return new ClusterReference().fromJsonString(jsonString, options);
  }

  static equals(a: ClusterReference | PlainMessage<ClusterReference> | undefined, b: ClusterReference | PlainMessage<ClusterReference> | undefined): boolean {
    return proto3.util.equals(ClusterReference, a, b);
  }
}

/**
 * @generated from message opensearch.OpensearchDetails
 */
export class OpensearchDetails extends Message<OpensearchDetails> {
  /**
   * @generated from field: string Username = 1;
   */
  Username = "";

  /**
   * @generated from field: string Password = 2;
   */
  Password = "";

  /**
   * @generated from field: string ExternalURL = 3;
   */
  ExternalURL = "";

  /**
   * @generated from field: bool TracingEnabled = 4;
   */
  TracingEnabled = false;

  constructor(data?: PartialMessage<OpensearchDetails>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "opensearch.OpensearchDetails";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "Password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "ExternalURL", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "TracingEnabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OpensearchDetails {
    return new OpensearchDetails().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OpensearchDetails {
    return new OpensearchDetails().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OpensearchDetails {
    return new OpensearchDetails().fromJsonString(jsonString, options);
  }

  static equals(a: OpensearchDetails | PlainMessage<OpensearchDetails> | undefined, b: OpensearchDetails | PlainMessage<OpensearchDetails> | undefined): boolean {
    return proto3.util.equals(OpensearchDetails, a, b);
  }
}

