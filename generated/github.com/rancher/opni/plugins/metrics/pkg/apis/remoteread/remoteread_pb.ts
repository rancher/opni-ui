// @generated by protoc-gen-es v1.2.1 with parameter "target=ts,import_extension=none"
// @generated from file github.com/rancher/opni/plugins/metrics/pkg/apis/remoteread/remoteread.proto (package remoteread, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Timestamp } from "../../../../../../../../google/protobuf/timestamp_pb";

/**
 * @generated from enum remoteread.TargetState
 */
export enum TargetState {
  /**
   * @generated from enum value: Unknown = 0;
   */
  Unknown = 0,

  /**
   * @generated from enum value: NotRunning = 1;
   */
  NotRunning = 1,

  /**
   * @generated from enum value: Running = 2;
   */
  Running = 2,

  /**
   * @generated from enum value: Completed = 3;
   */
  Completed = 3,

  /**
   * @generated from enum value: Failed = 4;
   */
  Failed = 4,

  /**
   * @generated from enum value: Canceled = 6;
   */
  Canceled = 6,
}
// Retrieve enum metadata with: proto3.getEnumType(TargetState)
proto3.util.setEnumType(TargetState, "remoteread.TargetState", [
  { no: 0, name: "Unknown" },
  { no: 1, name: "NotRunning" },
  { no: 2, name: "Running" },
  { no: 3, name: "Completed" },
  { no: 4, name: "Failed" },
  { no: 6, name: "Canceled" },
]);

/**
 * @generated from message remoteread.Target
 */
export class Target extends Message<Target> {
  /**
   * @generated from field: remoteread.TargetMeta meta = 1;
   */
  meta?: TargetMeta;

  /**
   * @generated from field: remoteread.TargetSpec spec = 2;
   */
  spec?: TargetSpec;

  /**
   * @generated from field: remoteread.TargetStatus status = 3;
   */
  status?: TargetStatus;

  constructor(data?: PartialMessage<Target>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "remoteread.Target";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "meta", kind: "message", T: TargetMeta },
    { no: 2, name: "spec", kind: "message", T: TargetSpec },
    { no: 3, name: "status", kind: "message", T: TargetStatus },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Target {
    return new Target().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Target {
    return new Target().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Target {
    return new Target().fromJsonString(jsonString, options);
  }

  static equals(a: Target | PlainMessage<Target> | undefined, b: Target | PlainMessage<Target> | undefined): boolean {
    return proto3.util.equals(Target, a, b);
  }
}

/**
 * @generated from message remoteread.TargetMeta
 */
export class TargetMeta extends Message<TargetMeta> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string clusterId = 2;
   */
  clusterId = "";

  constructor(data?: PartialMessage<TargetMeta>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "remoteread.TargetMeta";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "clusterId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TargetMeta {
    return new TargetMeta().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TargetMeta {
    return new TargetMeta().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TargetMeta {
    return new TargetMeta().fromJsonString(jsonString, options);
  }

  static equals(a: TargetMeta | PlainMessage<TargetMeta> | undefined, b: TargetMeta | PlainMessage<TargetMeta> | undefined): boolean {
    return proto3.util.equals(TargetMeta, a, b);
  }
}

/**
 * @generated from message remoteread.TargetStatus
 */
export class TargetStatus extends Message<TargetStatus> {
  /**
   * @generated from field: remoteread.TargetProgress progress = 1;
   */
  progress?: TargetProgress;

  /**
   * @generated from field: string message = 2;
   */
  message = "";

  /**
   * @generated from field: remoteread.TargetState state = 3;
   */
  state = TargetState.Unknown;

  constructor(data?: PartialMessage<TargetStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "remoteread.TargetStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "progress", kind: "message", T: TargetProgress },
    { no: 2, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "state", kind: "enum", T: proto3.getEnumType(TargetState) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TargetStatus {
    return new TargetStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TargetStatus {
    return new TargetStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TargetStatus {
    return new TargetStatus().fromJsonString(jsonString, options);
  }

  static equals(a: TargetStatus | PlainMessage<TargetStatus> | undefined, b: TargetStatus | PlainMessage<TargetStatus> | undefined): boolean {
    return proto3.util.equals(TargetStatus, a, b);
  }
}

/**
 * @generated from message remoteread.TargetSpec
 */
export class TargetSpec extends Message<TargetSpec> {
  /**
   * @generated from field: string endpoint = 1;
   */
  endpoint = "";

  constructor(data?: PartialMessage<TargetSpec>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "remoteread.TargetSpec";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "endpoint", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TargetSpec {
    return new TargetSpec().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TargetSpec {
    return new TargetSpec().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TargetSpec {
    return new TargetSpec().fromJsonString(jsonString, options);
  }

  static equals(a: TargetSpec | PlainMessage<TargetSpec> | undefined, b: TargetSpec | PlainMessage<TargetSpec> | undefined): boolean {
    return proto3.util.equals(TargetSpec, a, b);
  }
}

/**
 * @generated from message remoteread.TargetDiff
 */
export class TargetDiff extends Message<TargetDiff> {
  /**
   * @generated from field: string endpoint = 1;
   */
  endpoint = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<TargetDiff>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "remoteread.TargetDiff";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "endpoint", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TargetDiff {
    return new TargetDiff().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TargetDiff {
    return new TargetDiff().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TargetDiff {
    return new TargetDiff().fromJsonString(jsonString, options);
  }

  static equals(a: TargetDiff | PlainMessage<TargetDiff> | undefined, b: TargetDiff | PlainMessage<TargetDiff> | undefined): boolean {
    return proto3.util.equals(TargetDiff, a, b);
  }
}

/**
 * @generated from message remoteread.TargetList
 */
export class TargetList extends Message<TargetList> {
  /**
   * @generated from field: repeated remoteread.Target targets = 1;
   */
  targets: Target[] = [];

  constructor(data?: PartialMessage<TargetList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "remoteread.TargetList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "targets", kind: "message", T: Target, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TargetList {
    return new TargetList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TargetList {
    return new TargetList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TargetList {
    return new TargetList().fromJsonString(jsonString, options);
  }

  static equals(a: TargetList | PlainMessage<TargetList> | undefined, b: TargetList | PlainMessage<TargetList> | undefined): boolean {
    return proto3.util.equals(TargetList, a, b);
  }
}

/**
 * @generated from message remoteread.TargetProgress
 */
export class TargetProgress extends Message<TargetProgress> {
  /**
   * @generated from field: google.protobuf.Timestamp startTimestamp = 1;
   */
  startTimestamp?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp lastReadTimestamp = 2;
   */
  lastReadTimestamp?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp endTimestamp = 3;
   */
  endTimestamp?: Timestamp;

  constructor(data?: PartialMessage<TargetProgress>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "remoteread.TargetProgress";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "startTimestamp", kind: "message", T: Timestamp },
    { no: 2, name: "lastReadTimestamp", kind: "message", T: Timestamp },
    { no: 3, name: "endTimestamp", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TargetProgress {
    return new TargetProgress().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TargetProgress {
    return new TargetProgress().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TargetProgress {
    return new TargetProgress().fromJsonString(jsonString, options);
  }

  static equals(a: TargetProgress | PlainMessage<TargetProgress> | undefined, b: TargetProgress | PlainMessage<TargetProgress> | undefined): boolean {
    return proto3.util.equals(TargetProgress, a, b);
  }
}

/**
 * @generated from message remoteread.TargetAddRequest
 */
export class TargetAddRequest extends Message<TargetAddRequest> {
  /**
   * @generated from field: remoteread.Target target = 1;
   */
  target?: Target;

  /**
   * @generated from field: string clusterId = 2;
   */
  clusterId = "";

  constructor(data?: PartialMessage<TargetAddRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "remoteread.TargetAddRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "target", kind: "message", T: Target },
    { no: 2, name: "clusterId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TargetAddRequest {
    return new TargetAddRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TargetAddRequest {
    return new TargetAddRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TargetAddRequest {
    return new TargetAddRequest().fromJsonString(jsonString, options);
  }

  static equals(a: TargetAddRequest | PlainMessage<TargetAddRequest> | undefined, b: TargetAddRequest | PlainMessage<TargetAddRequest> | undefined): boolean {
    return proto3.util.equals(TargetAddRequest, a, b);
  }
}

/**
 * @generated from message remoteread.TargetEditRequest
 */
export class TargetEditRequest extends Message<TargetEditRequest> {
  /**
   * @generated from field: remoteread.TargetMeta meta = 1;
   */
  meta?: TargetMeta;

  /**
   * @generated from field: remoteread.TargetDiff targetDiff = 2;
   */
  targetDiff?: TargetDiff;

  constructor(data?: PartialMessage<TargetEditRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "remoteread.TargetEditRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "meta", kind: "message", T: TargetMeta },
    { no: 2, name: "targetDiff", kind: "message", T: TargetDiff },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TargetEditRequest {
    return new TargetEditRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TargetEditRequest {
    return new TargetEditRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TargetEditRequest {
    return new TargetEditRequest().fromJsonString(jsonString, options);
  }

  static equals(a: TargetEditRequest | PlainMessage<TargetEditRequest> | undefined, b: TargetEditRequest | PlainMessage<TargetEditRequest> | undefined): boolean {
    return proto3.util.equals(TargetEditRequest, a, b);
  }
}

/**
 * @generated from message remoteread.TargetRemoveRequest
 */
export class TargetRemoveRequest extends Message<TargetRemoveRequest> {
  /**
   * @generated from field: remoteread.TargetMeta meta = 1;
   */
  meta?: TargetMeta;

  constructor(data?: PartialMessage<TargetRemoveRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "remoteread.TargetRemoveRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "meta", kind: "message", T: TargetMeta },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TargetRemoveRequest {
    return new TargetRemoveRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TargetRemoveRequest {
    return new TargetRemoveRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TargetRemoveRequest {
    return new TargetRemoveRequest().fromJsonString(jsonString, options);
  }

  static equals(a: TargetRemoveRequest | PlainMessage<TargetRemoveRequest> | undefined, b: TargetRemoveRequest | PlainMessage<TargetRemoveRequest> | undefined): boolean {
    return proto3.util.equals(TargetRemoveRequest, a, b);
  }
}

/**
 * @generated from message remoteread.TargetListRequest
 */
export class TargetListRequest extends Message<TargetListRequest> {
  /**
   * @generated from field: string clusterId = 1;
   */
  clusterId = "";

  constructor(data?: PartialMessage<TargetListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "remoteread.TargetListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "clusterId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TargetListRequest {
    return new TargetListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TargetListRequest {
    return new TargetListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TargetListRequest {
    return new TargetListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: TargetListRequest | PlainMessage<TargetListRequest> | undefined, b: TargetListRequest | PlainMessage<TargetListRequest> | undefined): boolean {
    return proto3.util.equals(TargetListRequest, a, b);
  }
}

/**
 * @generated from message remoteread.StartReadRequest
 */
export class StartReadRequest extends Message<StartReadRequest> {
  /**
   * @generated from field: remoteread.Target target = 1;
   */
  target?: Target;

  /**
   * @generated from field: remoteread.Query query = 2;
   */
  query?: Query;

  constructor(data?: PartialMessage<StartReadRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "remoteread.StartReadRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "target", kind: "message", T: Target },
    { no: 2, name: "query", kind: "message", T: Query },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StartReadRequest {
    return new StartReadRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StartReadRequest {
    return new StartReadRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StartReadRequest {
    return new StartReadRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StartReadRequest | PlainMessage<StartReadRequest> | undefined, b: StartReadRequest | PlainMessage<StartReadRequest> | undefined): boolean {
    return proto3.util.equals(StartReadRequest, a, b);
  }
}

/**
 * @generated from message remoteread.StopReadRequest
 */
export class StopReadRequest extends Message<StopReadRequest> {
  /**
   * @generated from field: remoteread.TargetMeta meta = 1;
   */
  meta?: TargetMeta;

  constructor(data?: PartialMessage<StopReadRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "remoteread.StopReadRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "meta", kind: "message", T: TargetMeta },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StopReadRequest {
    return new StopReadRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StopReadRequest {
    return new StopReadRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StopReadRequest {
    return new StopReadRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StopReadRequest | PlainMessage<StopReadRequest> | undefined, b: StopReadRequest | PlainMessage<StopReadRequest> | undefined): boolean {
    return proto3.util.equals(StopReadRequest, a, b);
  }
}

/**
 * @generated from message remoteread.TargetStatusRequest
 */
export class TargetStatusRequest extends Message<TargetStatusRequest> {
  /**
   * @generated from field: remoteread.TargetMeta meta = 1;
   */
  meta?: TargetMeta;

  constructor(data?: PartialMessage<TargetStatusRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "remoteread.TargetStatusRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "meta", kind: "message", T: TargetMeta },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TargetStatusRequest {
    return new TargetStatusRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TargetStatusRequest {
    return new TargetStatusRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TargetStatusRequest {
    return new TargetStatusRequest().fromJsonString(jsonString, options);
  }

  static equals(a: TargetStatusRequest | PlainMessage<TargetStatusRequest> | undefined, b: TargetStatusRequest | PlainMessage<TargetStatusRequest> | undefined): boolean {
    return proto3.util.equals(TargetStatusRequest, a, b);
  }
}

/**
 * PromQL query
 *
 * @generated from message remoteread.Query
 */
export class Query extends Message<Query> {
  /**
   * @generated from field: google.protobuf.Timestamp startTimestamp = 1;
   */
  startTimestamp?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp endTimestamp = 2;
   */
  endTimestamp?: Timestamp;

  /**
   * @generated from field: repeated remoteread.LabelMatcher matchers = 3;
   */
  matchers: LabelMatcher[] = [];

  constructor(data?: PartialMessage<Query>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "remoteread.Query";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "startTimestamp", kind: "message", T: Timestamp },
    { no: 2, name: "endTimestamp", kind: "message", T: Timestamp },
    { no: 3, name: "matchers", kind: "message", T: LabelMatcher, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Query {
    return new Query().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Query {
    return new Query().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Query {
    return new Query().fromJsonString(jsonString, options);
  }

  static equals(a: Query | PlainMessage<Query> | undefined, b: Query | PlainMessage<Query> | undefined): boolean {
    return proto3.util.equals(Query, a, b);
  }
}

/**
 * @generated from message remoteread.LabelMatcher
 */
export class LabelMatcher extends Message<LabelMatcher> {
  /**
   * @generated from field: remoteread.LabelMatcher.Type type = 1;
   */
  type = LabelMatcher_Type.Equal;

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string value = 3;
   */
  value = "";

  constructor(data?: PartialMessage<LabelMatcher>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "remoteread.LabelMatcher";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "enum", T: proto3.getEnumType(LabelMatcher_Type) },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LabelMatcher {
    return new LabelMatcher().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LabelMatcher {
    return new LabelMatcher().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LabelMatcher {
    return new LabelMatcher().fromJsonString(jsonString, options);
  }

  static equals(a: LabelMatcher | PlainMessage<LabelMatcher> | undefined, b: LabelMatcher | PlainMessage<LabelMatcher> | undefined): boolean {
    return proto3.util.equals(LabelMatcher, a, b);
  }
}

/**
 * @generated from enum remoteread.LabelMatcher.Type
 */
export enum LabelMatcher_Type {
  /**
   * @generated from enum value: Equal = 0;
   */
  Equal = 0,

  /**
   * @generated from enum value: NotEqual = 1;
   */
  NotEqual = 1,

  /**
   * @generated from enum value: RegexEqual = 2;
   */
  RegexEqual = 2,

  /**
   * @generated from enum value: NotRegexEqual = 3;
   */
  NotRegexEqual = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(LabelMatcher_Type)
proto3.util.setEnumType(LabelMatcher_Type, "remoteread.LabelMatcher.Type", [
  { no: 0, name: "Equal" },
  { no: 1, name: "NotEqual" },
  { no: 2, name: "RegexEqual" },
  { no: 3, name: "NotRegexEqual" },
]);

/**
 * @generated from message remoteread.Progress
 */
export class Progress extends Message<Progress> {
  /**
   * @generated from field: google.protobuf.Timestamp startTimestamp = 1;
   */
  startTimestamp?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp endTimestamp = 2;
   */
  endTimestamp?: Timestamp;

  /**
   * @generated from field: float percentDone = 3;
   */
  percentDone = 0;

  constructor(data?: PartialMessage<Progress>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "remoteread.Progress";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "startTimestamp", kind: "message", T: Timestamp },
    { no: 2, name: "endTimestamp", kind: "message", T: Timestamp },
    { no: 3, name: "percentDone", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Progress {
    return new Progress().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Progress {
    return new Progress().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Progress {
    return new Progress().fromJsonString(jsonString, options);
  }

  static equals(a: Progress | PlainMessage<Progress> | undefined, b: Progress | PlainMessage<Progress> | undefined): boolean {
    return proto3.util.equals(Progress, a, b);
  }
}

/**
 * @generated from message remoteread.DiscoveryEntry
 */
export class DiscoveryEntry extends Message<DiscoveryEntry> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string clusterId = 2;
   */
  clusterId = "";

  /**
   * @generated from field: string externalEndpoint = 3;
   */
  externalEndpoint = "";

  /**
   * @generated from field: string internalEndpoint = 4;
   */
  internalEndpoint = "";

  constructor(data?: PartialMessage<DiscoveryEntry>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "remoteread.DiscoveryEntry";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "clusterId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "externalEndpoint", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "internalEndpoint", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DiscoveryEntry {
    return new DiscoveryEntry().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DiscoveryEntry {
    return new DiscoveryEntry().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DiscoveryEntry {
    return new DiscoveryEntry().fromJsonString(jsonString, options);
  }

  static equals(a: DiscoveryEntry | PlainMessage<DiscoveryEntry> | undefined, b: DiscoveryEntry | PlainMessage<DiscoveryEntry> | undefined): boolean {
    return proto3.util.equals(DiscoveryEntry, a, b);
  }
}

/**
 * @generated from message remoteread.DiscoveryRequest
 */
export class DiscoveryRequest extends Message<DiscoveryRequest> {
  /**
   * we only need to provide clusterId or namespace if we want to narrow our scope of discovery
   *
   * @generated from field: repeated string clusterIds = 1;
   */
  clusterIds: string[] = [];

  /**
   * @generated from field: optional string namespace = 2;
   */
  namespace?: string;

  constructor(data?: PartialMessage<DiscoveryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "remoteread.DiscoveryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "clusterIds", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DiscoveryRequest {
    return new DiscoveryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DiscoveryRequest {
    return new DiscoveryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DiscoveryRequest {
    return new DiscoveryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DiscoveryRequest | PlainMessage<DiscoveryRequest> | undefined, b: DiscoveryRequest | PlainMessage<DiscoveryRequest> | undefined): boolean {
    return proto3.util.equals(DiscoveryRequest, a, b);
  }
}

/**
 * @generated from message remoteread.DiscoveryResponse
 */
export class DiscoveryResponse extends Message<DiscoveryResponse> {
  /**
   * @generated from field: repeated remoteread.DiscoveryEntry entries = 1;
   */
  entries: DiscoveryEntry[] = [];

  constructor(data?: PartialMessage<DiscoveryResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "remoteread.DiscoveryResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entries", kind: "message", T: DiscoveryEntry, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DiscoveryResponse {
    return new DiscoveryResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DiscoveryResponse {
    return new DiscoveryResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DiscoveryResponse {
    return new DiscoveryResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DiscoveryResponse | PlainMessage<DiscoveryResponse> | undefined, b: DiscoveryResponse | PlainMessage<DiscoveryResponse> | undefined): boolean {
    return proto3.util.equals(DiscoveryResponse, a, b);
  }
}

