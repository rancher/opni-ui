// @generated by protoc-gen-es v1.2.1 with parameter "target=ts,import_extension=none"
// @generated from file github.com/rancher/opni/plugins/metrics/pkg/apis/cortexadmin/cortexadmin.proto (package cortexadmin, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Timestamp } from "../../../../../../../../google/protobuf/timestamp_pb";
import { Duration } from "../../../../../../../../google/protobuf/duration_pb";

/**
 * @generated from message cortexadmin.Cluster
 */
export class Cluster extends Message<Cluster> {
  /**
   * @generated from field: string clusterId = 1;
   */
  clusterId = "";

  constructor(data?: PartialMessage<Cluster>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cortexadmin.Cluster";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "clusterId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Cluster {
    return new Cluster().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Cluster {
    return new Cluster().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Cluster {
    return new Cluster().fromJsonString(jsonString, options);
  }

  static equals(a: Cluster | PlainMessage<Cluster> | undefined, b: Cluster | PlainMessage<Cluster> | undefined): boolean {
    return proto3.util.equals(Cluster, a, b);
  }
}

/**
 * @generated from message cortexadmin.SeriesRequest
 */
export class SeriesRequest extends Message<SeriesRequest> {
  /**
   * @generated from field: string tenant = 1;
   */
  tenant = "";

  /**
   * @generated from field: string jobId = 2;
   */
  jobId = "";

  constructor(data?: PartialMessage<SeriesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cortexadmin.SeriesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tenant", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "jobId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SeriesRequest {
    return new SeriesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SeriesRequest {
    return new SeriesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SeriesRequest {
    return new SeriesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SeriesRequest | PlainMessage<SeriesRequest> | undefined, b: SeriesRequest | PlainMessage<SeriesRequest> | undefined): boolean {
    return proto3.util.equals(SeriesRequest, a, b);
  }
}

/**
 * @generated from message cortexadmin.MatcherRequest
 */
export class MatcherRequest extends Message<MatcherRequest> {
  /**
   * @generated from field: string tenant = 1;
   */
  tenant = "";

  /**
   * @generated from field: string matchExpr = 2;
   */
  matchExpr = "";

  constructor(data?: PartialMessage<MatcherRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cortexadmin.MatcherRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tenant", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "matchExpr", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MatcherRequest {
    return new MatcherRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MatcherRequest {
    return new MatcherRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MatcherRequest {
    return new MatcherRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MatcherRequest | PlainMessage<MatcherRequest> | undefined, b: MatcherRequest | PlainMessage<MatcherRequest> | undefined): boolean {
    return proto3.util.equals(MatcherRequest, a, b);
  }
}

/**
 * @generated from message cortexadmin.LabelRequest
 */
export class LabelRequest extends Message<LabelRequest> {
  /**
   * @generated from field: string tenant = 1;
   */
  tenant = "";

  /**
   * @generated from field: string jobId = 2;
   */
  jobId = "";

  /**
   * @generated from field: string metricName = 3;
   */
  metricName = "";

  constructor(data?: PartialMessage<LabelRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cortexadmin.LabelRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tenant", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "jobId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "metricName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LabelRequest {
    return new LabelRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LabelRequest {
    return new LabelRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LabelRequest {
    return new LabelRequest().fromJsonString(jsonString, options);
  }

  static equals(a: LabelRequest | PlainMessage<LabelRequest> | undefined, b: LabelRequest | PlainMessage<LabelRequest> | undefined): boolean {
    return proto3.util.equals(LabelRequest, a, b);
  }
}

/**
 * @generated from message cortexadmin.MetricLabels
 */
export class MetricLabels extends Message<MetricLabels> {
  /**
   * @generated from field: repeated cortexadmin.LabelSet items = 1;
   */
  items: LabelSet[] = [];

  constructor(data?: PartialMessage<MetricLabels>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cortexadmin.MetricLabels";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "items", kind: "message", T: LabelSet, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetricLabels {
    return new MetricLabels().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetricLabels {
    return new MetricLabels().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetricLabels {
    return new MetricLabels().fromJsonString(jsonString, options);
  }

  static equals(a: MetricLabels | PlainMessage<MetricLabels> | undefined, b: MetricLabels | PlainMessage<MetricLabels> | undefined): boolean {
    return proto3.util.equals(MetricLabels, a, b);
  }
}

/**
 * @generated from message cortexadmin.LabelSet
 */
export class LabelSet extends Message<LabelSet> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: repeated string items = 2;
   */
  items: string[] = [];

  constructor(data?: PartialMessage<LabelSet>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cortexadmin.LabelSet";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "items", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LabelSet {
    return new LabelSet().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LabelSet {
    return new LabelSet().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LabelSet {
    return new LabelSet().fromJsonString(jsonString, options);
  }

  static equals(a: LabelSet | PlainMessage<LabelSet> | undefined, b: LabelSet | PlainMessage<LabelSet> | undefined): boolean {
    return proto3.util.equals(LabelSet, a, b);
  }
}

/**
 * @generated from message cortexadmin.SeriesMetadata
 */
export class SeriesMetadata extends Message<SeriesMetadata> {
  /**
   * @generated from field: string description = 1;
   */
  description = "";

  /**
   * @generated from field: string type = 2;
   */
  type = "";

  /**
   * @generated from field: string unit = 3;
   */
  unit = "";

  constructor(data?: PartialMessage<SeriesMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cortexadmin.SeriesMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "unit", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SeriesMetadata {
    return new SeriesMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SeriesMetadata {
    return new SeriesMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SeriesMetadata {
    return new SeriesMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: SeriesMetadata | PlainMessage<SeriesMetadata> | undefined, b: SeriesMetadata | PlainMessage<SeriesMetadata> | undefined): boolean {
    return proto3.util.equals(SeriesMetadata, a, b);
  }
}

/**
 * @generated from message cortexadmin.SeriesInfo
 */
export class SeriesInfo extends Message<SeriesInfo> {
  /**
   * @generated from field: string seriesName = 1;
   */
  seriesName = "";

  /**
   * @generated from field: cortexadmin.SeriesMetadata metadata = 2;
   */
  metadata?: SeriesMetadata;

  constructor(data?: PartialMessage<SeriesInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cortexadmin.SeriesInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "seriesName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata", kind: "message", T: SeriesMetadata },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SeriesInfo {
    return new SeriesInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SeriesInfo {
    return new SeriesInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SeriesInfo {
    return new SeriesInfo().fromJsonString(jsonString, options);
  }

  static equals(a: SeriesInfo | PlainMessage<SeriesInfo> | undefined, b: SeriesInfo | PlainMessage<SeriesInfo> | undefined): boolean {
    return proto3.util.equals(SeriesInfo, a, b);
  }
}

/**
 * @generated from message cortexadmin.SeriesInfoList
 */
export class SeriesInfoList extends Message<SeriesInfoList> {
  /**
   * @generated from field: repeated cortexadmin.SeriesInfo items = 1;
   */
  items: SeriesInfo[] = [];

  constructor(data?: PartialMessage<SeriesInfoList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cortexadmin.SeriesInfoList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "items", kind: "message", T: SeriesInfo, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SeriesInfoList {
    return new SeriesInfoList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SeriesInfoList {
    return new SeriesInfoList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SeriesInfoList {
    return new SeriesInfoList().fromJsonString(jsonString, options);
  }

  static equals(a: SeriesInfoList | PlainMessage<SeriesInfoList> | undefined, b: SeriesInfoList | PlainMessage<SeriesInfoList> | undefined): boolean {
    return proto3.util.equals(SeriesInfoList, a, b);
  }
}

/**
 * @generated from message cortexadmin.UserIDStatsList
 */
export class UserIDStatsList extends Message<UserIDStatsList> {
  /**
   * @generated from field: repeated cortexadmin.UserIDStats items = 2;
   */
  items: UserIDStats[] = [];

  constructor(data?: PartialMessage<UserIDStatsList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cortexadmin.UserIDStatsList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "items", kind: "message", T: UserIDStats, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserIDStatsList {
    return new UserIDStatsList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserIDStatsList {
    return new UserIDStatsList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserIDStatsList {
    return new UserIDStatsList().fromJsonString(jsonString, options);
  }

  static equals(a: UserIDStatsList | PlainMessage<UserIDStatsList> | undefined, b: UserIDStatsList | PlainMessage<UserIDStatsList> | undefined): boolean {
    return proto3.util.equals(UserIDStatsList, a, b);
  }
}

/**
 * @generated from message cortexadmin.UserIDStats
 */
export class UserIDStats extends Message<UserIDStats> {
  /**
   * @generated from field: string userID = 1;
   */
  userID = "";

  /**
   * @generated from field: double ingestionRate = 2;
   */
  ingestionRate = 0;

  /**
   * @generated from field: uint64 numSeries = 3;
   */
  numSeries = protoInt64.zero;

  /**
   * title case to match cortex
   *
   * @generated from field: double APIIngestionRate = 4;
   */
  APIIngestionRate = 0;

  /**
   * title case to match cortex
   *
   * @generated from field: double RuleIngestionRate = 5;
   */
  RuleIngestionRate = 0;

  constructor(data?: PartialMessage<UserIDStats>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cortexadmin.UserIDStats";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "userID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "ingestionRate", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 3, name: "numSeries", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "APIIngestionRate", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 5, name: "RuleIngestionRate", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserIDStats {
    return new UserIDStats().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserIDStats {
    return new UserIDStats().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserIDStats {
    return new UserIDStats().fromJsonString(jsonString, options);
  }

  static equals(a: UserIDStats | PlainMessage<UserIDStats> | undefined, b: UserIDStats | PlainMessage<UserIDStats> | undefined): boolean {
    return proto3.util.equals(UserIDStats, a, b);
  }
}

/**
 * @generated from message cortexadmin.WriteRequest
 */
export class WriteRequest extends Message<WriteRequest> {
  /**
   * @generated from field: string clusterID = 1;
   */
  clusterID = "";

  /**
   * @generated from field: repeated cortexadmin.TimeSeries timeseries = 2;
   */
  timeseries: TimeSeries[] = [];

  /**
   * @generated from field: repeated cortexadmin.MetricMetadata metadata = 3;
   */
  metadata: MetricMetadata[] = [];

  constructor(data?: PartialMessage<WriteRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cortexadmin.WriteRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "clusterID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timeseries", kind: "message", T: TimeSeries, repeated: true },
    { no: 3, name: "metadata", kind: "message", T: MetricMetadata, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WriteRequest {
    return new WriteRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WriteRequest {
    return new WriteRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WriteRequest {
    return new WriteRequest().fromJsonString(jsonString, options);
  }

  static equals(a: WriteRequest | PlainMessage<WriteRequest> | undefined, b: WriteRequest | PlainMessage<WriteRequest> | undefined): boolean {
    return proto3.util.equals(WriteRequest, a, b);
  }
}

/**
 * @generated from message cortexadmin.MetricMetadataRequest
 */
export class MetricMetadataRequest extends Message<MetricMetadataRequest> {
  /**
   * @generated from field: repeated string tenants = 1;
   */
  tenants: string[] = [];

  /**
   * @generated from field: string metricName = 2;
   */
  metricName = "";

  constructor(data?: PartialMessage<MetricMetadataRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cortexadmin.MetricMetadataRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tenants", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "metricName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetricMetadataRequest {
    return new MetricMetadataRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetricMetadataRequest {
    return new MetricMetadataRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetricMetadataRequest {
    return new MetricMetadataRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MetricMetadataRequest | PlainMessage<MetricMetadataRequest> | undefined, b: MetricMetadataRequest | PlainMessage<MetricMetadataRequest> | undefined): boolean {
    return proto3.util.equals(MetricMetadataRequest, a, b);
  }
}

/**
 * @generated from message cortexadmin.WriteResponse
 */
export class WriteResponse extends Message<WriteResponse> {
  constructor(data?: PartialMessage<WriteResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cortexadmin.WriteResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WriteResponse {
    return new WriteResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WriteResponse {
    return new WriteResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WriteResponse {
    return new WriteResponse().fromJsonString(jsonString, options);
  }

  static equals(a: WriteResponse | PlainMessage<WriteResponse> | undefined, b: WriteResponse | PlainMessage<WriteResponse> | undefined): boolean {
    return proto3.util.equals(WriteResponse, a, b);
  }
}

/**
 * @generated from message cortexadmin.TimeSeries
 */
export class TimeSeries extends Message<TimeSeries> {
  /**
   * @generated from field: repeated cortexadmin.Label labels = 1;
   */
  labels: Label[] = [];

  /**
   * @generated from field: repeated cortexadmin.Sample samples = 2;
   */
  samples: Sample[] = [];

  /**
   * @generated from field: repeated cortexadmin.Exemplar exemplars = 3;
   */
  exemplars: Exemplar[] = [];

  constructor(data?: PartialMessage<TimeSeries>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cortexadmin.TimeSeries";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "labels", kind: "message", T: Label, repeated: true },
    { no: 2, name: "samples", kind: "message", T: Sample, repeated: true },
    { no: 3, name: "exemplars", kind: "message", T: Exemplar, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TimeSeries {
    return new TimeSeries().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TimeSeries {
    return new TimeSeries().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TimeSeries {
    return new TimeSeries().fromJsonString(jsonString, options);
  }

  static equals(a: TimeSeries | PlainMessage<TimeSeries> | undefined, b: TimeSeries | PlainMessage<TimeSeries> | undefined): boolean {
    return proto3.util.equals(TimeSeries, a, b);
  }
}

/**
 * @generated from message cortexadmin.Label
 */
export class Label extends Message<Label> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string value = 2;
   */
  value = "";

  constructor(data?: PartialMessage<Label>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cortexadmin.Label";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Label {
    return new Label().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Label {
    return new Label().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Label {
    return new Label().fromJsonString(jsonString, options);
  }

  static equals(a: Label | PlainMessage<Label> | undefined, b: Label | PlainMessage<Label> | undefined): boolean {
    return proto3.util.equals(Label, a, b);
  }
}

/**
 * @generated from message cortexadmin.Sample
 */
export class Sample extends Message<Sample> {
  /**
   * @generated from field: int64 timestampMs = 1;
   */
  timestampMs = protoInt64.zero;

  /**
   * @generated from field: double value = 2;
   */
  value = 0;

  constructor(data?: PartialMessage<Sample>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cortexadmin.Sample";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "timestampMs", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "value", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Sample {
    return new Sample().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Sample {
    return new Sample().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Sample {
    return new Sample().fromJsonString(jsonString, options);
  }

  static equals(a: Sample | PlainMessage<Sample> | undefined, b: Sample | PlainMessage<Sample> | undefined): boolean {
    return proto3.util.equals(Sample, a, b);
  }
}

/**
 * @generated from message cortexadmin.Exemplar
 */
export class Exemplar extends Message<Exemplar> {
  /**
   * @generated from field: repeated cortexadmin.Label labels = 1;
   */
  labels: Label[] = [];

  /**
   * @generated from field: double value = 2;
   */
  value = 0;

  /**
   * @generated from field: int64 timestampMs = 3;
   */
  timestampMs = protoInt64.zero;

  constructor(data?: PartialMessage<Exemplar>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cortexadmin.Exemplar";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "labels", kind: "message", T: Label, repeated: true },
    { no: 2, name: "value", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 3, name: "timestampMs", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Exemplar {
    return new Exemplar().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Exemplar {
    return new Exemplar().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Exemplar {
    return new Exemplar().fromJsonString(jsonString, options);
  }

  static equals(a: Exemplar | PlainMessage<Exemplar> | undefined, b: Exemplar | PlainMessage<Exemplar> | undefined): boolean {
    return proto3.util.equals(Exemplar, a, b);
  }
}

/**
 * @generated from message cortexadmin.MetricMetadata
 */
export class MetricMetadata extends Message<MetricMetadata> {
  /**
   * @generated from field: cortexadmin.MetricMetadata.MetricType type = 1;
   */
  type = MetricMetadata_MetricType.UNKNOWN;

  /**
   * @generated from field: string metricFamilyName = 2;
   */
  metricFamilyName = "";

  /**
   * @generated from field: string help = 4;
   */
  help = "";

  /**
   * @generated from field: string unit = 5;
   */
  unit = "";

  constructor(data?: PartialMessage<MetricMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cortexadmin.MetricMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "enum", T: proto3.getEnumType(MetricMetadata_MetricType) },
    { no: 2, name: "metricFamilyName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "help", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "unit", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetricMetadata {
    return new MetricMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetricMetadata {
    return new MetricMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetricMetadata {
    return new MetricMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: MetricMetadata | PlainMessage<MetricMetadata> | undefined, b: MetricMetadata | PlainMessage<MetricMetadata> | undefined): boolean {
    return proto3.util.equals(MetricMetadata, a, b);
  }
}

/**
 * @generated from enum cortexadmin.MetricMetadata.MetricType
 */
export enum MetricMetadata_MetricType {
  /**
   * @generated from enum value: UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * @generated from enum value: COUNTER = 1;
   */
  COUNTER = 1,

  /**
   * @generated from enum value: GAUGE = 2;
   */
  GAUGE = 2,

  /**
   * @generated from enum value: HISTOGRAM = 3;
   */
  HISTOGRAM = 3,

  /**
   * @generated from enum value: GAUGEHISTOGRAM = 4;
   */
  GAUGEHISTOGRAM = 4,

  /**
   * @generated from enum value: SUMMARY = 5;
   */
  SUMMARY = 5,

  /**
   * @generated from enum value: INFO = 6;
   */
  INFO = 6,

  /**
   * @generated from enum value: STATESET = 7;
   */
  STATESET = 7,
}
// Retrieve enum metadata with: proto3.getEnumType(MetricMetadata_MetricType)
proto3.util.setEnumType(MetricMetadata_MetricType, "cortexadmin.MetricMetadata.MetricType", [
  { no: 0, name: "UNKNOWN" },
  { no: 1, name: "COUNTER" },
  { no: 2, name: "GAUGE" },
  { no: 3, name: "HISTOGRAM" },
  { no: 4, name: "GAUGEHISTOGRAM" },
  { no: 5, name: "SUMMARY" },
  { no: 6, name: "INFO" },
  { no: 7, name: "STATESET" },
]);

/**
 * @generated from message cortexadmin.QueryRequest
 */
export class QueryRequest extends Message<QueryRequest> {
  /**
   * @generated from field: repeated string tenants = 1;
   */
  tenants: string[] = [];

  /**
   * @generated from field: string query = 2;
   */
  query = "";

  constructor(data?: PartialMessage<QueryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cortexadmin.QueryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tenants", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "query", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryRequest {
    return new QueryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryRequest {
    return new QueryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryRequest {
    return new QueryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryRequest | PlainMessage<QueryRequest> | undefined, b: QueryRequest | PlainMessage<QueryRequest> | undefined): boolean {
    return proto3.util.equals(QueryRequest, a, b);
  }
}

/**
 * @generated from message cortexadmin.QueryRangeRequest
 */
export class QueryRangeRequest extends Message<QueryRangeRequest> {
  /**
   * @generated from field: repeated string tenants = 1;
   */
  tenants: string[] = [];

  /**
   * @generated from field: string query = 2;
   */
  query = "";

  /**
   * @generated from field: google.protobuf.Timestamp start = 3;
   */
  start?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp end = 4;
   */
  end?: Timestamp;

  /**
   * @generated from field: google.protobuf.Duration step = 5;
   */
  step?: Duration;

  constructor(data?: PartialMessage<QueryRangeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cortexadmin.QueryRangeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tenants", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "query", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "start", kind: "message", T: Timestamp },
    { no: 4, name: "end", kind: "message", T: Timestamp },
    { no: 5, name: "step", kind: "message", T: Duration },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryRangeRequest {
    return new QueryRangeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryRangeRequest {
    return new QueryRangeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryRangeRequest {
    return new QueryRangeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryRangeRequest | PlainMessage<QueryRangeRequest> | undefined, b: QueryRangeRequest | PlainMessage<QueryRangeRequest> | undefined): boolean {
    return proto3.util.equals(QueryRangeRequest, a, b);
  }
}

/**
 * @generated from message cortexadmin.QueryResponse
 */
export class QueryResponse extends Message<QueryResponse> {
  /**
   * @generated from field: bytes data = 2;
   */
  data = new Uint8Array(0);

  constructor(data?: PartialMessage<QueryResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cortexadmin.QueryResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryResponse {
    return new QueryResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryResponse {
    return new QueryResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryResponse {
    return new QueryResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryResponse | PlainMessage<QueryResponse> | undefined, b: QueryResponse | PlainMessage<QueryResponse> | undefined): boolean {
    return proto3.util.equals(QueryResponse, a, b);
  }
}

/**
 * @generated from message cortexadmin.ConfigRequest
 */
export class ConfigRequest extends Message<ConfigRequest> {
  /**
   * @generated from field: repeated string configModes = 1;
   */
  configModes: string[] = [];

  constructor(data?: PartialMessage<ConfigRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cortexadmin.ConfigRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "configModes", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConfigRequest {
    return new ConfigRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConfigRequest {
    return new ConfigRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConfigRequest {
    return new ConfigRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ConfigRequest | PlainMessage<ConfigRequest> | undefined, b: ConfigRequest | PlainMessage<ConfigRequest> | undefined): boolean {
    return proto3.util.equals(ConfigRequest, a, b);
  }
}

/**
 * @generated from message cortexadmin.ConfigResponse
 */
export class ConfigResponse extends Message<ConfigResponse> {
  /**
   * @generated from field: repeated string configYaml = 4;
   */
  configYaml: string[] = [];

  constructor(data?: PartialMessage<ConfigResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cortexadmin.ConfigResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 4, name: "configYaml", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConfigResponse {
    return new ConfigResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConfigResponse {
    return new ConfigResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConfigResponse {
    return new ConfigResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ConfigResponse | PlainMessage<ConfigResponse> | undefined, b: ConfigResponse | PlainMessage<ConfigResponse> | undefined): boolean {
    return proto3.util.equals(ConfigResponse, a, b);
  }
}

/**
 * @generated from message cortexadmin.LoadRuleRequest
 */
export class LoadRuleRequest extends Message<LoadRuleRequest> {
  /**
   * @generated from field: string clusterId = 1;
   */
  clusterId = "";

  /**
   * defaults to "default"
   *
   * @generated from field: string namespace = 2;
   */
  namespace = "";

  /**
   * @generated from field: bytes yamlContent = 3;
   */
  yamlContent = new Uint8Array(0);

  constructor(data?: PartialMessage<LoadRuleRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cortexadmin.LoadRuleRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "clusterId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "yamlContent", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LoadRuleRequest {
    return new LoadRuleRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LoadRuleRequest {
    return new LoadRuleRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LoadRuleRequest {
    return new LoadRuleRequest().fromJsonString(jsonString, options);
  }

  static equals(a: LoadRuleRequest | PlainMessage<LoadRuleRequest> | undefined, b: LoadRuleRequest | PlainMessage<LoadRuleRequest> | undefined): boolean {
    return proto3.util.equals(LoadRuleRequest, a, b);
  }
}

/**
 * @generated from message cortexadmin.DeleteRuleRequest
 */
export class DeleteRuleRequest extends Message<DeleteRuleRequest> {
  /**
   * @generated from field: string clusterId = 1;
   */
  clusterId = "";

  /**
   * @generated from field: string namespace = 2;
   */
  namespace = "";

  /**
   * @generated from field: string groupName = 3;
   */
  groupName = "";

  constructor(data?: PartialMessage<DeleteRuleRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cortexadmin.DeleteRuleRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "clusterId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "groupName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteRuleRequest {
    return new DeleteRuleRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteRuleRequest {
    return new DeleteRuleRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteRuleRequest {
    return new DeleteRuleRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteRuleRequest | PlainMessage<DeleteRuleRequest> | undefined, b: DeleteRuleRequest | PlainMessage<DeleteRuleRequest> | undefined): boolean {
    return proto3.util.equals(DeleteRuleRequest, a, b);
  }
}

/**
 * @generated from message cortexadmin.GetRuleRequest
 */
export class GetRuleRequest extends Message<GetRuleRequest> {
  /**
   * @generated from field: string clusterId = 1;
   */
  clusterId = "";

  /**
   * @generated from field: string namespace = 2;
   */
  namespace = "";

  /**
   * @generated from field: string groupName = 3;
   */
  groupName = "";

  constructor(data?: PartialMessage<GetRuleRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cortexadmin.GetRuleRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "clusterId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "groupName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRuleRequest {
    return new GetRuleRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRuleRequest {
    return new GetRuleRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRuleRequest {
    return new GetRuleRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetRuleRequest | PlainMessage<GetRuleRequest> | undefined, b: GetRuleRequest | PlainMessage<GetRuleRequest> | undefined): boolean {
    return proto3.util.equals(GetRuleRequest, a, b);
  }
}

/**
 * @generated from message cortexadmin.ListRulesRequest
 */
export class ListRulesRequest extends Message<ListRulesRequest> {
  /**
   * @generated from field: repeated string clusterId = 1;
   */
  clusterId: string[] = [];

  /**
   * @generated from field: repeated string ruleType = 2;
   */
  ruleType: string[] = [];

  /**
   * @generated from field: repeated string healthFilter = 3;
   */
  healthFilter: string[] = [];

  /**
   * @generated from field: repeated string stateFilter = 4;
   */
  stateFilter: string[] = [];

  /**
   * @generated from field: string ruleNameRegexp = 5;
   */
  ruleNameRegexp = "";

  /**
   * @generated from field: string groupNameRegexp = 6;
   */
  groupNameRegexp = "";

  /**
   * @generated from field: optional bool listInvalid = 7;
   */
  listInvalid?: boolean;

  /**
   * @generated from field: optional bool requestAll = 8;
   */
  requestAll?: boolean;

  /**
   * @generated from field: string namespaceRegexp = 9;
   */
  namespaceRegexp = "";

  constructor(data?: PartialMessage<ListRulesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cortexadmin.ListRulesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "clusterId", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "ruleType", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "healthFilter", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "stateFilter", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "ruleNameRegexp", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "groupNameRegexp", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "listInvalid", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 8, name: "requestAll", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 9, name: "namespaceRegexp", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListRulesRequest {
    return new ListRulesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListRulesRequest {
    return new ListRulesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListRulesRequest {
    return new ListRulesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListRulesRequest | PlainMessage<ListRulesRequest> | undefined, b: ListRulesRequest | PlainMessage<ListRulesRequest> | undefined): boolean {
    return proto3.util.equals(ListRulesRequest, a, b);
  }
}

/**
 * matches the return of cortex ruler api
 * https://github.com/cortexproject/cortex/blob/c0e4545fd26f33ca5cc3323ee48e4c2ccd182b83/pkg/ruler/api.go#L215
 *
 * @generated from message cortexadmin.ListRulesResponse
 */
export class ListRulesResponse extends Message<ListRulesResponse> {
  /**
   * @generated from field: string status = 1;
   */
  status = "";

  /**
   * @generated from field: cortexadmin.RuleGroups data = 2;
   */
  data?: RuleGroups;

  constructor(data?: PartialMessage<ListRulesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cortexadmin.ListRulesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "data", kind: "message", T: RuleGroups },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListRulesResponse {
    return new ListRulesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListRulesResponse {
    return new ListRulesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListRulesResponse {
    return new ListRulesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListRulesResponse | PlainMessage<ListRulesResponse> | undefined, b: ListRulesResponse | PlainMessage<ListRulesResponse> | undefined): boolean {
    return proto3.util.equals(ListRulesResponse, a, b);
  }
}

/**
 * @generated from message cortexadmin.RuleGroups
 */
export class RuleGroups extends Message<RuleGroups> {
  /**
   * @generated from field: repeated cortexadmin.RuleGroup groups = 1;
   */
  groups: RuleGroup[] = [];

  constructor(data?: PartialMessage<RuleGroups>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cortexadmin.RuleGroups";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "groups", kind: "message", T: RuleGroup, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RuleGroups {
    return new RuleGroups().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RuleGroups {
    return new RuleGroups().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RuleGroups {
    return new RuleGroups().fromJsonString(jsonString, options);
  }

  static equals(a: RuleGroups | PlainMessage<RuleGroups> | undefined, b: RuleGroups | PlainMessage<RuleGroups> | undefined): boolean {
    return proto3.util.equals(RuleGroups, a, b);
  }
}

/**
 * @generated from message cortexadmin.RuleGroup
 */
export class RuleGroup extends Message<RuleGroup> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string file = 2;
   */
  file = "";

  /**
   * @generated from field: repeated cortexadmin.Rule rules = 3;
   */
  rules: Rule[] = [];

  /**
   * @generated from field: double interval = 4;
   */
  interval = 0;

  /**
   * Note : string instead of timestamp to preserve compatibility with native prometheus api return value
   *
   * @generated from field: string lastEvaluation = 5;
   */
  lastEvaluation = "";

  /**
   * @generated from field: double evaluationTime = 6;
   */
  evaluationTime = 0;

  /**
   * opni specific field
   *
   * @generated from field: string clusterId = 7;
   */
  clusterId = "";

  constructor(data?: PartialMessage<RuleGroup>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cortexadmin.RuleGroup";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "file", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "rules", kind: "message", T: Rule, repeated: true },
    { no: 4, name: "interval", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 5, name: "lastEvaluation", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "evaluationTime", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 7, name: "clusterId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RuleGroup {
    return new RuleGroup().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RuleGroup {
    return new RuleGroup().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RuleGroup {
    return new RuleGroup().fromJsonString(jsonString, options);
  }

  static equals(a: RuleGroup | PlainMessage<RuleGroup> | undefined, b: RuleGroup | PlainMessage<RuleGroup> | undefined): boolean {
    return proto3.util.equals(RuleGroup, a, b);
  }
}

/**
 * combination of alerting and recording rule (alerting rule is a superset of recording)
 *
 * @generated from message cortexadmin.Rule
 */
export class Rule extends Message<Rule> {
  /**
   * @generated from field: string state = 1;
   */
  state = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string query = 3;
   */
  query = "";

  /**
   * @generated from field: double duration = 4;
   */
  duration = 0;

  /**
   * @generated from field: map<string, string> labels = 5;
   */
  labels: { [key: string]: string } = {};

  /**
   * @generated from field: map<string, string> annotations = 6;
   */
  annotations: { [key: string]: string } = {};

  /**
   * @generated from field: string health = 7;
   */
  health = "";

  /**
   * @generated from field: repeated cortexadmin.Alert alerts = 8;
   */
  alerts: Alert[] = [];

  /**
   * @generated from field: string lastError = 9;
   */
  lastError = "";

  /**
   * @generated from field: string type = 10;
   */
  type = "";

  /**
   * Note : string instead of timestamp to preserve compatibility with native prometheus api return value
   *
   * @generated from field: string lastEvaluation = 11;
   */
  lastEvaluation = "";

  /**
   * @generated from field: double evaluationTime = 12;
   */
  evaluationTime = 0;

  constructor(data?: PartialMessage<Rule>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cortexadmin.Rule";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "state", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "query", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "duration", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 5, name: "labels", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 6, name: "annotations", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 7, name: "health", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "alerts", kind: "message", T: Alert, repeated: true },
    { no: 9, name: "lastError", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "lastEvaluation", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "evaluationTime", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Rule {
    return new Rule().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Rule {
    return new Rule().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Rule {
    return new Rule().fromJsonString(jsonString, options);
  }

  static equals(a: Rule | PlainMessage<Rule> | undefined, b: Rule | PlainMessage<Rule> | undefined): boolean {
    return proto3.util.equals(Rule, a, b);
  }
}

/**
 * @generated from message cortexadmin.Alert
 */
export class Alert extends Message<Alert> {
  /**
   * @generated from field: map<string, string> labels = 1;
   */
  labels: { [key: string]: string } = {};

  /**
   * @generated from field: map<string, string> annotations = 2;
   */
  annotations: { [key: string]: string } = {};

  /**
   * @generated from field: string state = 3;
   */
  state = "";

  /**
   * Note : string instead of timestamp to preserve compatibility with native prometheus api return value
   *
   * @generated from field: string activeAt = 4;
   */
  activeAt = "";

  /**
   * @generated from field: string value = 5;
   */
  value = "";

  constructor(data?: PartialMessage<Alert>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cortexadmin.Alert";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "labels", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 2, name: "annotations", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 3, name: "state", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "activeAt", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Alert {
    return new Alert().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Alert {
    return new Alert().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Alert {
    return new Alert().fromJsonString(jsonString, options);
  }

  static equals(a: Alert | PlainMessage<Alert> | undefined, b: Alert | PlainMessage<Alert> | undefined): boolean {
    return proto3.util.equals(Alert, a, b);
  }
}

