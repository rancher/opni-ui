// @generated by protoc-gen-es v1.2.1 with parameter "target=ts,import_extension=none"
// @generated from file github.com/rancher/opni/plugins/metrics/pkg/apis/cortexadmin/status.proto (package cortexadmin, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Timestamp } from "../../../../../../../../google/protobuf/timestamp_pb";

/**
 * @generated from message cortexadmin.CortexStatus
 */
export class CortexStatus extends Message<CortexStatus> {
  /**
   * @generated from field: cortexadmin.DistributorStatus distributor = 1;
   */
  distributor?: DistributorStatus;

  /**
   * @generated from field: cortexadmin.IngesterStatus ingester = 2;
   */
  ingester?: IngesterStatus;

  /**
   * @generated from field: cortexadmin.RulerStatus ruler = 3;
   */
  ruler?: RulerStatus;

  /**
   * @generated from field: cortexadmin.PurgerStatus purger = 4;
   */
  purger?: PurgerStatus;

  /**
   * @generated from field: cortexadmin.CompactorStatus compactor = 5;
   */
  compactor?: CompactorStatus;

  /**
   * @generated from field: cortexadmin.StoreGatewayStatus storeGateway = 6;
   */
  storeGateway?: StoreGatewayStatus;

  /**
   * @generated from field: cortexadmin.QueryFrontendStatus queryFrontend = 7;
   */
  queryFrontend?: QueryFrontendStatus;

  /**
   * @generated from field: cortexadmin.QuerierStatus querier = 8;
   */
  querier?: QuerierStatus;

  /**
   * @generated from field: google.protobuf.Timestamp timestamp = 9;
   */
  timestamp?: Timestamp;

  constructor(data?: PartialMessage<CortexStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cortexadmin.CortexStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "distributor", kind: "message", T: DistributorStatus },
    { no: 2, name: "ingester", kind: "message", T: IngesterStatus },
    { no: 3, name: "ruler", kind: "message", T: RulerStatus },
    { no: 4, name: "purger", kind: "message", T: PurgerStatus },
    { no: 5, name: "compactor", kind: "message", T: CompactorStatus },
    { no: 6, name: "storeGateway", kind: "message", T: StoreGatewayStatus },
    { no: 7, name: "queryFrontend", kind: "message", T: QueryFrontendStatus },
    { no: 8, name: "querier", kind: "message", T: QuerierStatus },
    { no: 9, name: "timestamp", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CortexStatus {
    return new CortexStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CortexStatus {
    return new CortexStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CortexStatus {
    return new CortexStatus().fromJsonString(jsonString, options);
  }

  static equals(a: CortexStatus | PlainMessage<CortexStatus> | undefined, b: CortexStatus | PlainMessage<CortexStatus> | undefined): boolean {
    return proto3.util.equals(CortexStatus, a, b);
  }
}

/**
 * Status of an individual cortex service (module)
 *
 * @generated from message cortexadmin.ServiceStatus
 */
export class ServiceStatus extends Message<ServiceStatus> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string status = 2;
   */
  status = "";

  constructor(data?: PartialMessage<ServiceStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cortexadmin.ServiceStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServiceStatus {
    return new ServiceStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServiceStatus {
    return new ServiceStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServiceStatus {
    return new ServiceStatus().fromJsonString(jsonString, options);
  }

  static equals(a: ServiceStatus | PlainMessage<ServiceStatus> | undefined, b: ServiceStatus | PlainMessage<ServiceStatus> | undefined): boolean {
    return proto3.util.equals(ServiceStatus, a, b);
  }
}

/**
 * @generated from message cortexadmin.ServiceStatusList
 */
export class ServiceStatusList extends Message<ServiceStatusList> {
  /**
   * field name matches cortex
   *
   * @generated from field: repeated cortexadmin.ServiceStatus services = 1;
   */
  services: ServiceStatus[] = [];

  constructor(data?: PartialMessage<ServiceStatusList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cortexadmin.ServiceStatusList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "services", kind: "message", T: ServiceStatus, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServiceStatusList {
    return new ServiceStatusList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServiceStatusList {
    return new ServiceStatusList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServiceStatusList {
    return new ServiceStatusList().fromJsonString(jsonString, options);
  }

  static equals(a: ServiceStatusList | PlainMessage<ServiceStatusList> | undefined, b: ServiceStatusList | PlainMessage<ServiceStatusList> | undefined): boolean {
    return proto3.util.equals(ServiceStatusList, a, b);
  }
}

/**
 * Status of a single shard in a ring
 *
 * @generated from message cortexadmin.ShardStatus
 */
export class ShardStatus extends Message<ShardStatus> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string state = 2;
   */
  state = "";

  /**
   * @generated from field: string address = 3;
   */
  address = "";

  /**
   * @generated from field: string timestamp = 4;
   */
  timestamp = "";

  /**
   * @generated from field: string registeredTimestamp = 5;
   */
  registeredTimestamp = "";

  /**
   * @generated from field: string zone = 6;
   */
  zone = "";

  constructor(data?: PartialMessage<ShardStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cortexadmin.ShardStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "state", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "timestamp", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "registeredTimestamp", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "zone", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ShardStatus {
    return new ShardStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ShardStatus {
    return new ShardStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ShardStatus {
    return new ShardStatus().fromJsonString(jsonString, options);
  }

  static equals(a: ShardStatus | PlainMessage<ShardStatus> | undefined, b: ShardStatus | PlainMessage<ShardStatus> | undefined): boolean {
    return proto3.util.equals(ShardStatus, a, b);
  }
}

/**
 * @generated from message cortexadmin.ShardStatusList
 */
export class ShardStatusList extends Message<ShardStatusList> {
  /**
   * field name matches cortex
   *
   * @generated from field: repeated cortexadmin.ShardStatus shards = 1;
   */
  shards: ShardStatus[] = [];

  constructor(data?: PartialMessage<ShardStatusList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cortexadmin.ShardStatusList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "shards", kind: "message", T: ShardStatus, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ShardStatusList {
    return new ShardStatusList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ShardStatusList {
    return new ShardStatusList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ShardStatusList {
    return new ShardStatusList().fromJsonString(jsonString, options);
  }

  static equals(a: ShardStatusList | PlainMessage<ShardStatusList> | undefined, b: ShardStatusList | PlainMessage<ShardStatusList> | undefined): boolean {
    return proto3.util.equals(ShardStatusList, a, b);
  }
}

/**
 * Status of a single member of a memberlist
 *
 * @generated from message cortexadmin.MemberStatus
 */
export class MemberStatus extends Message<MemberStatus> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string address = 2;
   */
  address = "";

  /**
   * @generated from field: uint32 port = 3;
   */
  port = 0;

  /**
   * @generated from field: int32 state = 4;
   */
  state = 0;

  constructor(data?: PartialMessage<MemberStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cortexadmin.MemberStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "port", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "state", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MemberStatus {
    return new MemberStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MemberStatus {
    return new MemberStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MemberStatus {
    return new MemberStatus().fromJsonString(jsonString, options);
  }

  static equals(a: MemberStatus | PlainMessage<MemberStatus> | undefined, b: MemberStatus | PlainMessage<MemberStatus> | undefined): boolean {
    return proto3.util.equals(MemberStatus, a, b);
  }
}

/**
 * @generated from message cortexadmin.MemberStatusList
 */
export class MemberStatusList extends Message<MemberStatusList> {
  /**
   * @generated from field: repeated cortexadmin.MemberStatus items = 1;
   */
  items: MemberStatus[] = [];

  constructor(data?: PartialMessage<MemberStatusList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cortexadmin.MemberStatusList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "items", kind: "message", T: MemberStatus, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MemberStatusList {
    return new MemberStatusList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MemberStatusList {
    return new MemberStatusList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MemberStatusList {
    return new MemberStatusList().fromJsonString(jsonString, options);
  }

  static equals(a: MemberStatusList | PlainMessage<MemberStatusList> | undefined, b: MemberStatusList | PlainMessage<MemberStatusList> | undefined): boolean {
    return proto3.util.equals(MemberStatusList, a, b);
  }
}

/**
 * @generated from message cortexadmin.MemberlistStatus
 */
export class MemberlistStatus extends Message<MemberlistStatus> {
  /**
   * Whether the service is currently using a memberlist
   *
   * @generated from field: bool enabled = 1;
   */
  enabled = false;

  /**
   * The status of each member in the memberlist
   *
   * @generated from field: cortexadmin.MemberStatusList members = 2;
   */
  members?: MemberStatusList;

  /**
   * A list of keys in the key-value store used by the memberlist
   *
   * @generated from field: repeated string keys = 3;
   */
  keys: string[] = [];

  constructor(data?: PartialMessage<MemberlistStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cortexadmin.MemberlistStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "members", kind: "message", T: MemberStatusList },
    { no: 3, name: "keys", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MemberlistStatus {
    return new MemberlistStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MemberlistStatus {
    return new MemberlistStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MemberlistStatus {
    return new MemberlistStatus().fromJsonString(jsonString, options);
  }

  static equals(a: MemberlistStatus | PlainMessage<MemberlistStatus> | undefined, b: MemberlistStatus | PlainMessage<MemberlistStatus> | undefined): boolean {
    return proto3.util.equals(MemberlistStatus, a, b);
  }
}

/**
 * @generated from message cortexadmin.RingStatus
 */
export class RingStatus extends Message<RingStatus> {
  /**
   * @generated from field: bool enabled = 1;
   */
  enabled = false;

  /**
   * @generated from field: cortexadmin.ShardStatusList shards = 2;
   */
  shards?: ShardStatusList;

  constructor(data?: PartialMessage<RingStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cortexadmin.RingStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "shards", kind: "message", T: ShardStatusList },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RingStatus {
    return new RingStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RingStatus {
    return new RingStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RingStatus {
    return new RingStatus().fromJsonString(jsonString, options);
  }

  static equals(a: RingStatus | PlainMessage<RingStatus> | undefined, b: RingStatus | PlainMessage<RingStatus> | undefined): boolean {
    return proto3.util.equals(RingStatus, a, b);
  }
}

/**
 * @generated from message cortexadmin.DistributorStatus
 */
export class DistributorStatus extends Message<DistributorStatus> {
  /**
   * @generated from field: cortexadmin.ServiceStatusList services = 1;
   */
  services?: ServiceStatusList;

  /**
   * @generated from field: cortexadmin.RingStatus ingesterRing = 2;
   */
  ingesterRing?: RingStatus;

  constructor(data?: PartialMessage<DistributorStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cortexadmin.DistributorStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "services", kind: "message", T: ServiceStatusList },
    { no: 2, name: "ingesterRing", kind: "message", T: RingStatus },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DistributorStatus {
    return new DistributorStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DistributorStatus {
    return new DistributorStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DistributorStatus {
    return new DistributorStatus().fromJsonString(jsonString, options);
  }

  static equals(a: DistributorStatus | PlainMessage<DistributorStatus> | undefined, b: DistributorStatus | PlainMessage<DistributorStatus> | undefined): boolean {
    return proto3.util.equals(DistributorStatus, a, b);
  }
}

/**
 * @generated from message cortexadmin.IngesterStatus
 */
export class IngesterStatus extends Message<IngesterStatus> {
  /**
   * @generated from field: cortexadmin.ServiceStatusList services = 1;
   */
  services?: ServiceStatusList;

  /**
   * @generated from field: cortexadmin.MemberlistStatus memberlist = 2;
   */
  memberlist?: MemberlistStatus;

  /**
   * @generated from field: cortexadmin.RingStatus ring = 3;
   */
  ring?: RingStatus;

  constructor(data?: PartialMessage<IngesterStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cortexadmin.IngesterStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "services", kind: "message", T: ServiceStatusList },
    { no: 2, name: "memberlist", kind: "message", T: MemberlistStatus },
    { no: 3, name: "ring", kind: "message", T: RingStatus },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IngesterStatus {
    return new IngesterStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IngesterStatus {
    return new IngesterStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IngesterStatus {
    return new IngesterStatus().fromJsonString(jsonString, options);
  }

  static equals(a: IngesterStatus | PlainMessage<IngesterStatus> | undefined, b: IngesterStatus | PlainMessage<IngesterStatus> | undefined): boolean {
    return proto3.util.equals(IngesterStatus, a, b);
  }
}

/**
 * @generated from message cortexadmin.RulerStatus
 */
export class RulerStatus extends Message<RulerStatus> {
  /**
   * @generated from field: cortexadmin.ServiceStatusList services = 1;
   */
  services?: ServiceStatusList;

  /**
   * @generated from field: cortexadmin.MemberlistStatus memberlist = 2;
   */
  memberlist?: MemberlistStatus;

  /**
   * @generated from field: cortexadmin.RingStatus ring = 3;
   */
  ring?: RingStatus;

  constructor(data?: PartialMessage<RulerStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cortexadmin.RulerStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "services", kind: "message", T: ServiceStatusList },
    { no: 2, name: "memberlist", kind: "message", T: MemberlistStatus },
    { no: 3, name: "ring", kind: "message", T: RingStatus },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RulerStatus {
    return new RulerStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RulerStatus {
    return new RulerStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RulerStatus {
    return new RulerStatus().fromJsonString(jsonString, options);
  }

  static equals(a: RulerStatus | PlainMessage<RulerStatus> | undefined, b: RulerStatus | PlainMessage<RulerStatus> | undefined): boolean {
    return proto3.util.equals(RulerStatus, a, b);
  }
}

/**
 * @generated from message cortexadmin.PurgerStatus
 */
export class PurgerStatus extends Message<PurgerStatus> {
  /**
   * @generated from field: cortexadmin.ServiceStatusList services = 1;
   */
  services?: ServiceStatusList;

  constructor(data?: PartialMessage<PurgerStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cortexadmin.PurgerStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "services", kind: "message", T: ServiceStatusList },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PurgerStatus {
    return new PurgerStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PurgerStatus {
    return new PurgerStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PurgerStatus {
    return new PurgerStatus().fromJsonString(jsonString, options);
  }

  static equals(a: PurgerStatus | PlainMessage<PurgerStatus> | undefined, b: PurgerStatus | PlainMessage<PurgerStatus> | undefined): boolean {
    return proto3.util.equals(PurgerStatus, a, b);
  }
}

/**
 * @generated from message cortexadmin.CompactorStatus
 */
export class CompactorStatus extends Message<CompactorStatus> {
  /**
   * @generated from field: cortexadmin.ServiceStatusList services = 1;
   */
  services?: ServiceStatusList;

  /**
   * @generated from field: cortexadmin.MemberlistStatus memberlist = 2;
   */
  memberlist?: MemberlistStatus;

  /**
   * @generated from field: cortexadmin.RingStatus ring = 3;
   */
  ring?: RingStatus;

  constructor(data?: PartialMessage<CompactorStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cortexadmin.CompactorStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "services", kind: "message", T: ServiceStatusList },
    { no: 2, name: "memberlist", kind: "message", T: MemberlistStatus },
    { no: 3, name: "ring", kind: "message", T: RingStatus },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CompactorStatus {
    return new CompactorStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CompactorStatus {
    return new CompactorStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CompactorStatus {
    return new CompactorStatus().fromJsonString(jsonString, options);
  }

  static equals(a: CompactorStatus | PlainMessage<CompactorStatus> | undefined, b: CompactorStatus | PlainMessage<CompactorStatus> | undefined): boolean {
    return proto3.util.equals(CompactorStatus, a, b);
  }
}

/**
 * @generated from message cortexadmin.StoreGatewayStatus
 */
export class StoreGatewayStatus extends Message<StoreGatewayStatus> {
  /**
   * @generated from field: cortexadmin.ServiceStatusList services = 1;
   */
  services?: ServiceStatusList;

  /**
   * @generated from field: cortexadmin.MemberlistStatus memberlist = 2;
   */
  memberlist?: MemberlistStatus;

  /**
   * @generated from field: cortexadmin.RingStatus ring = 3;
   */
  ring?: RingStatus;

  constructor(data?: PartialMessage<StoreGatewayStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cortexadmin.StoreGatewayStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "services", kind: "message", T: ServiceStatusList },
    { no: 2, name: "memberlist", kind: "message", T: MemberlistStatus },
    { no: 3, name: "ring", kind: "message", T: RingStatus },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StoreGatewayStatus {
    return new StoreGatewayStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StoreGatewayStatus {
    return new StoreGatewayStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StoreGatewayStatus {
    return new StoreGatewayStatus().fromJsonString(jsonString, options);
  }

  static equals(a: StoreGatewayStatus | PlainMessage<StoreGatewayStatus> | undefined, b: StoreGatewayStatus | PlainMessage<StoreGatewayStatus> | undefined): boolean {
    return proto3.util.equals(StoreGatewayStatus, a, b);
  }
}

/**
 * @generated from message cortexadmin.QueryFrontendStatus
 */
export class QueryFrontendStatus extends Message<QueryFrontendStatus> {
  /**
   * @generated from field: cortexadmin.ServiceStatusList services = 1;
   */
  services?: ServiceStatusList;

  constructor(data?: PartialMessage<QueryFrontendStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cortexadmin.QueryFrontendStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "services", kind: "message", T: ServiceStatusList },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryFrontendStatus {
    return new QueryFrontendStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryFrontendStatus {
    return new QueryFrontendStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryFrontendStatus {
    return new QueryFrontendStatus().fromJsonString(jsonString, options);
  }

  static equals(a: QueryFrontendStatus | PlainMessage<QueryFrontendStatus> | undefined, b: QueryFrontendStatus | PlainMessage<QueryFrontendStatus> | undefined): boolean {
    return proto3.util.equals(QueryFrontendStatus, a, b);
  }
}

/**
 * @generated from message cortexadmin.QuerierStatus
 */
export class QuerierStatus extends Message<QuerierStatus> {
  /**
   * @generated from field: cortexadmin.ServiceStatusList services = 1;
   */
  services?: ServiceStatusList;

  /**
   * @generated from field: cortexadmin.MemberlistStatus memberlist = 2;
   */
  memberlist?: MemberlistStatus;

  constructor(data?: PartialMessage<QuerierStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cortexadmin.QuerierStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "services", kind: "message", T: ServiceStatusList },
    { no: 2, name: "memberlist", kind: "message", T: MemberlistStatus },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QuerierStatus {
    return new QuerierStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QuerierStatus {
    return new QuerierStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QuerierStatus {
    return new QuerierStatus().fromJsonString(jsonString, options);
  }

  static equals(a: QuerierStatus | PlainMessage<QuerierStatus> | undefined, b: QuerierStatus | PlainMessage<QuerierStatus> | undefined): boolean {
    return proto3.util.equals(QuerierStatus, a, b);
  }
}

