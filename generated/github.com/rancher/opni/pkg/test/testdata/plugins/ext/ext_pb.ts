// @generated by protoc-gen-es v1.2.1 with parameter "target=ts,import_extension=none"
// @generated from file github.com/rancher/opni/pkg/test/testdata/plugins/ext/ext.proto (package ext, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message ext.Reference
 */
export class Reference extends Message<Reference> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<Reference>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ext.Reference";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Reference {
    return new Reference().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Reference {
    return new Reference().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Reference {
    return new Reference().fromJsonString(jsonString, options);
  }

  static equals(a: Reference | PlainMessage<Reference> | undefined, b: Reference | PlainMessage<Reference> | undefined): boolean {
    return proto3.util.equals(Reference, a, b);
  }
}

/**
 * @generated from message ext.SetRequest
 */
export class SetRequest extends Message<SetRequest> {
  /**
   * @generated from field: ext.Reference node = 1;
   */
  node?: Reference;

  /**
   * @generated from field: string value = 2;
   */
  value = "";

  /**
   * @generated from field: ext.ExampleValue example = 3;
   */
  example?: ExampleValue;

  constructor(data?: PartialMessage<SetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ext.SetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "node", kind: "message", T: Reference },
    { no: 2, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "example", kind: "message", T: ExampleValue },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetRequest {
    return new SetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetRequest {
    return new SetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetRequest {
    return new SetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SetRequest | PlainMessage<SetRequest> | undefined, b: SetRequest | PlainMessage<SetRequest> | undefined): boolean {
    return proto3.util.equals(SetRequest, a, b);
  }
}

/**
 * @generated from message ext.ExampleValue
 */
export class ExampleValue extends Message<ExampleValue> {
  /**
   * @generated from field: string value = 1;
   */
  value = "";

  constructor(data?: PartialMessage<ExampleValue>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ext.ExampleValue";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExampleValue {
    return new ExampleValue().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExampleValue {
    return new ExampleValue().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExampleValue {
    return new ExampleValue().fromJsonString(jsonString, options);
  }

  static equals(a: ExampleValue | PlainMessage<ExampleValue> | undefined, b: ExampleValue | PlainMessage<ExampleValue> | undefined): boolean {
    return proto3.util.equals(ExampleValue, a, b);
  }
}

/**
 * @generated from message ext.FooRequest
 */
export class FooRequest extends Message<FooRequest> {
  /**
   * @generated from field: string request = 1;
   */
  request = "";

  constructor(data?: PartialMessage<FooRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ext.FooRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "request", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FooRequest {
    return new FooRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FooRequest {
    return new FooRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FooRequest {
    return new FooRequest().fromJsonString(jsonString, options);
  }

  static equals(a: FooRequest | PlainMessage<FooRequest> | undefined, b: FooRequest | PlainMessage<FooRequest> | undefined): boolean {
    return proto3.util.equals(FooRequest, a, b);
  }
}

/**
 * @generated from message ext.FooResponse
 */
export class FooResponse extends Message<FooResponse> {
  /**
   * @generated from field: string response = 1;
   */
  response = "";

  constructor(data?: PartialMessage<FooResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ext.FooResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "response", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FooResponse {
    return new FooResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FooResponse {
    return new FooResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FooResponse {
    return new FooResponse().fromJsonString(jsonString, options);
  }

  static equals(a: FooResponse | PlainMessage<FooResponse> | undefined, b: FooResponse | PlainMessage<FooResponse> | undefined): boolean {
    return proto3.util.equals(FooResponse, a, b);
  }
}

/**
 * @generated from message ext.BarRequest
 */
export class BarRequest extends Message<BarRequest> {
  /**
   * @generated from field: string param1 = 1;
   */
  param1 = "";

  /**
   * @generated from field: string param2 = 2;
   */
  param2 = "";

  /**
   * @generated from field: string param3 = 3;
   */
  param3 = "";

  constructor(data?: PartialMessage<BarRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ext.BarRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "param1", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "param2", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "param3", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BarRequest {
    return new BarRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BarRequest {
    return new BarRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BarRequest {
    return new BarRequest().fromJsonString(jsonString, options);
  }

  static equals(a: BarRequest | PlainMessage<BarRequest> | undefined, b: BarRequest | PlainMessage<BarRequest> | undefined): boolean {
    return proto3.util.equals(BarRequest, a, b);
  }
}

/**
 * @generated from message ext.BarResponse
 */
export class BarResponse extends Message<BarResponse> {
  /**
   * @generated from field: string param1 = 1;
   */
  param1 = "";

  /**
   * @generated from field: string param2 = 2;
   */
  param2 = "";

  /**
   * @generated from field: string param3 = 3;
   */
  param3 = "";

  constructor(data?: PartialMessage<BarResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ext.BarResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "param1", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "param2", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "param3", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BarResponse {
    return new BarResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BarResponse {
    return new BarResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BarResponse {
    return new BarResponse().fromJsonString(jsonString, options);
  }

  static equals(a: BarResponse | PlainMessage<BarResponse> | undefined, b: BarResponse | PlainMessage<BarResponse> | undefined): boolean {
    return proto3.util.equals(BarResponse, a, b);
  }
}

/**
 * @generated from message ext.BazRequest
 */
export class BazRequest extends Message<BazRequest> {
  /**
   * @generated from field: double paramFloat64 = 1;
   */
  paramFloat64 = 0;

  /**
   * @generated from field: int64 paramInt64 = 3;
   */
  paramInt64 = protoInt64.zero;

  /**
   * @generated from field: bool paramBool = 8;
   */
  paramBool = false;

  /**
   * @generated from field: string paramString = 9;
   */
  paramString = "";

  /**
   * @generated from field: bytes paramBytes = 10;
   */
  paramBytes = new Uint8Array(0);

  /**
   * @generated from field: ext.BazRequest.BazEnum paramEnum = 11;
   */
  paramEnum = BazRequest_BazEnum.UNKNOWN;

  /**
   * @generated from field: repeated string paramRepeatedString = 12;
   */
  paramRepeatedString: string[] = [];

  /**
   * @generated from field: ext.BazRequest paramMsg = 13;
   */
  paramMsg?: BazRequest;

  constructor(data?: PartialMessage<BazRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ext.BazRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "paramFloat64", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 3, name: "paramInt64", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 8, name: "paramBool", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "paramString", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "paramBytes", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 11, name: "paramEnum", kind: "enum", T: proto3.getEnumType(BazRequest_BazEnum) },
    { no: 12, name: "paramRepeatedString", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 13, name: "paramMsg", kind: "message", T: BazRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BazRequest {
    return new BazRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BazRequest {
    return new BazRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BazRequest {
    return new BazRequest().fromJsonString(jsonString, options);
  }

  static equals(a: BazRequest | PlainMessage<BazRequest> | undefined, b: BazRequest | PlainMessage<BazRequest> | undefined): boolean {
    return proto3.util.equals(BazRequest, a, b);
  }
}

/**
 * @generated from enum ext.BazRequest.BazEnum
 */
export enum BazRequest_BazEnum {
  /**
   * @generated from enum value: UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * @generated from enum value: FOO = 1;
   */
  FOO = 1,

  /**
   * @generated from enum value: BAR = 2;
   */
  BAR = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(BazRequest_BazEnum)
proto3.util.setEnumType(BazRequest_BazEnum, "ext.BazRequest.BazEnum", [
  { no: 0, name: "UNKNOWN" },
  { no: 1, name: "FOO" },
  { no: 2, name: "BAR" },
]);

