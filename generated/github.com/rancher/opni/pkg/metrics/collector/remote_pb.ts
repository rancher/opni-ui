// @generated by protoc-gen-es v1.2.1 with parameter "target=ts,import_extension=none"
// @generated from file github.com/rancher/opni/pkg/metrics/collector/remote.proto (package collector, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Desc } from "../desc/desc_pb";
import { Metric as Metric$1 } from "../../../../../prometheus/client_model/io/prometheus/client/metrics_pb";

/**
 * @generated from message collector.DescriptorList
 */
export class DescriptorList extends Message<DescriptorList> {
  /**
   * @generated from field: repeated desc.Desc descriptors = 1;
   */
  descriptors: Desc[] = [];

  constructor(data?: PartialMessage<DescriptorList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "collector.DescriptorList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "descriptors", kind: "message", T: Desc, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DescriptorList {
    return new DescriptorList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DescriptorList {
    return new DescriptorList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DescriptorList {
    return new DescriptorList().fromJsonString(jsonString, options);
  }

  static equals(a: DescriptorList | PlainMessage<DescriptorList> | undefined, b: DescriptorList | PlainMessage<DescriptorList> | undefined): boolean {
    return proto3.util.equals(DescriptorList, a, b);
  }
}

/**
 * @generated from message collector.MetricList
 */
export class MetricList extends Message<MetricList> {
  /**
   * @generated from field: repeated collector.Metric metrics = 1;
   */
  metrics: Metric[] = [];

  constructor(data?: PartialMessage<MetricList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "collector.MetricList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metrics", kind: "message", T: Metric, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetricList {
    return new MetricList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetricList {
    return new MetricList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetricList {
    return new MetricList().fromJsonString(jsonString, options);
  }

  static equals(a: MetricList | PlainMessage<MetricList> | undefined, b: MetricList | PlainMessage<MetricList> | undefined): boolean {
    return proto3.util.equals(MetricList, a, b);
  }
}

/**
 * @generated from message collector.Metric
 */
export class Metric extends Message<Metric> {
  /**
   * @generated from field: desc.Desc desc = 1;
   */
  desc?: Desc;

  /**
   * @generated from field: io.prometheus.client.Metric metric = 2;
   */
  metric?: Metric$1;

  constructor(data?: PartialMessage<Metric>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "collector.Metric";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "desc", kind: "message", T: Desc },
    { no: 2, name: "metric", kind: "message", T: Metric$1 },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Metric {
    return new Metric().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Metric {
    return new Metric().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Metric {
    return new Metric().fromJsonString(jsonString, options);
  }

  static equals(a: Metric | PlainMessage<Metric> | undefined, b: Metric | PlainMessage<Metric> | undefined): boolean {
    return proto3.util.equals(Metric, a, b);
  }
}

