// @generated by protoc-gen-es v1.2.1 with parameter "target=ts,import_extension=none"
// @generated from file github.com/rancher/opni/pkg/plugins/slo/pkg/apis/slo/slo.proto (package slo, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Reference } from "../../../../../apis/core/v1/core_pb";
import { Duration } from "../../../../../../../../../google/protobuf/duration_pb";
import { AttachedEndpoints } from "../../../../../apis/alerting/v1/alerting.endpoint_pb";
import { Timestamp } from "../../../../../../../../../google/protobuf/timestamp_pb";

/**
 * @generated from enum slo.SLOStatusState
 */
export enum SLOStatusState {
  /**
   * @generated from enum value: InProgress = 0;
   */
  InProgress = 0,

  /**
   * @generated from enum value: Creating = 1;
   */
  Creating = 1,

  /**
   * @generated from enum value: NoData = 2;
   */
  NoData = 2,

  /**
   * @generated from enum value: Ok = 3;
   */
  Ok = 3,

  /**
   * @generated from enum value: Warning = 4;
   */
  Warning = 4,

  /**
   * @generated from enum value: Breaching = 5;
   */
  Breaching = 5,

  /**
   * When budgeting or alerting rules have no data, but the rule has data
   *
   * @generated from enum value: PartialDataOk = 6;
   */
  PartialDataOk = 6,

  /**
   * @generated from enum value: InternalError = 7;
   */
  InternalError = 7,
}
// Retrieve enum metadata with: proto3.getEnumType(SLOStatusState)
proto3.util.setEnumType(SLOStatusState, "slo.SLOStatusState", [
  { no: 0, name: "InProgress" },
  { no: 1, name: "Creating" },
  { no: 2, name: "NoData" },
  { no: 3, name: "Ok" },
  { no: 4, name: "Warning" },
  { no: 5, name: "Breaching" },
  { no: 6, name: "PartialDataOk" },
  { no: 7, name: "InternalError" },
]);

/**
 * @generated from message slo.MultiClusterSLO
 */
export class MultiClusterSLO extends Message<MultiClusterSLO> {
  /**
   * @generated from field: core.Reference cloneId = 1;
   */
  cloneId?: Reference;

  /**
   * @generated from field: repeated core.Reference clusters = 2;
   */
  clusters: Reference[] = [];

  constructor(data?: PartialMessage<MultiClusterSLO>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "slo.MultiClusterSLO";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cloneId", kind: "message", T: Reference },
    { no: 2, name: "clusters", kind: "message", T: Reference, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultiClusterSLO {
    return new MultiClusterSLO().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultiClusterSLO {
    return new MultiClusterSLO().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultiClusterSLO {
    return new MultiClusterSLO().fromJsonString(jsonString, options);
  }

  static equals(a: MultiClusterSLO | PlainMessage<MultiClusterSLO> | undefined, b: MultiClusterSLO | PlainMessage<MultiClusterSLO> | undefined): boolean {
    return proto3.util.equals(MultiClusterSLO, a, b);
  }
}

/**
 * @generated from message slo.MultiClusterFailures
 */
export class MultiClusterFailures extends Message<MultiClusterFailures> {
  /**
   * @generated from field: repeated string failures = 1;
   */
  failures: string[] = [];

  constructor(data?: PartialMessage<MultiClusterFailures>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "slo.MultiClusterFailures";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "failures", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultiClusterFailures {
    return new MultiClusterFailures().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultiClusterFailures {
    return new MultiClusterFailures().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultiClusterFailures {
    return new MultiClusterFailures().fromJsonString(jsonString, options);
  }

  static equals(a: MultiClusterFailures | PlainMessage<MultiClusterFailures> | undefined, b: MultiClusterFailures | PlainMessage<MultiClusterFailures> | undefined): boolean {
    return proto3.util.equals(MultiClusterFailures, a, b);
  }
}

/**
 * @generated from message slo.ListEventsRequest
 */
export class ListEventsRequest extends Message<ListEventsRequest> {
  /**
   * @generated from field: string datasource = 1;
   */
  datasource = "";

  /**
   * @generated from field: string serviceId = 2;
   */
  serviceId = "";

  /**
   * @generated from field: string clusterId = 3;
   */
  clusterId = "";

  /**
   * @generated from field: string metricId = 4;
   */
  metricId = "";

  constructor(data?: PartialMessage<ListEventsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "slo.ListEventsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "datasource", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "serviceId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "clusterId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "metricId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListEventsRequest {
    return new ListEventsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListEventsRequest {
    return new ListEventsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListEventsRequest {
    return new ListEventsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListEventsRequest | PlainMessage<ListEventsRequest> | undefined, b: ListEventsRequest | PlainMessage<ListEventsRequest> | undefined): boolean {
    return proto3.util.equals(ListEventsRequest, a, b);
  }
}

/**
 * @generated from message slo.ListMetricsRequest
 */
export class ListMetricsRequest extends Message<ListMetricsRequest> {
  /**
   * @generated from field: string datasource = 1;
   */
  datasource = "";

  /**
   * @generated from field: string clusterId = 2;
   */
  clusterId = "";

  /**
   * @generated from field: string serviceId = 3;
   */
  serviceId = "";

  constructor(data?: PartialMessage<ListMetricsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "slo.ListMetricsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "datasource", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "clusterId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "serviceId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListMetricsRequest {
    return new ListMetricsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListMetricsRequest {
    return new ListMetricsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListMetricsRequest {
    return new ListMetricsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListMetricsRequest | PlainMessage<ListMetricsRequest> | undefined, b: ListMetricsRequest | PlainMessage<ListMetricsRequest> | undefined): boolean {
    return proto3.util.equals(ListMetricsRequest, a, b);
  }
}

/**
 * @generated from message slo.ListServicesRequest
 */
export class ListServicesRequest extends Message<ListServicesRequest> {
  /**
   * @generated from field: string datasource = 1;
   */
  datasource = "";

  /**
   * @generated from field: string clusterId = 2;
   */
  clusterId = "";

  constructor(data?: PartialMessage<ListServicesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "slo.ListServicesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "datasource", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "clusterId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListServicesRequest {
    return new ListServicesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListServicesRequest {
    return new ListServicesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListServicesRequest {
    return new ListServicesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListServicesRequest | PlainMessage<ListServicesRequest> | undefined, b: ListServicesRequest | PlainMessage<ListServicesRequest> | undefined): boolean {
    return proto3.util.equals(ListServicesRequest, a, b);
  }
}

/**
 * @generated from message slo.EventList
 */
export class EventList extends Message<EventList> {
  /**
   * @generated from field: repeated slo.Event items = 1;
   */
  items: Event[] = [];

  constructor(data?: PartialMessage<EventList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "slo.EventList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "items", kind: "message", T: Event, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventList {
    return new EventList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventList {
    return new EventList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventList {
    return new EventList().fromJsonString(jsonString, options);
  }

  static equals(a: EventList | PlainMessage<EventList> | undefined, b: EventList | PlainMessage<EventList> | undefined): boolean {
    return proto3.util.equals(EventList, a, b);
  }
}

/**
 * @generated from message slo.Event
 */
export class Event extends Message<Event> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  /**
   * @generated from field: repeated string vals = 2;
   */
  vals: string[] = [];

  constructor(data?: PartialMessage<Event>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "slo.Event";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "vals", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Event {
    return new Event().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Event {
    return new Event().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Event {
    return new Event().fromJsonString(jsonString, options);
  }

  static equals(a: Event | PlainMessage<Event> | undefined, b: Event | PlainMessage<Event> | undefined): boolean {
    return proto3.util.equals(Event, a, b);
  }
}

/**
 * @generated from message slo.ServiceInfo
 */
export class ServiceInfo extends Message<ServiceInfo> {
  /**
   * @generated from field: string jobId = 1;
   */
  jobId = "";

  /**
   * @generated from field: string clusterId = 5;
   */
  clusterId = "";

  /**
   * @generated from field: string metricName = 2;
   */
  metricName = "";

  /**
   * @generated from field: string metricIdGood = 3;
   */
  metricIdGood = "";

  /**
   * @generated from field: string metricIdTotal = 4;
   */
  metricIdTotal = "";

  constructor(data?: PartialMessage<ServiceInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "slo.ServiceInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "jobId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "clusterId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metricName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "metricIdGood", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "metricIdTotal", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServiceInfo {
    return new ServiceInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServiceInfo {
    return new ServiceInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServiceInfo {
    return new ServiceInfo().fromJsonString(jsonString, options);
  }

  static equals(a: ServiceInfo | PlainMessage<ServiceInfo> | undefined, b: ServiceInfo | PlainMessage<ServiceInfo> | undefined): boolean {
    return proto3.util.equals(ServiceInfo, a, b);
  }
}

/**
 * @generated from message slo.Service
 */
export class Service extends Message<Service> {
  /**
   * @generated from field: string serviceId = 1;
   */
  serviceId = "";

  /**
   * @generated from field: string clusterId = 2;
   */
  clusterId = "";

  constructor(data?: PartialMessage<Service>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "slo.Service";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "serviceId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "clusterId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Service {
    return new Service().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Service {
    return new Service().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Service {
    return new Service().fromJsonString(jsonString, options);
  }

  static equals(a: Service | PlainMessage<Service> | undefined, b: Service | PlainMessage<Service> | undefined): boolean {
    return proto3.util.equals(Service, a, b);
  }
}

/**
 * @generated from message slo.ServiceList
 */
export class ServiceList extends Message<ServiceList> {
  /**
   * @generated from field: repeated slo.Service items = 1;
   */
  items: Service[] = [];

  constructor(data?: PartialMessage<ServiceList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "slo.ServiceList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "items", kind: "message", T: Service, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServiceList {
    return new ServiceList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServiceList {
    return new ServiceList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServiceList {
    return new ServiceList().fromJsonString(jsonString, options);
  }

  static equals(a: ServiceList | PlainMessage<ServiceList> | undefined, b: ServiceList | PlainMessage<ServiceList> | undefined): boolean {
    return proto3.util.equals(ServiceList, a, b);
  }
}

/**
 * @generated from message slo.Label
 */
export class Label extends Message<Label> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<Label>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "slo.Label";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Label {
    return new Label().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Label {
    return new Label().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Label {
    return new Label().fromJsonString(jsonString, options);
  }

  static equals(a: Label | PlainMessage<Label> | undefined, b: Label | PlainMessage<Label> | undefined): boolean {
    return proto3.util.equals(Label, a, b);
  }
}

/**
 * @generated from message slo.Alert
 */
export class Alert extends Message<Alert> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * enum of Slack, PagerDuty, Email, SMS, etc..
   *
   * @generated from field: string notificationTarget = 2;
   */
  notificationTarget = "";

  /**
   * @generated from field: string notificationDescription = 3;
   */
  notificationDescription = "";

  /**
   * @generated from field: string description = 4;
   */
  description = "";

  /**
   * @generated from field: string conditionType = 5;
   */
  conditionType = "";

  /**
   * @generated from field: string thresholdType = 6;
   */
  thresholdType = "";

  /**
   * @generated from field: bool onNoData = 7;
   */
  onNoData = false;

  /**
   * @generated from field: bool onCreate = 8;
   */
  onCreate = false;

  /**
   * @generated from field: bool onBreach = 9;
   */
  onBreach = false;

  /**
   * @generated from field: bool onResolved = 10;
   */
  onResolved = false;

  constructor(data?: PartialMessage<Alert>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "slo.Alert";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "notificationTarget", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "notificationDescription", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "conditionType", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "thresholdType", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "onNoData", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "onCreate", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "onBreach", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 10, name: "onResolved", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Alert {
    return new Alert().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Alert {
    return new Alert().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Alert {
    return new Alert().fromJsonString(jsonString, options);
  }

  static equals(a: Alert | PlainMessage<Alert> | undefined, b: Alert | PlainMessage<Alert> | undefined): boolean {
    return proto3.util.equals(Alert, a, b);
  }
}

/**
 * @generated from message slo.ServiceLevelObjective
 */
export class ServiceLevelObjective extends Message<ServiceLevelObjective> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string datasource = 2;
   */
  datasource = "";

  /**
   * @generated from field: string clusterId = 3;
   */
  clusterId = "";

  /**
   * @generated from field: string serviceId = 4;
   */
  serviceId = "";

  /**
   * @generated from field: string goodMetricName = 5;
   */
  goodMetricName = "";

  /**
   * @generated from field: string totalMetricName = 6;
   */
  totalMetricName = "";

  /**
   * @generated from field: repeated slo.Event goodEvents = 7;
   */
  goodEvents: Event[] = [];

  /**
   * @generated from field: repeated slo.Event totalEvents = 8;
   */
  totalEvents: Event[] = [];

  /**
   * 7d, 28d or 30d
   *
   * @generated from field: string sloPeriod = 9;
   */
  sloPeriod = "";

  /**
   * budgeting interval should be between 1m and 60m
   *
   * @generated from field: google.protobuf.Duration budgetingInterval = 10;
   */
  budgetingInterval?: Duration;

  /**
   * @generated from field: slo.Target target = 11;
   */
  target?: Target;

  /**
   * @generated from field: repeated slo.Label labels = 12;
   */
  labels: Label[] = [];

  /**
   * @generated from field: alerting.AttachedEndpoints attachedEndpoints = 13;
   */
  attachedEndpoints?: AttachedEndpoints;

  constructor(data?: PartialMessage<ServiceLevelObjective>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "slo.ServiceLevelObjective";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "datasource", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "clusterId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "serviceId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "goodMetricName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "totalMetricName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "goodEvents", kind: "message", T: Event, repeated: true },
    { no: 8, name: "totalEvents", kind: "message", T: Event, repeated: true },
    { no: 9, name: "sloPeriod", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "budgetingInterval", kind: "message", T: Duration },
    { no: 11, name: "target", kind: "message", T: Target },
    { no: 12, name: "labels", kind: "message", T: Label, repeated: true },
    { no: 13, name: "attachedEndpoints", kind: "message", T: AttachedEndpoints },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServiceLevelObjective {
    return new ServiceLevelObjective().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServiceLevelObjective {
    return new ServiceLevelObjective().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServiceLevelObjective {
    return new ServiceLevelObjective().fromJsonString(jsonString, options);
  }

  static equals(a: ServiceLevelObjective | PlainMessage<ServiceLevelObjective> | undefined, b: ServiceLevelObjective | PlainMessage<ServiceLevelObjective> | undefined): boolean {
    return proto3.util.equals(ServiceLevelObjective, a, b);
  }
}

/**
 * @generated from message slo.CreateSLORequest
 */
export class CreateSLORequest extends Message<CreateSLORequest> {
  /**
   * @generated from field: slo.ServiceLevelObjective slo = 1;
   */
  slo?: ServiceLevelObjective;

  constructor(data?: PartialMessage<CreateSLORequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "slo.CreateSLORequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "slo", kind: "message", T: ServiceLevelObjective },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateSLORequest {
    return new CreateSLORequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateSLORequest {
    return new CreateSLORequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateSLORequest {
    return new CreateSLORequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateSLORequest | PlainMessage<CreateSLORequest> | undefined, b: CreateSLORequest | PlainMessage<CreateSLORequest> | undefined): boolean {
    return proto3.util.equals(CreateSLORequest, a, b);
  }
}

/**
 * @generated from message slo.EventPairList
 */
export class EventPairList extends Message<EventPairList> {
  /**
   * @generated from field: repeated slo.EventPair items = 1;
   */
  items: EventPair[] = [];

  constructor(data?: PartialMessage<EventPairList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "slo.EventPairList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "items", kind: "message", T: EventPair, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventPairList {
    return new EventPairList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventPairList {
    return new EventPairList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventPairList {
    return new EventPairList().fromJsonString(jsonString, options);
  }

  static equals(a: EventPairList | PlainMessage<EventPairList> | undefined, b: EventPairList | PlainMessage<EventPairList> | undefined): boolean {
    return proto3.util.equals(EventPairList, a, b);
  }
}

/**
 * @generated from message slo.EventPair
 */
export class EventPair extends Message<EventPair> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  /**
   * @generated from field: repeated string vals = 2;
   */
  vals: string[] = [];

  constructor(data?: PartialMessage<EventPair>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "slo.EventPair";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "vals", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventPair {
    return new EventPair().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventPair {
    return new EventPair().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventPair {
    return new EventPair().fromJsonString(jsonString, options);
  }

  static equals(a: EventPair | PlainMessage<EventPair> | undefined, b: EventPair | PlainMessage<EventPair> | undefined): boolean {
    return proto3.util.equals(EventPair, a, b);
  }
}

/**
 * @generated from message slo.SLOData
 */
export class SLOData extends Message<SLOData> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: slo.ServiceLevelObjective SLO = 2;
   */
  SLO?: ServiceLevelObjective;

  /**
   * @generated from field: google.protobuf.Timestamp createdAt = 3;
   */
  createdAt?: Timestamp;

  constructor(data?: PartialMessage<SLOData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "slo.SLOData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "SLO", kind: "message", T: ServiceLevelObjective },
    { no: 3, name: "createdAt", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SLOData {
    return new SLOData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SLOData {
    return new SLOData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SLOData {
    return new SLOData().fromJsonString(jsonString, options);
  }

  static equals(a: SLOData | PlainMessage<SLOData> | undefined, b: SLOData | PlainMessage<SLOData> | undefined): boolean {
    return proto3.util.equals(SLOData, a, b);
  }
}

/**
 * @generated from message slo.Target
 */
export class Target extends Message<Target> {
  /**
   * @generated from field: double value = 1;
   */
  value = 0;

  constructor(data?: PartialMessage<Target>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "slo.Target";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Target {
    return new Target().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Target {
    return new Target().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Target {
    return new Target().fromJsonString(jsonString, options);
  }

  static equals(a: Target | PlainMessage<Target> | undefined, b: Target | PlainMessage<Target> | undefined): boolean {
    return proto3.util.equals(Target, a, b);
  }
}

/**
 * @generated from message slo.Metric
 */
export class Metric extends Message<Metric> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: slo.MetricMetadata metadata = 2;
   */
  metadata?: MetricMetadata;

  constructor(data?: PartialMessage<Metric>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "slo.Metric";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metadata", kind: "message", T: MetricMetadata },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Metric {
    return new Metric().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Metric {
    return new Metric().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Metric {
    return new Metric().fromJsonString(jsonString, options);
  }

  static equals(a: Metric | PlainMessage<Metric> | undefined, b: Metric | PlainMessage<Metric> | undefined): boolean {
    return proto3.util.equals(Metric, a, b);
  }
}

/**
 * @generated from message slo.MetricMetadata
 */
export class MetricMetadata extends Message<MetricMetadata> {
  /**
   * @generated from field: string description = 1;
   */
  description = "";

  /**
   * @generated from field: string type = 2;
   */
  type = "";

  /**
   * @generated from field: string unit = 3;
   */
  unit = "";

  constructor(data?: PartialMessage<MetricMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "slo.MetricMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "unit", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetricMetadata {
    return new MetricMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetricMetadata {
    return new MetricMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetricMetadata {
    return new MetricMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: MetricMetadata | PlainMessage<MetricMetadata> | undefined, b: MetricMetadata | PlainMessage<MetricMetadata> | undefined): boolean {
    return proto3.util.equals(MetricMetadata, a, b);
  }
}

/**
 * @generated from message slo.MetricList
 */
export class MetricList extends Message<MetricList> {
  /**
   * @generated from field: repeated slo.Metric items = 1;
   */
  items: Metric[] = [];

  constructor(data?: PartialMessage<MetricList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "slo.MetricList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "items", kind: "message", T: Metric, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetricList {
    return new MetricList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetricList {
    return new MetricList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetricList {
    return new MetricList().fromJsonString(jsonString, options);
  }

  static equals(a: MetricList | PlainMessage<MetricList> | undefined, b: MetricList | PlainMessage<MetricList> | undefined): boolean {
    return proto3.util.equals(MetricList, a, b);
  }
}

/**
 * @generated from message slo.MetricGroupList
 */
export class MetricGroupList extends Message<MetricGroupList> {
  /**
   * @generated from field: map<string, slo.MetricList> groupNameToMetrics = 1;
   */
  groupNameToMetrics: { [key: string]: MetricList } = {};

  constructor(data?: PartialMessage<MetricGroupList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "slo.MetricGroupList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "groupNameToMetrics", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: MetricList} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetricGroupList {
    return new MetricGroupList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetricGroupList {
    return new MetricGroupList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetricGroupList {
    return new MetricGroupList().fromJsonString(jsonString, options);
  }

  static equals(a: MetricGroupList | PlainMessage<MetricGroupList> | undefined, b: MetricGroupList | PlainMessage<MetricGroupList> | undefined): boolean {
    return proto3.util.equals(MetricGroupList, a, b);
  }
}

/**
 * @generated from message slo.ServiceLevelObjectiveList
 */
export class ServiceLevelObjectiveList extends Message<ServiceLevelObjectiveList> {
  /**
   * @generated from field: repeated slo.SLOData items = 1;
   */
  items: SLOData[] = [];

  constructor(data?: PartialMessage<ServiceLevelObjectiveList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "slo.ServiceLevelObjectiveList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "items", kind: "message", T: SLOData, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServiceLevelObjectiveList {
    return new ServiceLevelObjectiveList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServiceLevelObjectiveList {
    return new ServiceLevelObjectiveList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServiceLevelObjectiveList {
    return new ServiceLevelObjectiveList().fromJsonString(jsonString, options);
  }

  static equals(a: ServiceLevelObjectiveList | PlainMessage<ServiceLevelObjectiveList> | undefined, b: ServiceLevelObjectiveList | PlainMessage<ServiceLevelObjectiveList> | undefined): boolean {
    return proto3.util.equals(ServiceLevelObjectiveList, a, b);
  }
}

/**
 * @generated from message slo.SLOStatus
 */
export class SLOStatus extends Message<SLOStatus> {
  /**
   * @generated from field: slo.SLOStatusState state = 1;
   */
  state = SLOStatusState.InProgress;

  constructor(data?: PartialMessage<SLOStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "slo.SLOStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "state", kind: "enum", T: proto3.getEnumType(SLOStatusState) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SLOStatus {
    return new SLOStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SLOStatus {
    return new SLOStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SLOStatus {
    return new SLOStatus().fromJsonString(jsonString, options);
  }

  static equals(a: SLOStatus | PlainMessage<SLOStatus> | undefined, b: SLOStatus | PlainMessage<SLOStatus> | undefined): boolean {
    return proto3.util.equals(SLOStatus, a, b);
  }
}

/**
 * @generated from message slo.SLOPreviewResponse
 */
export class SLOPreviewResponse extends Message<SLOPreviewResponse> {
  /**
   * @generated from field: slo.PlotVector plotVector = 1;
   */
  plotVector?: PlotVector;

  constructor(data?: PartialMessage<SLOPreviewResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "slo.SLOPreviewResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "plotVector", kind: "message", T: PlotVector },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SLOPreviewResponse {
    return new SLOPreviewResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SLOPreviewResponse {
    return new SLOPreviewResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SLOPreviewResponse {
    return new SLOPreviewResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SLOPreviewResponse | PlainMessage<SLOPreviewResponse> | undefined, b: SLOPreviewResponse | PlainMessage<SLOPreviewResponse> | undefined): boolean {
    return proto3.util.equals(SLOPreviewResponse, a, b);
  }
}

/**
 * @generated from message slo.PlotVector
 */
export class PlotVector extends Message<PlotVector> {
  /**
   * @generated from field: double objective = 1;
   */
  objective = 0;

  /**
   * @generated from field: repeated slo.DataPoint items = 2;
   */
  items: DataPoint[] = [];

  /**
   * @generated from field: repeated slo.AlertFiringWindows windows = 3;
   */
  windows: AlertFiringWindows[] = [];

  constructor(data?: PartialMessage<PlotVector>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "slo.PlotVector";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "objective", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 2, name: "items", kind: "message", T: DataPoint, repeated: true },
    { no: 3, name: "windows", kind: "message", T: AlertFiringWindows, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PlotVector {
    return new PlotVector().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PlotVector {
    return new PlotVector().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PlotVector {
    return new PlotVector().fromJsonString(jsonString, options);
  }

  static equals(a: PlotVector | PlainMessage<PlotVector> | undefined, b: PlotVector | PlainMessage<PlotVector> | undefined): boolean {
    return proto3.util.equals(PlotVector, a, b);
  }
}

/**
 * @generated from message slo.DataPoint
 */
export class DataPoint extends Message<DataPoint> {
  /**
   * @generated from field: double sli = 1;
   */
  sli = 0;

  /**
   * @generated from field: google.protobuf.Timestamp timestamp = 2;
   */
  timestamp?: Timestamp;

  constructor(data?: PartialMessage<DataPoint>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "slo.DataPoint";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sli", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 2, name: "timestamp", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DataPoint {
    return new DataPoint().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DataPoint {
    return new DataPoint().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DataPoint {
    return new DataPoint().fromJsonString(jsonString, options);
  }

  static equals(a: DataPoint | PlainMessage<DataPoint> | undefined, b: DataPoint | PlainMessage<DataPoint> | undefined): boolean {
    return proto3.util.equals(DataPoint, a, b);
  }
}

/**
 * @generated from message slo.AlertFiringWindows
 */
export class AlertFiringWindows extends Message<AlertFiringWindows> {
  /**
   * @generated from field: google.protobuf.Timestamp start = 1;
   */
  start?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp end = 2;
   */
  end?: Timestamp;

  /**
   * @generated from field: string severity = 3;
   */
  severity = "";

  constructor(data?: PartialMessage<AlertFiringWindows>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "slo.AlertFiringWindows";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "start", kind: "message", T: Timestamp },
    { no: 2, name: "end", kind: "message", T: Timestamp },
    { no: 3, name: "severity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AlertFiringWindows {
    return new AlertFiringWindows().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AlertFiringWindows {
    return new AlertFiringWindows().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AlertFiringWindows {
    return new AlertFiringWindows().fromJsonString(jsonString, options);
  }

  static equals(a: AlertFiringWindows | PlainMessage<AlertFiringWindows> | undefined, b: AlertFiringWindows | PlainMessage<AlertFiringWindows> | undefined): boolean {
    return proto3.util.equals(AlertFiringWindows, a, b);
  }
}

/**
 * @generated from message slo.ListServiceRequest
 */
export class ListServiceRequest extends Message<ListServiceRequest> {
  /**
   * @generated from field: string datasource = 1;
   */
  datasource = "";

  constructor(data?: PartialMessage<ListServiceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "slo.ListServiceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "datasource", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListServiceRequest {
    return new ListServiceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListServiceRequest {
    return new ListServiceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListServiceRequest {
    return new ListServiceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListServiceRequest | PlainMessage<ListServiceRequest> | undefined, b: ListServiceRequest | PlainMessage<ListServiceRequest> | undefined): boolean {
    return proto3.util.equals(ListServiceRequest, a, b);
  }
}

