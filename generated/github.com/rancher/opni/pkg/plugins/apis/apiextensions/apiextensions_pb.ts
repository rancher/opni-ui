// @generated by protoc-gen-es v1.2.1 with parameter "target=ts,import_extension=none"
// @generated from file github.com/rancher/opni/pkg/plugins/apis/apiextensions/apiextensions.proto (package apiextensions, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { ServiceDescriptorProto } from "../../../../../../../google/protobuf/descriptor_pb";

/**
 * @generated from message apiextensions.CertConfig
 */
export class CertConfig extends Message<CertConfig> {
  /**
   * @generated from field: string ca = 1;
   */
  ca = "";

  /**
   * @generated from field: bytes caData = 2;
   */
  caData = new Uint8Array(0);

  /**
   * @generated from field: string cert = 3;
   */
  cert = "";

  /**
   * @generated from field: bytes certData = 4;
   */
  certData = new Uint8Array(0);

  /**
   * @generated from field: string key = 5;
   */
  key = "";

  /**
   * @generated from field: bytes keyData = 6;
   */
  keyData = new Uint8Array(0);

  /**
   * @generated from field: bool insecure = 7;
   */
  insecure = false;

  constructor(data?: PartialMessage<CertConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "apiextensions.CertConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ca", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "caData", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "cert", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "certData", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 5, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "keyData", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 7, name: "insecure", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CertConfig {
    return new CertConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CertConfig {
    return new CertConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CertConfig {
    return new CertConfig().fromJsonString(jsonString, options);
  }

  static equals(a: CertConfig | PlainMessage<CertConfig> | undefined, b: CertConfig | PlainMessage<CertConfig> | undefined): boolean {
    return proto3.util.equals(CertConfig, a, b);
  }
}

/**
 * @generated from message apiextensions.HTTPAPIExtensionConfig
 */
export class HTTPAPIExtensionConfig extends Message<HTTPAPIExtensionConfig> {
  /**
   * @generated from field: string httpAddr = 1;
   */
  httpAddr = "";

  /**
   * @generated from field: repeated apiextensions.RouteInfo routes = 2;
   */
  routes: RouteInfo[] = [];

  constructor(data?: PartialMessage<HTTPAPIExtensionConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "apiextensions.HTTPAPIExtensionConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "httpAddr", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "routes", kind: "message", T: RouteInfo, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HTTPAPIExtensionConfig {
    return new HTTPAPIExtensionConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HTTPAPIExtensionConfig {
    return new HTTPAPIExtensionConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HTTPAPIExtensionConfig {
    return new HTTPAPIExtensionConfig().fromJsonString(jsonString, options);
  }

  static equals(a: HTTPAPIExtensionConfig | PlainMessage<HTTPAPIExtensionConfig> | undefined, b: HTTPAPIExtensionConfig | PlainMessage<HTTPAPIExtensionConfig> | undefined): boolean {
    return proto3.util.equals(HTTPAPIExtensionConfig, a, b);
  }
}

/**
 * @generated from message apiextensions.ServiceDescriptor
 */
export class ServiceDescriptor extends Message<ServiceDescriptor> {
  /**
   * @generated from field: google.protobuf.ServiceDescriptorProto serviceDescriptor = 1;
   */
  serviceDescriptor?: ServiceDescriptorProto;

  /**
   * @generated from field: apiextensions.ServiceOptions options = 2;
   */
  options?: ServiceOptions;

  constructor(data?: PartialMessage<ServiceDescriptor>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "apiextensions.ServiceDescriptor";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "serviceDescriptor", kind: "message", T: ServiceDescriptorProto },
    { no: 2, name: "options", kind: "message", T: ServiceOptions },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServiceDescriptor {
    return new ServiceDescriptor().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServiceDescriptor {
    return new ServiceDescriptor().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServiceDescriptor {
    return new ServiceDescriptor().fromJsonString(jsonString, options);
  }

  static equals(a: ServiceDescriptor | PlainMessage<ServiceDescriptor> | undefined, b: ServiceDescriptor | PlainMessage<ServiceDescriptor> | undefined): boolean {
    return proto3.util.equals(ServiceDescriptor, a, b);
  }
}

/**
 * @generated from message apiextensions.ServiceOptions
 */
export class ServiceOptions extends Message<ServiceOptions> {
  /**
   * If set, the service will only be available to clusters that have this
   * capability.
   *
   * @generated from field: string requireCapability = 1;
   */
  requireCapability = "";

  constructor(data?: PartialMessage<ServiceOptions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "apiextensions.ServiceOptions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "requireCapability", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServiceOptions {
    return new ServiceOptions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServiceOptions {
    return new ServiceOptions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServiceOptions {
    return new ServiceOptions().fromJsonString(jsonString, options);
  }

  static equals(a: ServiceOptions | PlainMessage<ServiceOptions> | undefined, b: ServiceOptions | PlainMessage<ServiceOptions> | undefined): boolean {
    return proto3.util.equals(ServiceOptions, a, b);
  }
}

/**
 * @generated from message apiextensions.ServiceDescriptorList
 */
export class ServiceDescriptorList extends Message<ServiceDescriptorList> {
  /**
   * @generated from field: repeated apiextensions.ServiceDescriptor items = 2;
   */
  items: ServiceDescriptor[] = [];

  constructor(data?: PartialMessage<ServiceDescriptorList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "apiextensions.ServiceDescriptorList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "items", kind: "message", T: ServiceDescriptor, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServiceDescriptorList {
    return new ServiceDescriptorList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServiceDescriptorList {
    return new ServiceDescriptorList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServiceDescriptorList {
    return new ServiceDescriptorList().fromJsonString(jsonString, options);
  }

  static equals(a: ServiceDescriptorList | PlainMessage<ServiceDescriptorList> | undefined, b: ServiceDescriptorList | PlainMessage<ServiceDescriptorList> | undefined): boolean {
    return proto3.util.equals(ServiceDescriptorList, a, b);
  }
}

/**
 * @generated from message apiextensions.ServiceDescriptorProtoList
 */
export class ServiceDescriptorProtoList extends Message<ServiceDescriptorProtoList> {
  /**
   * @generated from field: repeated google.protobuf.ServiceDescriptorProto items = 1;
   */
  items: ServiceDescriptorProto[] = [];

  constructor(data?: PartialMessage<ServiceDescriptorProtoList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "apiextensions.ServiceDescriptorProtoList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "items", kind: "message", T: ServiceDescriptorProto, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServiceDescriptorProtoList {
    return new ServiceDescriptorProtoList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServiceDescriptorProtoList {
    return new ServiceDescriptorProtoList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServiceDescriptorProtoList {
    return new ServiceDescriptorProtoList().fromJsonString(jsonString, options);
  }

  static equals(a: ServiceDescriptorProtoList | PlainMessage<ServiceDescriptorProtoList> | undefined, b: ServiceDescriptorProtoList | PlainMessage<ServiceDescriptorProtoList> | undefined): boolean {
    return proto3.util.equals(ServiceDescriptorProtoList, a, b);
  }
}

/**
 * @generated from message apiextensions.RouteInfo
 */
export class RouteInfo extends Message<RouteInfo> {
  /**
   * @generated from field: string method = 1;
   */
  method = "";

  /**
   * @generated from field: string path = 2;
   */
  path = "";

  constructor(data?: PartialMessage<RouteInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "apiextensions.RouteInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "method", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RouteInfo {
    return new RouteInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RouteInfo {
    return new RouteInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RouteInfo {
    return new RouteInfo().fromJsonString(jsonString, options);
  }

  static equals(a: RouteInfo | PlainMessage<RouteInfo> | undefined, b: RouteInfo | PlainMessage<RouteInfo> | undefined): boolean {
    return proto3.util.equals(RouteInfo, a, b);
  }
}

