// @generated by protoc-gen-es v1.2.1 with parameter "target=ts,import_extension=none"
// @generated from file github.com/rancher/opni/pkg/apis/control/v1/remote.proto (package control, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum control.PatchOp
 */
export enum PatchOp {
  /**
   * revisions match
   *
   * @generated from enum value: None = 0;
   */
  None = 0,

  /**
   * same plugin exists on both
   *
   * @generated from enum value: Update = 1;
   */
  Update = 1,

  /**
   * missing plugin on agent
   *
   * @generated from enum value: Create = 2;
   */
  Create = 2,

  /**
   * outdated plugin on agent, with no version on the gateway
   *
   * @generated from enum value: Remove = 3;
   */
  Remove = 3,

  /**
   * same plugin contents and module name, but the file name is different
   *
   * @generated from enum value: Rename = 4;
   */
  Rename = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(PatchOp)
proto3.util.setEnumType(PatchOp, "control.PatchOp", [
  { no: 0, name: "None" },
  { no: 1, name: "Update" },
  { no: 2, name: "Create" },
  { no: 3, name: "Remove" },
  { no: 4, name: "Rename" },
]);

/**
 * @generated from message control.SyncResults
 */
export class SyncResults extends Message<SyncResults> {
  /**
   * @generated from field: control.PluginManifest desiredState = 1;
   */
  desiredState?: PluginManifest;

  /**
   * @generated from field: control.PatchList requiredPatches = 2;
   */
  requiredPatches?: PatchList;

  constructor(data?: PartialMessage<SyncResults>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "control.SyncResults";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "desiredState", kind: "message", T: PluginManifest },
    { no: 2, name: "requiredPatches", kind: "message", T: PatchList },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SyncResults {
    return new SyncResults().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SyncResults {
    return new SyncResults().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SyncResults {
    return new SyncResults().fromJsonString(jsonString, options);
  }

  static equals(a: SyncResults | PlainMessage<SyncResults> | undefined, b: SyncResults | PlainMessage<SyncResults> | undefined): boolean {
    return proto3.util.equals(SyncResults, a, b);
  }
}

/**
 * @generated from message control.PluginManifestEntry
 */
export class PluginManifestEntry extends Message<PluginManifestEntry> {
  /**
   * @generated from field: string module = 1;
   */
  module = "";

  /**
   * @generated from field: string filename = 2;
   */
  filename = "";

  /**
   * @generated from field: string digest = 3;
   */
  digest = "";

  constructor(data?: PartialMessage<PluginManifestEntry>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "control.PluginManifestEntry";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "module", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "filename", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "digest", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PluginManifestEntry {
    return new PluginManifestEntry().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PluginManifestEntry {
    return new PluginManifestEntry().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PluginManifestEntry {
    return new PluginManifestEntry().fromJsonString(jsonString, options);
  }

  static equals(a: PluginManifestEntry | PlainMessage<PluginManifestEntry> | undefined, b: PluginManifestEntry | PlainMessage<PluginManifestEntry> | undefined): boolean {
    return proto3.util.equals(PluginManifestEntry, a, b);
  }
}

/**
 * @generated from message control.PluginManifest
 */
export class PluginManifest extends Message<PluginManifest> {
  /**
   * @generated from field: repeated control.PluginManifestEntry items = 1;
   */
  items: PluginManifestEntry[] = [];

  constructor(data?: PartialMessage<PluginManifest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "control.PluginManifest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "items", kind: "message", T: PluginManifestEntry, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PluginManifest {
    return new PluginManifest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PluginManifest {
    return new PluginManifest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PluginManifest {
    return new PluginManifest().fromJsonString(jsonString, options);
  }

  static equals(a: PluginManifest | PlainMessage<PluginManifest> | undefined, b: PluginManifest | PlainMessage<PluginManifest> | undefined): boolean {
    return proto3.util.equals(PluginManifest, a, b);
  }
}

/**
 * @generated from message control.PluginArchiveEntry
 */
export class PluginArchiveEntry extends Message<PluginArchiveEntry> {
  /**
   * @generated from field: control.PluginManifestEntry metadata = 1;
   */
  metadata?: PluginManifestEntry;

  /**
   * @generated from field: bytes data = 2;
   */
  data = new Uint8Array(0);

  constructor(data?: PartialMessage<PluginArchiveEntry>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "control.PluginArchiveEntry";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: PluginManifestEntry },
    { no: 2, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PluginArchiveEntry {
    return new PluginArchiveEntry().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PluginArchiveEntry {
    return new PluginArchiveEntry().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PluginArchiveEntry {
    return new PluginArchiveEntry().fromJsonString(jsonString, options);
  }

  static equals(a: PluginArchiveEntry | PlainMessage<PluginArchiveEntry> | undefined, b: PluginArchiveEntry | PlainMessage<PluginArchiveEntry> | undefined): boolean {
    return proto3.util.equals(PluginArchiveEntry, a, b);
  }
}

/**
 * @generated from message control.PluginArchive
 */
export class PluginArchive extends Message<PluginArchive> {
  /**
   * @generated from field: repeated control.PluginArchiveEntry items = 1;
   */
  items: PluginArchiveEntry[] = [];

  constructor(data?: PartialMessage<PluginArchive>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "control.PluginArchive";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "items", kind: "message", T: PluginArchiveEntry, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PluginArchive {
    return new PluginArchive().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PluginArchive {
    return new PluginArchive().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PluginArchive {
    return new PluginArchive().fromJsonString(jsonString, options);
  }

  static equals(a: PluginArchive | PlainMessage<PluginArchive> | undefined, b: PluginArchive | PlainMessage<PluginArchive> | undefined): boolean {
    return proto3.util.equals(PluginArchive, a, b);
  }
}

/**
 * opPath should be empty when op == PatchRename
 * bytes should be empty when op == PatchRemove
 *
 * @generated from message control.PatchSpec
 */
export class PatchSpec extends Message<PatchSpec> {
  /**
   * @generated from field: string module = 1;
   */
  module = "";

  /**
   * @generated from field: control.PatchOp op = 2;
   */
  op = PatchOp.None;

  /**
   * @generated from field: bytes data = 3;
   */
  data = new Uint8Array(0);

  /**
   * @generated from field: string filename = 4;
   */
  filename = "";

  /**
   * @generated from field: string oldDigest = 5;
   */
  oldDigest = "";

  /**
   * @generated from field: string newDigest = 6;
   */
  newDigest = "";

  constructor(data?: PartialMessage<PatchSpec>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "control.PatchSpec";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "module", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "op", kind: "enum", T: proto3.getEnumType(PatchOp) },
    { no: 3, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "filename", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "oldDigest", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "newDigest", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PatchSpec {
    return new PatchSpec().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PatchSpec {
    return new PatchSpec().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PatchSpec {
    return new PatchSpec().fromJsonString(jsonString, options);
  }

  static equals(a: PatchSpec | PlainMessage<PatchSpec> | undefined, b: PatchSpec | PlainMessage<PatchSpec> | undefined): boolean {
    return proto3.util.equals(PatchSpec, a, b);
  }
}

/**
 * @generated from message control.PatchList
 */
export class PatchList extends Message<PatchList> {
  /**
   * @generated from field: repeated control.PatchSpec items = 1;
   */
  items: PatchSpec[] = [];

  constructor(data?: PartialMessage<PatchList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "control.PatchList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "items", kind: "message", T: PatchSpec, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PatchList {
    return new PatchList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PatchList {
    return new PatchList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PatchList {
    return new PatchList().fromJsonString(jsonString, options);
  }

  static equals(a: PatchList | PlainMessage<PatchList> | undefined, b: PatchList | PlainMessage<PatchList> | undefined): boolean {
    return proto3.util.equals(PatchList, a, b);
  }
}

