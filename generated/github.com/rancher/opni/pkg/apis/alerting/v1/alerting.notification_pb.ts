// @generated by protoc-gen-es v1.2.1 with parameter "target=ts,import_extension=none"
// @generated from file github.com/rancher/opni/pkg/apis/alerting/v1/alerting.notification.proto (package alerting, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Timestamp } from "../../../../../../../google/protobuf/timestamp_pb";
import { GoldenSignal, OpniSeverity } from "./alerting_pb";
import { Reference, ReferenceList } from "../../core/v1/core_pb";

/**
 * @generated from message alerting.ListAlarmMessageRequest
 */
export class ListAlarmMessageRequest extends Message<ListAlarmMessageRequest> {
  /**
   * defaults to 100 most severe (frequency + severity heuristic)
   *
   * @generated from field: string conditionId = 1;
   */
  conditionId = "";

  /**
   * @generated from field: repeated string fingerprints = 2;
   */
  fingerprints: string[] = [];

  /**
   * @generated from field: google.protobuf.Timestamp start = 3;
   */
  start?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp end = 4;
   */
  end?: Timestamp;

  constructor(data?: PartialMessage<ListAlarmMessageRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.ListAlarmMessageRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "conditionId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "fingerprints", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "start", kind: "message", T: Timestamp },
    { no: 4, name: "end", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAlarmMessageRequest {
    return new ListAlarmMessageRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAlarmMessageRequest {
    return new ListAlarmMessageRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAlarmMessageRequest {
    return new ListAlarmMessageRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListAlarmMessageRequest | PlainMessage<ListAlarmMessageRequest> | undefined, b: ListAlarmMessageRequest | PlainMessage<ListAlarmMessageRequest> | undefined): boolean {
    return proto3.util.equals(ListAlarmMessageRequest, a, b);
  }
}

/**
 * @generated from message alerting.ListNotificationRequest
 */
export class ListNotificationRequest extends Message<ListNotificationRequest> {
  /**
   * defaults to 100 most severe (frequency + severity heuristic)
   *
   * @generated from field: optional int32 limit = 1;
   */
  limit?: number;

  /**
   * @generated from field: repeated alerting.OpniSeverity severityFilters = 2;
   */
  severityFilters: OpniSeverity[] = [];

  /**
   * @generated from field: repeated alerting.GoldenSignal goldenSignalFilters = 3;
   */
  goldenSignalFilters: GoldenSignal[] = [];

  constructor(data?: PartialMessage<ListNotificationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.ListNotificationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 2, name: "severityFilters", kind: "enum", T: proto3.getEnumType(OpniSeverity), repeated: true },
    { no: 3, name: "goldenSignalFilters", kind: "enum", T: proto3.getEnumType(GoldenSignal), repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListNotificationRequest {
    return new ListNotificationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListNotificationRequest {
    return new ListNotificationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListNotificationRequest {
    return new ListNotificationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListNotificationRequest | PlainMessage<ListNotificationRequest> | undefined, b: ListNotificationRequest | PlainMessage<ListNotificationRequest> | undefined): boolean {
    return proto3.util.equals(ListNotificationRequest, a, b);
  }
}

/**
 * @generated from message alerting.ListMessageResponse
 */
export class ListMessageResponse extends Message<ListMessageResponse> {
  /**
   * @generated from field: repeated alerting.MessageInstance items = 1;
   */
  items: MessageInstance[] = [];

  constructor(data?: PartialMessage<ListMessageResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.ListMessageResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "items", kind: "message", T: MessageInstance, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListMessageResponse {
    return new ListMessageResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListMessageResponse {
    return new ListMessageResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListMessageResponse {
    return new ListMessageResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListMessageResponse | PlainMessage<ListMessageResponse> | undefined, b: ListMessageResponse | PlainMessage<ListMessageResponse> | undefined): boolean {
    return proto3.util.equals(ListMessageResponse, a, b);
  }
}

/**
 * @generated from message alerting.Notification
 */
export class Notification extends Message<Notification> {
  /**
   * @generated from field: string title = 1;
   */
  title = "";

  /**
   * @generated from field: string body = 2;
   */
  body = "";

  /**
   * sets notification properties, for example
   * severity, golden signal, dedupe keys, group keys etc...
   *
   * It is recommended to set severity, golden signal, 
   * dedupe keys and group keys 
   *
   * @generated from field: map<string, string> properties = 3;
   */
  properties: { [key: string]: string } = {};

  constructor(data?: PartialMessage<Notification>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.Notification";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "body", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "properties", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Notification {
    return new Notification().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Notification {
    return new Notification().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Notification {
    return new Notification().fromJsonString(jsonString, options);
  }

  static equals(a: Notification | PlainMessage<Notification> | undefined, b: Notification | PlainMessage<Notification> | undefined): boolean {
    return proto3.util.equals(Notification, a, b);
  }
}

/**
 * @generated from message alerting.MessageInstance
 */
export class MessageInstance extends Message<MessageInstance> {
  /**
   * @generated from field: google.protobuf.Timestamp receivedAt = 1;
   */
  receivedAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp lastUpdatedAt = 2;
   */
  lastUpdatedAt?: Timestamp;

  /**
   * @generated from field: alerting.Notification notification = 3;
   */
  notification?: Notification;

  /**
   * @generated from field: map<string, string> startDetails = 4;
   */
  startDetails: { [key: string]: string } = {};

  /**
   * @generated from field: map<string, string> lastDetails = 5;
   */
  lastDetails: { [key: string]: string } = {};

  constructor(data?: PartialMessage<MessageInstance>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.MessageInstance";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "receivedAt", kind: "message", T: Timestamp },
    { no: 2, name: "lastUpdatedAt", kind: "message", T: Timestamp },
    { no: 3, name: "notification", kind: "message", T: Notification },
    { no: 4, name: "startDetails", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 5, name: "lastDetails", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessageInstance {
    return new MessageInstance().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessageInstance {
    return new MessageInstance().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessageInstance {
    return new MessageInstance().fromJsonString(jsonString, options);
  }

  static equals(a: MessageInstance | PlainMessage<MessageInstance> | undefined, b: MessageInstance | PlainMessage<MessageInstance> | undefined): boolean {
    return proto3.util.equals(MessageInstance, a, b);
  }
}

/**
 * opni-alerting internal use
 *
 * @generated from message alerting.TriggerAlertsRequest
 */
export class TriggerAlertsRequest extends Message<TriggerAlertsRequest> {
  /**
   * @generated from field: core.Reference conditionId = 1;
   */
  conditionId?: Reference;

  /**
   * @generated from field: string namespace = 2;
   */
  namespace = "";

  /**
   * @generated from field: string conditionName = 3;
   */
  conditionName = "";

  /**
   * @generated from field: map<string, string> annotations = 4;
   */
  annotations: { [key: string]: string } = {};

  /**
   * @generated from field: map<string, string> labels = 5;
   */
  labels: { [key: string]: string } = {};

  constructor(data?: PartialMessage<TriggerAlertsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.TriggerAlertsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "conditionId", kind: "message", T: Reference },
    { no: 2, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "conditionName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "annotations", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 5, name: "labels", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TriggerAlertsRequest {
    return new TriggerAlertsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TriggerAlertsRequest {
    return new TriggerAlertsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TriggerAlertsRequest {
    return new TriggerAlertsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: TriggerAlertsRequest | PlainMessage<TriggerAlertsRequest> | undefined, b: TriggerAlertsRequest | PlainMessage<TriggerAlertsRequest> | undefined): boolean {
    return proto3.util.equals(TriggerAlertsRequest, a, b);
  }
}

/**
 * @generated from message alerting.TriggerAlertsResponse
 */
export class TriggerAlertsResponse extends Message<TriggerAlertsResponse> {
  constructor(data?: PartialMessage<TriggerAlertsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.TriggerAlertsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TriggerAlertsResponse {
    return new TriggerAlertsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TriggerAlertsResponse {
    return new TriggerAlertsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TriggerAlertsResponse {
    return new TriggerAlertsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: TriggerAlertsResponse | PlainMessage<TriggerAlertsResponse> | undefined, b: TriggerAlertsResponse | PlainMessage<TriggerAlertsResponse> | undefined): boolean {
    return proto3.util.equals(TriggerAlertsResponse, a, b);
  }
}

/**
 * @generated from message alerting.ResolveAlertsRequest
 */
export class ResolveAlertsRequest extends Message<ResolveAlertsRequest> {
  /**
   * @generated from field: core.Reference conditionId = 1;
   */
  conditionId?: Reference;

  /**
   * @generated from field: string namespace = 2;
   */
  namespace = "";

  /**
   * @generated from field: string conditionName = 3;
   */
  conditionName = "";

  /**
   * @generated from field: map<string, string> annotations = 4;
   */
  annotations: { [key: string]: string } = {};

  /**
   * @generated from field: map<string, string> labels = 5;
   */
  labels: { [key: string]: string } = {};

  constructor(data?: PartialMessage<ResolveAlertsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.ResolveAlertsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "conditionId", kind: "message", T: Reference },
    { no: 2, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "conditionName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "annotations", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 5, name: "labels", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResolveAlertsRequest {
    return new ResolveAlertsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResolveAlertsRequest {
    return new ResolveAlertsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResolveAlertsRequest {
    return new ResolveAlertsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ResolveAlertsRequest | PlainMessage<ResolveAlertsRequest> | undefined, b: ResolveAlertsRequest | PlainMessage<ResolveAlertsRequest> | undefined): boolean {
    return proto3.util.equals(ResolveAlertsRequest, a, b);
  }
}

/**
 * @generated from message alerting.ResolveAlertsResponse
 */
export class ResolveAlertsResponse extends Message<ResolveAlertsResponse> {
  constructor(data?: PartialMessage<ResolveAlertsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.ResolveAlertsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResolveAlertsResponse {
    return new ResolveAlertsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResolveAlertsResponse {
    return new ResolveAlertsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResolveAlertsResponse {
    return new ResolveAlertsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ResolveAlertsResponse | PlainMessage<ResolveAlertsResponse> | undefined, b: ResolveAlertsResponse | PlainMessage<ResolveAlertsResponse> | undefined): boolean {
    return proto3.util.equals(ResolveAlertsResponse, a, b);
  }
}

/**
 * @generated from message alerting.ListRoutingRelationshipsResponse
 */
export class ListRoutingRelationshipsResponse extends Message<ListRoutingRelationshipsResponse> {
  /**
   * @generated from field: map<string, core.ReferenceList> routingRelationships = 1;
   */
  routingRelationships: { [key: string]: ReferenceList } = {};

  constructor(data?: PartialMessage<ListRoutingRelationshipsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.ListRoutingRelationshipsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "routingRelationships", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: ReferenceList} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListRoutingRelationshipsResponse {
    return new ListRoutingRelationshipsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListRoutingRelationshipsResponse {
    return new ListRoutingRelationshipsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListRoutingRelationshipsResponse {
    return new ListRoutingRelationshipsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListRoutingRelationshipsResponse | PlainMessage<ListRoutingRelationshipsResponse> | undefined, b: ListRoutingRelationshipsResponse | PlainMessage<ListRoutingRelationshipsResponse> | undefined): boolean {
    return proto3.util.equals(ListRoutingRelationshipsResponse, a, b);
  }
}

