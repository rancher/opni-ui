// @generated by protoc-gen-es v1.2.1 with parameter "target=ts,import_extension=none"
// @generated from file github.com/rancher/opni/pkg/apis/alerting/v1/sidecar.proto (package alerting, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Timestamp } from "../../../../../../../google/protobuf/timestamp_pb";

/**
 * @generated from message alerting.PutConfigRequest
 */
export class PutConfigRequest extends Message<PutConfigRequest> {
  /**
   * allows for having multiple configs 
   *
   * @generated from field: string key = 1;
   */
  key = "";

  /**
   * @generated from field: bytes config = 2;
   */
  config = new Uint8Array(0);

  constructor(data?: PartialMessage<PutConfigRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.PutConfigRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "config", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PutConfigRequest {
    return new PutConfigRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PutConfigRequest {
    return new PutConfigRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PutConfigRequest {
    return new PutConfigRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PutConfigRequest | PlainMessage<PutConfigRequest> | undefined, b: PutConfigRequest | PlainMessage<PutConfigRequest> | undefined): boolean {
    return proto3.util.equals(PutConfigRequest, a, b);
  }
}

/**
 * @generated from message alerting.SyncerStatus
 */
export class SyncerStatus extends Message<SyncerStatus> {
  /**
   * @generated from field: bool ready = 1;
   */
  ready = false;

  /**
   * @generated from field: bool healthy = 2;
   */
  healthy = false;

  /**
   * @generated from field: bool syncInProgress = 3;
   */
  syncInProgress = false;

  /**
   * @generated from field: google.protobuf.Timestamp lastSynced = 4;
   */
  lastSynced?: Timestamp;

  /**
   * @generated from field: alerting.SyncerConfig serverConfig = 5;
   */
  serverConfig?: SyncerConfig;

  /**
   * @generated from field: map<string, string> configs = 6;
   */
  configs: { [key: string]: string } = {};

  constructor(data?: PartialMessage<SyncerStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.SyncerStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ready", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "healthy", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "syncInProgress", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "lastSynced", kind: "message", T: Timestamp },
    { no: 5, name: "serverConfig", kind: "message", T: SyncerConfig },
    { no: 6, name: "configs", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SyncerStatus {
    return new SyncerStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SyncerStatus {
    return new SyncerStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SyncerStatus {
    return new SyncerStatus().fromJsonString(jsonString, options);
  }

  static equals(a: SyncerStatus | PlainMessage<SyncerStatus> | undefined, b: SyncerStatus | PlainMessage<SyncerStatus> | undefined): boolean {
    return proto3.util.equals(SyncerStatus, a, b);
  }
}

/**
 * @generated from message alerting.SyncerConfig
 */
export class SyncerConfig extends Message<SyncerConfig> {
  /**
   * @generated from field: string gatewayJoinAddress = 1;
   */
  gatewayJoinAddress = "";

  /**
   * @generated from field: string alertmanagerConfigPath = 2;
   */
  alertmanagerConfigPath = "";

  /**
   * @generated from field: string alertmanagerAddress = 3;
   */
  alertmanagerAddress = "";

  /**
   * @generated from field: string listenAddress = 4;
   */
  listenAddress = "";

  /**
   * @generated from field: string hookListenAddress = 5;
   */
  hookListenAddress = "";

  /**
   * @generated from field: int64 pprofPort = 6;
   */
  pprofPort = protoInt64.zero;

  /**
   * @generated from field: int64 profileBlockRate = 7;
   */
  profileBlockRate = protoInt64.zero;

  constructor(data?: PartialMessage<SyncerConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.SyncerConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "gatewayJoinAddress", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "alertmanagerConfigPath", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "alertmanagerAddress", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "listenAddress", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "hookListenAddress", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "pprofPort", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 7, name: "profileBlockRate", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SyncerConfig {
    return new SyncerConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SyncerConfig {
    return new SyncerConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SyncerConfig {
    return new SyncerConfig().fromJsonString(jsonString, options);
  }

  static equals(a: SyncerConfig | PlainMessage<SyncerConfig> | undefined, b: SyncerConfig | PlainMessage<SyncerConfig> | undefined): boolean {
    return proto3.util.equals(SyncerConfig, a, b);
  }
}

