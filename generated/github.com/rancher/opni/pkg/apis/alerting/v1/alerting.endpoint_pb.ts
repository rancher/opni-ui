// @generated by protoc-gen-es v1.2.1 with parameter "target=ts,import_extension=none"
// @generated from file github.com/rancher/opni/pkg/apis/alerting/v1/alerting.endpoint.proto (package alerting, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Timestamp } from "../../../../../../../google/protobuf/timestamp_pb";
import { Reference } from "../../core/v1/core_pb";
import { Duration } from "../../../../../../../google/protobuf/duration_pb";

/**
 * @generated from message alerting.AlertEndpoint
 */
export class AlertEndpoint extends Message<AlertEndpoint> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string description = 2;
   */
  description = "";

  /**
   * @generated from oneof alerting.AlertEndpoint.endpoint
   */
  endpoint: {
    /**
     * @generated from field: alerting.SlackEndpoint slack = 5;
     */
    value: SlackEndpoint;
    case: "slack";
  } | {
    /**
     * @generated from field: alerting.EmailEndpoint email = 6;
     */
    value: EmailEndpoint;
    case: "email";
  } | {
    /**
     * @generated from field: alerting.PagerDutyEndpoint pagerDuty = 7;
     */
    value: PagerDutyEndpoint;
    case: "pagerDuty";
  } | {
    /**
     * @generated from field: alerting.WebhookEndpoint webhook = 8;
     */
    value: WebhookEndpoint;
    case: "webhook";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * properties are used to flag properties of endpoints, for
   * example opting into opni notifications
   * Properties starting with "_" are private 
   *
   * @generated from field: map<string, string> properties = 9;
   */
  properties: { [key: string]: string } = {};

  /**
   * the following are read only for consumers of the API
   *
   * @generated from field: google.protobuf.Timestamp lastUpdated = 3;
   */
  lastUpdated?: Timestamp;

  /**
   * @generated from field: string id = 4;
   */
  id = "";

  constructor(data?: PartialMessage<AlertEndpoint>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.AlertEndpoint";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "slack", kind: "message", T: SlackEndpoint, oneof: "endpoint" },
    { no: 6, name: "email", kind: "message", T: EmailEndpoint, oneof: "endpoint" },
    { no: 7, name: "pagerDuty", kind: "message", T: PagerDutyEndpoint, oneof: "endpoint" },
    { no: 8, name: "webhook", kind: "message", T: WebhookEndpoint, oneof: "endpoint" },
    { no: 9, name: "properties", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 3, name: "lastUpdated", kind: "message", T: Timestamp },
    { no: 4, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AlertEndpoint {
    return new AlertEndpoint().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AlertEndpoint {
    return new AlertEndpoint().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AlertEndpoint {
    return new AlertEndpoint().fromJsonString(jsonString, options);
  }

  static equals(a: AlertEndpoint | PlainMessage<AlertEndpoint> | undefined, b: AlertEndpoint | PlainMessage<AlertEndpoint> | undefined): boolean {
    return proto3.util.equals(AlertEndpoint, a, b);
  }
}

/**
 * @generated from message alerting.EndpointImplementation
 */
export class EndpointImplementation extends Message<EndpointImplementation> {
  /**
   * title of the alert (required)
   *
   * @generated from field: string title = 1;
   */
  title = "";

  /**
   * body message of the alert (required)
   *
   * @generated from field: string body = 2;
   */
  body = "";

  /**
   * send a notification when the alert is no longer firing? yes/no (default =
   * no)
   *
   * @generated from field: optional bool sendResolved = 3;
   */
  sendResolved?: boolean;

  constructor(data?: PartialMessage<EndpointImplementation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.EndpointImplementation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "body", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "sendResolved", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EndpointImplementation {
    return new EndpointImplementation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EndpointImplementation {
    return new EndpointImplementation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EndpointImplementation {
    return new EndpointImplementation().fromJsonString(jsonString, options);
  }

  static equals(a: EndpointImplementation | PlainMessage<EndpointImplementation> | undefined, b: EndpointImplementation | PlainMessage<EndpointImplementation> | undefined): boolean {
    return proto3.util.equals(EndpointImplementation, a, b);
  }
}

/**
 * @generated from message alerting.SlackEndpoint
 */
export class SlackEndpoint extends Message<SlackEndpoint> {
  /**
   * @generated from field: string webhookUrl = 1;
   */
  webhookUrl = "";

  /**
   * @generated from field: string channel = 2;
   */
  channel = "";

  constructor(data?: PartialMessage<SlackEndpoint>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.SlackEndpoint";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "webhookUrl", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "channel", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SlackEndpoint {
    return new SlackEndpoint().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SlackEndpoint {
    return new SlackEndpoint().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SlackEndpoint {
    return new SlackEndpoint().fromJsonString(jsonString, options);
  }

  static equals(a: SlackEndpoint | PlainMessage<SlackEndpoint> | undefined, b: SlackEndpoint | PlainMessage<SlackEndpoint> | undefined): boolean {
    return proto3.util.equals(SlackEndpoint, a, b);
  }
}

/**
 * @generated from message alerting.EmailEndpoint
 */
export class EmailEndpoint extends Message<EmailEndpoint> {
  /**
   * email recipient
   *
   * @generated from field: string to = 1;
   */
  to = "";

  /**
   * smtp server sender email
   *
   * @generated from field: optional string smtpFrom = 2;
   */
  smtpFrom?: string;

  /**
   * smtp server host & port
   *
   * @generated from field: optional string smtpSmartHost = 3;
   */
  smtpSmartHost?: string;

  /**
   * smtp server username
   *
   * @generated from field: optional string smtpAuthUsername = 4;
   */
  smtpAuthUsername?: string;

  /**
   * smtp server identity
   *
   * @generated from field: optional string smtpAuthIdentity = 5;
   */
  smtpAuthIdentity?: string;

  /**
   * smtp server password
   *
   * @generated from field: optional string smtpAuthPassword = 6;
   */
  smtpAuthPassword?: string;

  /**
   * does SMTP require TSL : yes or no
   *
   * @generated from field: optional bool smtpRequireTLS = 7;
   */
  smtpRequireTLS?: boolean;

  constructor(data?: PartialMessage<EmailEndpoint>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.EmailEndpoint";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "to", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "smtpFrom", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "smtpSmartHost", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "smtpAuthUsername", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "smtpAuthIdentity", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 6, name: "smtpAuthPassword", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 7, name: "smtpRequireTLS", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EmailEndpoint {
    return new EmailEndpoint().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EmailEndpoint {
    return new EmailEndpoint().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EmailEndpoint {
    return new EmailEndpoint().fromJsonString(jsonString, options);
  }

  static equals(a: EmailEndpoint | PlainMessage<EmailEndpoint> | undefined, b: EmailEndpoint | PlainMessage<EmailEndpoint> | undefined): boolean {
    return proto3.util.equals(EmailEndpoint, a, b);
  }
}

/**
 * @generated from message alerting.PagerDutyEndpoint
 */
export class PagerDutyEndpoint extends Message<PagerDutyEndpoint> {
  /**
   * default global ruleset -> event rules screen
   *
   * @generated from field: string integrationKey = 1;
   */
  integrationKey = "";

  /**
   * @generated from field: string serviceKey = 2;
   */
  serviceKey = "";

  constructor(data?: PartialMessage<PagerDutyEndpoint>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.PagerDutyEndpoint";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "integrationKey", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "serviceKey", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PagerDutyEndpoint {
    return new PagerDutyEndpoint().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PagerDutyEndpoint {
    return new PagerDutyEndpoint().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PagerDutyEndpoint {
    return new PagerDutyEndpoint().fromJsonString(jsonString, options);
  }

  static equals(a: PagerDutyEndpoint | PlainMessage<PagerDutyEndpoint> | undefined, b: PagerDutyEndpoint | PlainMessage<PagerDutyEndpoint> | undefined): boolean {
    return proto3.util.equals(PagerDutyEndpoint, a, b);
  }
}

/**
 * @generated from message alerting.WebhookEndpoint
 */
export class WebhookEndpoint extends Message<WebhookEndpoint> {
  /**
   * @generated from field: string url = 1;
   */
  url = "";

  /**
   * @generated from field: alerting.HTTPConfig httpConfig = 2;
   */
  httpConfig?: HTTPConfig;

  /**
   * @generated from field: int32 maxAlerts = 3;
   */
  maxAlerts = 0;

  constructor(data?: PartialMessage<WebhookEndpoint>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.WebhookEndpoint";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "httpConfig", kind: "message", T: HTTPConfig },
    { no: 3, name: "maxAlerts", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WebhookEndpoint {
    return new WebhookEndpoint().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WebhookEndpoint {
    return new WebhookEndpoint().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WebhookEndpoint {
    return new WebhookEndpoint().fromJsonString(jsonString, options);
  }

  static equals(a: WebhookEndpoint | PlainMessage<WebhookEndpoint> | undefined, b: WebhookEndpoint | PlainMessage<WebhookEndpoint> | undefined): boolean {
    return proto3.util.equals(WebhookEndpoint, a, b);
  }
}

/**
 * @generated from message alerting.HTTPConfig
 */
export class HTTPConfig extends Message<HTTPConfig> {
  /**
   * @generated from field: alerting.BasicAuth basicAuth = 1;
   */
  basicAuth?: BasicAuth;

  /**
   * @generated from field: alerting.Authorization authorization = 2;
   */
  authorization?: Authorization;

  /**
   * @generated from field: alerting.OAuth2 oauth2 = 3;
   */
  oauth2?: OAuth2;

  /**
   * @generated from field: bool enabled_http2 = 4;
   */
  enabledHttp2 = false;

  /**
   * @generated from field: string proxy_url = 5;
   */
  proxyUrl = "";

  /**
   * @generated from field: bool follow_redirects = 6;
   */
  followRedirects = false;

  /**
   * @generated from field: alerting.TLSConfig tls_config = 7;
   */
  tlsConfig?: TLSConfig;

  constructor(data?: PartialMessage<HTTPConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.HTTPConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "basicAuth", kind: "message", T: BasicAuth },
    { no: 2, name: "authorization", kind: "message", T: Authorization },
    { no: 3, name: "oauth2", kind: "message", T: OAuth2 },
    { no: 4, name: "enabled_http2", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "proxy_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "follow_redirects", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "tls_config", kind: "message", T: TLSConfig },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HTTPConfig {
    return new HTTPConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HTTPConfig {
    return new HTTPConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HTTPConfig {
    return new HTTPConfig().fromJsonString(jsonString, options);
  }

  static equals(a: HTTPConfig | PlainMessage<HTTPConfig> | undefined, b: HTTPConfig | PlainMessage<HTTPConfig> | undefined): boolean {
    return proto3.util.equals(HTTPConfig, a, b);
  }
}

/**
 * @generated from message alerting.BasicAuth
 */
export class BasicAuth extends Message<BasicAuth> {
  /**
   * @generated from field: string username = 1;
   */
  username = "";

  /**
   * @generated from field: string password = 2;
   */
  password = "";

  /**
   * @generated from field: string password_file = 3;
   */
  passwordFile = "";

  constructor(data?: PartialMessage<BasicAuth>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.BasicAuth";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "password_file", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BasicAuth {
    return new BasicAuth().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BasicAuth {
    return new BasicAuth().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BasicAuth {
    return new BasicAuth().fromJsonString(jsonString, options);
  }

  static equals(a: BasicAuth | PlainMessage<BasicAuth> | undefined, b: BasicAuth | PlainMessage<BasicAuth> | undefined): boolean {
    return proto3.util.equals(BasicAuth, a, b);
  }
}

/**
 * @generated from message alerting.Authorization
 */
export class Authorization extends Message<Authorization> {
  /**
   * @generated from field: string type = 1;
   */
  type = "";

  /**
   * @generated from field: string credentialsFile = 2;
   */
  credentialsFile = "";

  /**
   * @generated from field: string credentials = 3;
   */
  credentials = "";

  constructor(data?: PartialMessage<Authorization>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.Authorization";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "credentialsFile", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "credentials", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Authorization {
    return new Authorization().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Authorization {
    return new Authorization().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Authorization {
    return new Authorization().fromJsonString(jsonString, options);
  }

  static equals(a: Authorization | PlainMessage<Authorization> | undefined, b: Authorization | PlainMessage<Authorization> | undefined): boolean {
    return proto3.util.equals(Authorization, a, b);
  }
}

/**
 * @generated from message alerting.OAuth2
 */
export class OAuth2 extends Message<OAuth2> {
  /**
   * @generated from field: string clientId = 1;
   */
  clientId = "";

  /**
   * @generated from field: string clientSecret = 2;
   */
  clientSecret = "";

  /**
   * @generated from field: string clientSecretFile = 3;
   */
  clientSecretFile = "";

  /**
   * @generated from field: repeated string scopes = 4;
   */
  scopes: string[] = [];

  /**
   * @generated from field: string tokenUrl = 5;
   */
  tokenUrl = "";

  /**
   * @generated from field: map<string, string> endpointParams = 6;
   */
  endpointParams: { [key: string]: string } = {};

  /**
   * @generated from field: string proxyUrl = 7;
   */
  proxyUrl = "";

  /**
   * @generated from field: alerting.TLSConfig tlsConfig = 8;
   */
  tlsConfig?: TLSConfig;

  constructor(data?: PartialMessage<OAuth2>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.OAuth2";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "clientId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "clientSecret", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "clientSecretFile", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "scopes", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "tokenUrl", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "endpointParams", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 7, name: "proxyUrl", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "tlsConfig", kind: "message", T: TLSConfig },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OAuth2 {
    return new OAuth2().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OAuth2 {
    return new OAuth2().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OAuth2 {
    return new OAuth2().fromJsonString(jsonString, options);
  }

  static equals(a: OAuth2 | PlainMessage<OAuth2> | undefined, b: OAuth2 | PlainMessage<OAuth2> | undefined): boolean {
    return proto3.util.equals(OAuth2, a, b);
  }
}

/**
 * @generated from message alerting.TLSConfig
 */
export class TLSConfig extends Message<TLSConfig> {
  /**
   * @generated from field: string caFile = 1;
   */
  caFile = "";

  /**
   * @generated from field: string certFile = 2;
   */
  certFile = "";

  /**
   * @generated from field: string keyFile = 3;
   */
  keyFile = "";

  /**
   * @generated from field: string serverName = 4;
   */
  serverName = "";

  /**
   * @generated from field: bool insecureSkipVerify = 5;
   */
  insecureSkipVerify = false;

  /**
   * @generated from field: string minVersion = 6;
   */
  minVersion = "";

  /**
   * @generated from field: string maxVersion = 7;
   */
  maxVersion = "";

  constructor(data?: PartialMessage<TLSConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.TLSConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "caFile", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "certFile", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "keyFile", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "serverName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "insecureSkipVerify", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "minVersion", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "maxVersion", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLSConfig {
    return new TLSConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLSConfig {
    return new TLSConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLSConfig {
    return new TLSConfig().fromJsonString(jsonString, options);
  }

  static equals(a: TLSConfig | PlainMessage<TLSConfig> | undefined, b: TLSConfig | PlainMessage<TLSConfig> | undefined): boolean {
    return proto3.util.equals(TLSConfig, a, b);
  }
}

/**
 * @generated from message alerting.AlertEndpointList
 */
export class AlertEndpointList extends Message<AlertEndpointList> {
  /**
   * @generated from field: repeated alerting.AlertEndpointWithId items = 1;
   */
  items: AlertEndpointWithId[] = [];

  constructor(data?: PartialMessage<AlertEndpointList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.AlertEndpointList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "items", kind: "message", T: AlertEndpointWithId, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AlertEndpointList {
    return new AlertEndpointList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AlertEndpointList {
    return new AlertEndpointList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AlertEndpointList {
    return new AlertEndpointList().fromJsonString(jsonString, options);
  }

  static equals(a: AlertEndpointList | PlainMessage<AlertEndpointList> | undefined, b: AlertEndpointList | PlainMessage<AlertEndpointList> | undefined): boolean {
    return proto3.util.equals(AlertEndpointList, a, b);
  }
}

/**
 * @generated from message alerting.AlertEndpointWithId
 */
export class AlertEndpointWithId extends Message<AlertEndpointWithId> {
  /**
   * @generated from field: alerting.AlertEndpoint endpoint = 1;
   */
  endpoint?: AlertEndpoint;

  /**
   * @generated from field: core.Reference id = 2;
   */
  id?: Reference;

  constructor(data?: PartialMessage<AlertEndpointWithId>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.AlertEndpointWithId";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "endpoint", kind: "message", T: AlertEndpoint },
    { no: 2, name: "id", kind: "message", T: Reference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AlertEndpointWithId {
    return new AlertEndpointWithId().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AlertEndpointWithId {
    return new AlertEndpointWithId().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AlertEndpointWithId {
    return new AlertEndpointWithId().fromJsonString(jsonString, options);
  }

  static equals(a: AlertEndpointWithId | PlainMessage<AlertEndpointWithId> | undefined, b: AlertEndpointWithId | PlainMessage<AlertEndpointWithId> | undefined): boolean {
    return proto3.util.equals(AlertEndpointWithId, a, b);
  }
}

/**
 * @generated from message alerting.ListAlertEndpointsRequest
 */
export class ListAlertEndpointsRequest extends Message<ListAlertEndpointsRequest> {
  constructor(data?: PartialMessage<ListAlertEndpointsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.ListAlertEndpointsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAlertEndpointsRequest {
    return new ListAlertEndpointsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAlertEndpointsRequest {
    return new ListAlertEndpointsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAlertEndpointsRequest {
    return new ListAlertEndpointsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListAlertEndpointsRequest | PlainMessage<ListAlertEndpointsRequest> | undefined, b: ListAlertEndpointsRequest | PlainMessage<ListAlertEndpointsRequest> | undefined): boolean {
    return proto3.util.equals(ListAlertEndpointsRequest, a, b);
  }
}

/**
 * @generated from message alerting.UpdateAlertEndpointRequest
 */
export class UpdateAlertEndpointRequest extends Message<UpdateAlertEndpointRequest> {
  /**
   * @generated from field: bool forceUpdate = 1;
   */
  forceUpdate = false;

  /**
   * @generated from field: core.Reference id = 2;
   */
  id?: Reference;

  /**
   * @generated from field: alerting.AlertEndpoint updateAlert = 3;
   */
  updateAlert?: AlertEndpoint;

  constructor(data?: PartialMessage<UpdateAlertEndpointRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.UpdateAlertEndpointRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "forceUpdate", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "id", kind: "message", T: Reference },
    { no: 3, name: "updateAlert", kind: "message", T: AlertEndpoint },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateAlertEndpointRequest {
    return new UpdateAlertEndpointRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateAlertEndpointRequest {
    return new UpdateAlertEndpointRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateAlertEndpointRequest {
    return new UpdateAlertEndpointRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateAlertEndpointRequest | PlainMessage<UpdateAlertEndpointRequest> | undefined, b: UpdateAlertEndpointRequest | PlainMessage<UpdateAlertEndpointRequest> | undefined): boolean {
    return proto3.util.equals(UpdateAlertEndpointRequest, a, b);
  }
}

/**
 * @generated from message alerting.DeleteAlertEndpointRequest
 */
export class DeleteAlertEndpointRequest extends Message<DeleteAlertEndpointRequest> {
  /**
   * @generated from field: bool forceDelete = 1;
   */
  forceDelete = false;

  /**
   * @generated from field: core.Reference id = 2;
   */
  id?: Reference;

  constructor(data?: PartialMessage<DeleteAlertEndpointRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.DeleteAlertEndpointRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "forceDelete", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "id", kind: "message", T: Reference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteAlertEndpointRequest {
    return new DeleteAlertEndpointRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteAlertEndpointRequest {
    return new DeleteAlertEndpointRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteAlertEndpointRequest {
    return new DeleteAlertEndpointRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteAlertEndpointRequest | PlainMessage<DeleteAlertEndpointRequest> | undefined, b: DeleteAlertEndpointRequest | PlainMessage<DeleteAlertEndpointRequest> | undefined): boolean {
    return proto3.util.equals(DeleteAlertEndpointRequest, a, b);
  }
}

/**
 * @generated from message alerting.TestAlertEndpointRequest
 */
export class TestAlertEndpointRequest extends Message<TestAlertEndpointRequest> {
  /**
   * @generated from field: alerting.AlertEndpoint endpoint = 1;
   */
  endpoint?: AlertEndpoint;

  constructor(data?: PartialMessage<TestAlertEndpointRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.TestAlertEndpointRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "endpoint", kind: "message", T: AlertEndpoint },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestAlertEndpointRequest {
    return new TestAlertEndpointRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestAlertEndpointRequest {
    return new TestAlertEndpointRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestAlertEndpointRequest {
    return new TestAlertEndpointRequest().fromJsonString(jsonString, options);
  }

  static equals(a: TestAlertEndpointRequest | PlainMessage<TestAlertEndpointRequest> | undefined, b: TestAlertEndpointRequest | PlainMessage<TestAlertEndpointRequest> | undefined): boolean {
    return proto3.util.equals(TestAlertEndpointRequest, a, b);
  }
}

/**
 * will contain details in a future iteration
 *
 * @generated from message alerting.TestAlertEndpointResponse
 */
export class TestAlertEndpointResponse extends Message<TestAlertEndpointResponse> {
  constructor(data?: PartialMessage<TestAlertEndpointResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.TestAlertEndpointResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestAlertEndpointResponse {
    return new TestAlertEndpointResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestAlertEndpointResponse {
    return new TestAlertEndpointResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestAlertEndpointResponse {
    return new TestAlertEndpointResponse().fromJsonString(jsonString, options);
  }

  static equals(a: TestAlertEndpointResponse | PlainMessage<TestAlertEndpointResponse> | undefined, b: TestAlertEndpointResponse | PlainMessage<TestAlertEndpointResponse> | undefined): boolean {
    return proto3.util.equals(TestAlertEndpointResponse, a, b);
  }
}

/**
 * @generated from message alerting.FullAttachedEndpoints
 */
export class FullAttachedEndpoints extends Message<FullAttachedEndpoints> {
  /**
   * @generated from field: repeated alerting.FullAttachedEndpoint items = 1;
   */
  items: FullAttachedEndpoint[] = [];

  /**
   * initial delay before firing the alert (optional) (default=10s)
   *
   * @generated from field: optional google.protobuf.Duration initialDelay = 2;
   */
  initialDelay?: Duration;

  /**
   * how often to resend alert messages on active alerts (default =10m)
   *
   * @generated from field: optional google.protobuf.Duration repeatInterval = 3;
   */
  repeatInterval?: Duration;

  /**
   * How long to wait before sending notifications on new condition that has
   * already fired recently (default= 10m)
   *
   * @generated from field: optional google.protobuf.Duration throttlingDuration = 4;
   */
  throttlingDuration?: Duration;

  /**
   * @generated from field: alerting.EndpointImplementation details = 5;
   */
  details?: EndpointImplementation;

  constructor(data?: PartialMessage<FullAttachedEndpoints>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.FullAttachedEndpoints";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "items", kind: "message", T: FullAttachedEndpoint, repeated: true },
    { no: 2, name: "initialDelay", kind: "message", T: Duration, opt: true },
    { no: 3, name: "repeatInterval", kind: "message", T: Duration, opt: true },
    { no: 4, name: "throttlingDuration", kind: "message", T: Duration, opt: true },
    { no: 5, name: "details", kind: "message", T: EndpointImplementation },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FullAttachedEndpoints {
    return new FullAttachedEndpoints().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FullAttachedEndpoints {
    return new FullAttachedEndpoints().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FullAttachedEndpoints {
    return new FullAttachedEndpoints().fromJsonString(jsonString, options);
  }

  static equals(a: FullAttachedEndpoints | PlainMessage<FullAttachedEndpoints> | undefined, b: FullAttachedEndpoints | PlainMessage<FullAttachedEndpoints> | undefined): boolean {
    return proto3.util.equals(FullAttachedEndpoints, a, b);
  }
}

/**
 * @generated from message alerting.RateLimitingConfig
 */
export class RateLimitingConfig extends Message<RateLimitingConfig> {
  /**
   * initial delay before firing the alert (optional) (default=10s)
   *
   * @generated from field: optional google.protobuf.Duration initialDelay = 1;
   */
  initialDelay?: Duration;

  /**
   * how often to resend alert messages on active alerts (default =10m)
   *
   * @generated from field: optional google.protobuf.Duration repeatInterval = 2;
   */
  repeatInterval?: Duration;

  /**
   * How long to wait before sending notifications on new condition that has
   * already fired recently (default= 10m) 
   *
   * @generated from field: optional google.protobuf.Duration throttlingDuration = 3;
   */
  throttlingDuration?: Duration;

  constructor(data?: PartialMessage<RateLimitingConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.RateLimitingConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "initialDelay", kind: "message", T: Duration, opt: true },
    { no: 2, name: "repeatInterval", kind: "message", T: Duration, opt: true },
    { no: 3, name: "throttlingDuration", kind: "message", T: Duration, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RateLimitingConfig {
    return new RateLimitingConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RateLimitingConfig {
    return new RateLimitingConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RateLimitingConfig {
    return new RateLimitingConfig().fromJsonString(jsonString, options);
  }

  static equals(a: RateLimitingConfig | PlainMessage<RateLimitingConfig> | undefined, b: RateLimitingConfig | PlainMessage<RateLimitingConfig> | undefined): boolean {
    return proto3.util.equals(RateLimitingConfig, a, b);
  }
}

/**
 * @generated from message alerting.FullAttachedEndpoint
 */
export class FullAttachedEndpoint extends Message<FullAttachedEndpoint> {
  /**
   * @generated from field: string endpointId = 1;
   */
  endpointId = "";

  /**
   * @generated from field: alerting.AlertEndpoint alertEndpoint = 2;
   */
  alertEndpoint?: AlertEndpoint;

  /**
   * @generated from field: alerting.EndpointImplementation details = 3;
   */
  details?: EndpointImplementation;

  constructor(data?: PartialMessage<FullAttachedEndpoint>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.FullAttachedEndpoint";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "endpointId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "alertEndpoint", kind: "message", T: AlertEndpoint },
    { no: 3, name: "details", kind: "message", T: EndpointImplementation },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FullAttachedEndpoint {
    return new FullAttachedEndpoint().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FullAttachedEndpoint {
    return new FullAttachedEndpoint().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FullAttachedEndpoint {
    return new FullAttachedEndpoint().fromJsonString(jsonString, options);
  }

  static equals(a: FullAttachedEndpoint | PlainMessage<FullAttachedEndpoint> | undefined, b: FullAttachedEndpoint | PlainMessage<FullAttachedEndpoint> | undefined): boolean {
    return proto3.util.equals(FullAttachedEndpoint, a, b);
  }
}

/**
 * Empty means no attached endpoints
 *
 * @generated from message alerting.AttachedEndpoints
 */
export class AttachedEndpoints extends Message<AttachedEndpoints> {
  /**
   * @generated from field: repeated alerting.AttachedEndpoint items = 1;
   */
  items: AttachedEndpoint[] = [];

  /**
   * initial delay before firing the alert (optional) (default=10s)
   *
   * @generated from field: optional google.protobuf.Duration initialDelay = 2;
   */
  initialDelay?: Duration;

  /**
   * how often to resend alert messages on active alerts (default =10m)
   *
   * @generated from field: optional google.protobuf.Duration repeatInterval = 3;
   */
  repeatInterval?: Duration;

  /**
   * How long to wait before sending notifications on new condition that has
   * already fired recently (default= 10m)
   *
   * @generated from field: optional google.protobuf.Duration throttlingDuration = 4;
   */
  throttlingDuration?: Duration;

  /**
   * @generated from field: alerting.EndpointImplementation details = 5;
   */
  details?: EndpointImplementation;

  constructor(data?: PartialMessage<AttachedEndpoints>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.AttachedEndpoints";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "items", kind: "message", T: AttachedEndpoint, repeated: true },
    { no: 2, name: "initialDelay", kind: "message", T: Duration, opt: true },
    { no: 3, name: "repeatInterval", kind: "message", T: Duration, opt: true },
    { no: 4, name: "throttlingDuration", kind: "message", T: Duration, opt: true },
    { no: 5, name: "details", kind: "message", T: EndpointImplementation },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AttachedEndpoints {
    return new AttachedEndpoints().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AttachedEndpoints {
    return new AttachedEndpoints().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AttachedEndpoints {
    return new AttachedEndpoints().fromJsonString(jsonString, options);
  }

  static equals(a: AttachedEndpoints | PlainMessage<AttachedEndpoints> | undefined, b: AttachedEndpoints | PlainMessage<AttachedEndpoints> | undefined): boolean {
    return proto3.util.equals(AttachedEndpoints, a, b);
  }
}

/**
 * @generated from message alerting.AttachedEndpoint
 */
export class AttachedEndpoint extends Message<AttachedEndpoint> {
  /**
   * @generated from field: string endpointId = 1;
   */
  endpointId = "";

  constructor(data?: PartialMessage<AttachedEndpoint>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.AttachedEndpoint";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "endpointId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AttachedEndpoint {
    return new AttachedEndpoint().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AttachedEndpoint {
    return new AttachedEndpoint().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AttachedEndpoint {
    return new AttachedEndpoint().fromJsonString(jsonString, options);
  }

  static equals(a: AttachedEndpoint | PlainMessage<AttachedEndpoint> | undefined, b: AttachedEndpoint | PlainMessage<AttachedEndpoint> | undefined): boolean {
    return proto3.util.equals(AttachedEndpoint, a, b);
  }
}

/**
 * opni-alerting internal use
 *
 * @generated from message alerting.RoutingNode
 */
export class RoutingNode extends Message<RoutingNode> {
  /**
   * @generated from field: core.Reference conditionId = 1;
   */
  conditionId?: Reference;

  /**
   * @generated from field: alerting.FullAttachedEndpoints fullAttachedEndpoints = 2;
   */
  fullAttachedEndpoints?: FullAttachedEndpoints;

  constructor(data?: PartialMessage<RoutingNode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.RoutingNode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "conditionId", kind: "message", T: Reference },
    { no: 2, name: "fullAttachedEndpoints", kind: "message", T: FullAttachedEndpoints },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RoutingNode {
    return new RoutingNode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RoutingNode {
    return new RoutingNode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RoutingNode {
    return new RoutingNode().fromJsonString(jsonString, options);
  }

  static equals(a: RoutingNode | PlainMessage<RoutingNode> | undefined, b: RoutingNode | PlainMessage<RoutingNode> | undefined): boolean {
    return proto3.util.equals(RoutingNode, a, b);
  }
}

/**
 * opni-alerting internal use
 *
 * @generated from message alerting.EndpointRoutingMap
 */
export class EndpointRoutingMap extends Message<EndpointRoutingMap> {
  /**
   * @generated from field: map<string, alerting.EndpointMetadata> endpoints = 1;
   */
  endpoints: { [key: string]: EndpointMetadata } = {};

  constructor(data?: PartialMessage<EndpointRoutingMap>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.EndpointRoutingMap";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "endpoints", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: EndpointMetadata} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EndpointRoutingMap {
    return new EndpointRoutingMap().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EndpointRoutingMap {
    return new EndpointRoutingMap().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EndpointRoutingMap {
    return new EndpointRoutingMap().fromJsonString(jsonString, options);
  }

  static equals(a: EndpointRoutingMap | PlainMessage<EndpointRoutingMap> | undefined, b: EndpointRoutingMap | PlainMessage<EndpointRoutingMap> | undefined): boolean {
    return proto3.util.equals(EndpointRoutingMap, a, b);
  }
}

/**
 * opni-alerting internal use
 *
 * @generated from message alerting.RoutingRelationships
 */
export class RoutingRelationships extends Message<RoutingRelationships> {
  /**
   * @generated from field: map<string, alerting.EndpointRoutingMap> conditions = 1;
   */
  conditions: { [key: string]: EndpointRoutingMap } = {};

  constructor(data?: PartialMessage<RoutingRelationships>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.RoutingRelationships";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "conditions", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: EndpointRoutingMap} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RoutingRelationships {
    return new RoutingRelationships().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RoutingRelationships {
    return new RoutingRelationships().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RoutingRelationships {
    return new RoutingRelationships().fromJsonString(jsonString, options);
  }

  static equals(a: RoutingRelationships | PlainMessage<RoutingRelationships> | undefined, b: RoutingRelationships | PlainMessage<RoutingRelationships> | undefined): boolean {
    return proto3.util.equals(RoutingRelationships, a, b);
  }
}

/**
 * opni-alerting internal use
 *
 * @generated from message alerting.EndpointMetadata
 */
export class EndpointMetadata extends Message<EndpointMetadata> {
  /**
   * @generated from field: int32 position = 1;
   */
  position = 0;

  /**
   * @generated from field: string endpointType = 2;
   */
  endpointType = "";

  constructor(data?: PartialMessage<EndpointMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.EndpointMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "position", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "endpointType", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EndpointMetadata {
    return new EndpointMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EndpointMetadata {
    return new EndpointMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EndpointMetadata {
    return new EndpointMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: EndpointMetadata | PlainMessage<EndpointMetadata> | undefined, b: EndpointMetadata | PlainMessage<EndpointMetadata> | undefined): boolean {
    return proto3.util.equals(EndpointMetadata, a, b);
  }
}

/**
 * @generated from message alerting.InvolvedConditions
 */
export class InvolvedConditions extends Message<InvolvedConditions> {
  /**
   * @generated from field: repeated core.Reference items = 1;
   */
  items: Reference[] = [];

  constructor(data?: PartialMessage<InvolvedConditions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.InvolvedConditions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "items", kind: "message", T: Reference, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InvolvedConditions {
    return new InvolvedConditions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InvolvedConditions {
    return new InvolvedConditions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InvolvedConditions {
    return new InvolvedConditions().fromJsonString(jsonString, options);
  }

  static equals(a: InvolvedConditions | PlainMessage<InvolvedConditions> | undefined, b: InvolvedConditions | PlainMessage<InvolvedConditions> | undefined): boolean {
    return proto3.util.equals(InvolvedConditions, a, b);
  }
}

/**
 * @generated from message alerting.ToggleRequest
 */
export class ToggleRequest extends Message<ToggleRequest> {
  /**
   * @generated from field: core.Reference id = 1;
   */
  id?: Reference;

  constructor(data?: PartialMessage<ToggleRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.ToggleRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: Reference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ToggleRequest {
    return new ToggleRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ToggleRequest {
    return new ToggleRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ToggleRequest {
    return new ToggleRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ToggleRequest | PlainMessage<ToggleRequest> | undefined, b: ToggleRequest | PlainMessage<ToggleRequest> | undefined): boolean {
    return proto3.util.equals(ToggleRequest, a, b);
  }
}

