// @generated by protoc-gen-es v1.2.1 with parameter "target=ts,import_extension=none"
// @generated from file github.com/rancher/opni/pkg/apis/alerting/v1/alerting.proto (package alerting, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Timestamp } from "../../../../../../../google/protobuf/timestamp_pb";

/**
 * @generated from enum alerting.OpniSeverity
 */
export enum OpniSeverity {
  /**
   * @generated from enum value: Info = 0;
   */
  Info = 0,

  /**
   * @generated from enum value: Warning = 1;
   */
  Warning = 1,

  /**
   * @generated from enum value: Error = 2;
   */
  Error = 2,

  /**
   * @generated from enum value: Critical = 3;
   */
  Critical = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(OpniSeverity)
proto3.util.setEnumType(OpniSeverity, "alerting.OpniSeverity", [
  { no: 0, name: "Info" },
  { no: 1, name: "Warning" },
  { no: 2, name: "Error" },
  { no: 3, name: "Critical" },
]);

/**
 * @generated from enum alerting.GoldenSignal
 */
export enum GoldenSignal {
  /**
   * @generated from enum value: Custom = 0;
   */
  Custom = 0,

  /**
   * @generated from enum value: Errors = 1;
   */
  Errors = 1,

  /**
   * @generated from enum value: Saturation = 2;
   */
  Saturation = 2,

  /**
   * @generated from enum value: Traffic = 3;
   */
  Traffic = 3,

  /**
   * @generated from enum value: Latency = 4;
   */
  Latency = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(GoldenSignal)
proto3.util.setEnumType(GoldenSignal, "alerting.GoldenSignal", [
  { no: 0, name: "Custom" },
  { no: 1, name: "Errors" },
  { no: 2, name: "Saturation" },
  { no: 3, name: "Traffic" },
  { no: 4, name: "Latency" },
]);

/**
 * @generated from message alerting.CachedState
 */
export class CachedState extends Message<CachedState> {
  /**
   * @generated from field: bool healthy = 1;
   */
  healthy = false;

  /**
   * @generated from field: bool firing = 2;
   */
  firing = false;

  /**
   * @generated from field: google.protobuf.Timestamp timestamp = 3;
   */
  timestamp?: Timestamp;

  constructor(data?: PartialMessage<CachedState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.CachedState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "healthy", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "firing", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "timestamp", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CachedState {
    return new CachedState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CachedState {
    return new CachedState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CachedState {
    return new CachedState().fromJsonString(jsonString, options);
  }

  static equals(a: CachedState | PlainMessage<CachedState> | undefined, b: CachedState | PlainMessage<CachedState> | undefined): boolean {
    return proto3.util.equals(CachedState, a, b);
  }
}

/**
 * @generated from message alerting.IncidentIntervals
 */
export class IncidentIntervals extends Message<IncidentIntervals> {
  /**
   * @generated from field: repeated alerting.Interval items = 1;
   */
  items: Interval[] = [];

  constructor(data?: PartialMessage<IncidentIntervals>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.IncidentIntervals";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "items", kind: "message", T: Interval, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IncidentIntervals {
    return new IncidentIntervals().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IncidentIntervals {
    return new IncidentIntervals().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IncidentIntervals {
    return new IncidentIntervals().fromJsonString(jsonString, options);
  }

  static equals(a: IncidentIntervals | PlainMessage<IncidentIntervals> | undefined, b: IncidentIntervals | PlainMessage<IncidentIntervals> | undefined): boolean {
    return proto3.util.equals(IncidentIntervals, a, b);
  }
}

/**
 * @generated from message alerting.Interval
 */
export class Interval extends Message<Interval> {
  /**
   * @generated from field: google.protobuf.Timestamp start = 1;
   */
  start?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp end = 2;
   */
  end?: Timestamp;

  /**
   * @generated from field: repeated string fingerprints = 3;
   */
  fingerprints: string[] = [];

  constructor(data?: PartialMessage<Interval>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.Interval";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "start", kind: "message", T: Timestamp },
    { no: 2, name: "end", kind: "message", T: Timestamp },
    { no: 3, name: "fingerprints", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Interval {
    return new Interval().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Interval {
    return new Interval().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Interval {
    return new Interval().fromJsonString(jsonString, options);
  }

  static equals(a: Interval | PlainMessage<Interval> | undefined, b: Interval | PlainMessage<Interval> | undefined): boolean {
    return proto3.util.equals(Interval, a, b);
  }
}

