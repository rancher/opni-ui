// @generated by protoc-gen-es v1.2.1 with parameter "target=ts,import_extension=none"
// @generated from file github.com/rancher/opni/pkg/apis/alerting/v1/alerting.condition.proto (package alerting, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { GoldenSignal, OpniSeverity } from "./alerting_pb";
import { AttachedEndpoints } from "./alerting.endpoint_pb";
import { Timestamp } from "../../../../../../../google/protobuf/timestamp_pb";
import { Reference } from "../../core/v1/core_pb";
import { Duration } from "../../../../../../../google/protobuf/duration_pb";

/**
 * @generated from enum alerting.AlertType
 */
export enum AlertType {
  /**
   * @generated from enum value: System = 0;
   */
  System = 0,

  /**
   * @generated from enum value: KubeState = 1;
   */
  KubeState = 1,

  /**
   * @generated from enum value: CpuSaturation = 2;
   */
  CpuSaturation = 2,

  /**
   * @generated from enum value: MemorySaturation = 3;
   */
  MemorySaturation = 3,

  /**
   * @generated from enum value: FsSaturation = 4;
   */
  FsSaturation = 4,

  /**
   * @generated from enum value: DownstreamCapability = 5;
   */
  DownstreamCapability = 5,

  /**
   * Unimplemented
   *
   * @generated from enum value: Composition = 6;
   */
  Composition = 6,

  /**
   * Unimplemented
   *
   * @generated from enum value: ControlFlow = 7;
   */
  ControlFlow = 7,

  /**
   * @generated from enum value: PrometheusQuery = 9;
   */
  PrometheusQuery = 9,

  /**
   * @generated from enum value: MonitoringBackend = 10;
   */
  MonitoringBackend = 10,
}
// Retrieve enum metadata with: proto3.getEnumType(AlertType)
proto3.util.setEnumType(AlertType, "alerting.AlertType", [
  { no: 0, name: "System" },
  { no: 1, name: "KubeState" },
  { no: 2, name: "CpuSaturation" },
  { no: 3, name: "MemorySaturation" },
  { no: 4, name: "FsSaturation" },
  { no: 5, name: "DownstreamCapability" },
  { no: 6, name: "Composition" },
  { no: 7, name: "ControlFlow" },
  { no: 9, name: "PrometheusQuery" },
  { no: 10, name: "MonitoringBackend" },
]);

/**
 * @generated from enum alerting.CompositionAction
 */
export enum CompositionAction {
  /**
   * @generated from enum value: AND = 0;
   */
  AND = 0,

  /**
   * @generated from enum value: OR = 1;
   */
  OR = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(CompositionAction)
proto3.util.setEnumType(CompositionAction, "alerting.CompositionAction", [
  { no: 0, name: "AND" },
  { no: 1, name: "OR" },
]);

/**
 * @generated from enum alerting.ControlFlowAction
 */
export enum ControlFlowAction {
  /**
   * @generated from enum value: IF_THEN = 0;
   */
  IF_THEN = 0,

  /**
   * @generated from enum value: IF_NOT_THEN = 1;
   */
  IF_NOT_THEN = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(ControlFlowAction)
proto3.util.setEnumType(ControlFlowAction, "alerting.ControlFlowAction", [
  { no: 0, name: "IF_THEN" },
  { no: 1, name: "IF_NOT_THEN" },
]);

/**
 * From least important to most important, for logical comparisons
 *
 * @generated from enum alerting.AlertConditionState
 */
export enum AlertConditionState {
  /**
   * @generated from enum value: Unkown = 0;
   */
  Unkown = 0,

  /**
   * @generated from enum value: Ok = 1;
   */
  Ok = 1,

  /**
   * @generated from enum value: Pending = 2;
   */
  Pending = 2,

  /**
   * @generated from enum value: Firing = 3;
   */
  Firing = 3,

  /**
   * @generated from enum value: Silenced = 4;
   */
  Silenced = 4,

  /**
   * @generated from enum value: Invalidated = 5;
   */
  Invalidated = 5,
}
// Retrieve enum metadata with: proto3.getEnumType(AlertConditionState)
proto3.util.setEnumType(AlertConditionState, "alerting.AlertConditionState", [
  { no: 0, name: "Unkown" },
  { no: 1, name: "Ok" },
  { no: 2, name: "Pending" },
  { no: 3, name: "Firing" },
  { no: 4, name: "Silenced" },
  { no: 5, name: "Invalidated" },
]);

/**
 * @generated from enum alerting.TimelineType
 */
export enum TimelineType {
  /**
   * do not show, backend error 
   *
   * @generated from enum value: Timeline_Unknown = 0;
   */
  Timeline_Unknown = 0,

  /**
   * red
   *
   * @generated from enum value: Timeline_Alerting = 1;
   */
  Timeline_Alerting = 1,

  /**
   * blue?
   *
   * @generated from enum value: Timeline_Silenced = 2;
   */
  Timeline_Silenced = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(TimelineType)
proto3.util.setEnumType(TimelineType, "alerting.TimelineType", [
  { no: 0, name: "Timeline_Unknown" },
  { no: 1, name: "Timeline_Alerting" },
  { no: 2, name: "Timeline_Silenced" },
]);

/**
 * @generated from message alerting.ListStatusRequest
 */
export class ListStatusRequest extends Message<ListStatusRequest> {
  /**
   * @generated from field: alerting.ListAlertConditionRequest itemFilter = 1;
   */
  itemFilter?: ListAlertConditionRequest;

  /**
   * @generated from field: repeated alerting.AlertConditionState states = 2;
   */
  states: AlertConditionState[] = [];

  constructor(data?: PartialMessage<ListStatusRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.ListStatusRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "itemFilter", kind: "message", T: ListAlertConditionRequest },
    { no: 2, name: "states", kind: "enum", T: proto3.getEnumType(AlertConditionState), repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListStatusRequest {
    return new ListStatusRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListStatusRequest {
    return new ListStatusRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListStatusRequest {
    return new ListStatusRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListStatusRequest | PlainMessage<ListStatusRequest> | undefined, b: ListStatusRequest | PlainMessage<ListStatusRequest> | undefined): boolean {
    return proto3.util.equals(ListStatusRequest, a, b);
  }
}

/**
 * @generated from message alerting.ListStatusResponse
 */
export class ListStatusResponse extends Message<ListStatusResponse> {
  /**
   * @generated from field: map<string, alerting.AlertConditionWithStatus> alertConditions = 1;
   */
  alertConditions: { [key: string]: AlertConditionWithStatus } = {};

  constructor(data?: PartialMessage<ListStatusResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.ListStatusResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "alertConditions", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: AlertConditionWithStatus} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListStatusResponse {
    return new ListStatusResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListStatusResponse {
    return new ListStatusResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListStatusResponse {
    return new ListStatusResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListStatusResponse | PlainMessage<ListStatusResponse> | undefined, b: ListStatusResponse | PlainMessage<ListStatusResponse> | undefined): boolean {
    return proto3.util.equals(ListStatusResponse, a, b);
  }
}

/**
 * @generated from message alerting.AlertConditionWithStatus
 */
export class AlertConditionWithStatus extends Message<AlertConditionWithStatus> {
  /**
   * @generated from field: alerting.AlertCondition alertCondition = 1;
   */
  alertCondition?: AlertCondition;

  /**
   * @generated from field: alerting.AlertStatusResponse status = 2;
   */
  status?: AlertStatusResponse;

  constructor(data?: PartialMessage<AlertConditionWithStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.AlertConditionWithStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "alertCondition", kind: "message", T: AlertCondition },
    { no: 2, name: "status", kind: "message", T: AlertStatusResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AlertConditionWithStatus {
    return new AlertConditionWithStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AlertConditionWithStatus {
    return new AlertConditionWithStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AlertConditionWithStatus {
    return new AlertConditionWithStatus().fromJsonString(jsonString, options);
  }

  static equals(a: AlertConditionWithStatus | PlainMessage<AlertConditionWithStatus> | undefined, b: AlertConditionWithStatus | PlainMessage<AlertConditionWithStatus> | undefined): boolean {
    return proto3.util.equals(AlertConditionWithStatus, a, b);
  }
}

/**
 * @generated from message alerting.AlertCondition
 */
export class AlertCondition extends Message<AlertCondition> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string description = 2;
   */
  description = "";

  /**
   * @generated from field: repeated string labels = 3;
   */
  labels: string[] = [];

  /**
   * @generated from field: alerting.OpniSeverity severity = 4;
   */
  severity = OpniSeverity.Info;

  /**
   * @generated from field: alerting.AlertTypeDetails alertType = 5;
   */
  alertType?: AlertTypeDetails;

  /**
   * @generated from field: alerting.AttachedEndpoints attachedEndpoints = 6;
   */
  attachedEndpoints?: AttachedEndpoints;

  /**
   * Set & Unset via the silence API
   *
   * @generated from field: alerting.SilenceInfo silence = 7;
   */
  silence?: SilenceInfo;

  /**
   * the object id 
   *
   * @generated from field: google.protobuf.Timestamp lastUpdated = 8;
   */
  lastUpdated?: Timestamp;

  /**
   * @generated from field: string id = 9;
   */
  id = "";

  /**
   * Explicit field where the golden signal is set
   *
   * @generated from field: alerting.GoldenSignal goldenSignal = 10;
   */
  goldenSignal = GoldenSignal.Custom;

  /**
   * overrides the String type of AlertType Details for use in the UI
   *
   * @generated from field: string overrideType = 11;
   */
  overrideType = "";

  constructor(data?: PartialMessage<AlertCondition>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.AlertCondition";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "labels", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "severity", kind: "enum", T: proto3.getEnumType(OpniSeverity) },
    { no: 5, name: "alertType", kind: "message", T: AlertTypeDetails },
    { no: 6, name: "attachedEndpoints", kind: "message", T: AttachedEndpoints },
    { no: 7, name: "silence", kind: "message", T: SilenceInfo },
    { no: 8, name: "lastUpdated", kind: "message", T: Timestamp },
    { no: 9, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "goldenSignal", kind: "enum", T: proto3.getEnumType(GoldenSignal) },
    { no: 11, name: "overrideType", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AlertCondition {
    return new AlertCondition().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AlertCondition {
    return new AlertCondition().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AlertCondition {
    return new AlertCondition().fromJsonString(jsonString, options);
  }

  static equals(a: AlertCondition | PlainMessage<AlertCondition> | undefined, b: AlertCondition | PlainMessage<AlertCondition> | undefined): boolean {
    return proto3.util.equals(AlertCondition, a, b);
  }
}

/**
 * enum will map to an object of available choices
 *
 * @generated from message alerting.AlertDetailChoicesRequest
 */
export class AlertDetailChoicesRequest extends Message<AlertDetailChoicesRequest> {
  /**
   * @generated from field: alerting.AlertType alertType = 1;
   */
  alertType = AlertType.System;

  constructor(data?: PartialMessage<AlertDetailChoicesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.AlertDetailChoicesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "alertType", kind: "enum", T: proto3.getEnumType(AlertType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AlertDetailChoicesRequest {
    return new AlertDetailChoicesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AlertDetailChoicesRequest {
    return new AlertDetailChoicesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AlertDetailChoicesRequest {
    return new AlertDetailChoicesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AlertDetailChoicesRequest | PlainMessage<AlertDetailChoicesRequest> | undefined, b: AlertDetailChoicesRequest | PlainMessage<AlertDetailChoicesRequest> | undefined): boolean {
    return proto3.util.equals(AlertDetailChoicesRequest, a, b);
  }
}

/**
 * @generated from message alerting.AlertDetailChoicesResponse
 */
export class AlertDetailChoicesResponse extends Message<AlertDetailChoicesResponse> {
  /**
   * @generated from field: repeated alerting.AlertTypeDetails choices = 1;
   */
  choices: AlertTypeDetails[] = [];

  constructor(data?: PartialMessage<AlertDetailChoicesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.AlertDetailChoicesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "choices", kind: "message", T: AlertTypeDetails, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AlertDetailChoicesResponse {
    return new AlertDetailChoicesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AlertDetailChoicesResponse {
    return new AlertDetailChoicesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AlertDetailChoicesResponse {
    return new AlertDetailChoicesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AlertDetailChoicesResponse | PlainMessage<AlertDetailChoicesResponse> | undefined, b: AlertDetailChoicesResponse | PlainMessage<AlertDetailChoicesResponse> | undefined): boolean {
    return proto3.util.equals(AlertDetailChoicesResponse, a, b);
  }
}

/**
 * @generated from message alerting.AlertTypeDetails
 */
export class AlertTypeDetails extends Message<AlertTypeDetails> {
  /**
   * @generated from oneof alerting.AlertTypeDetails.type
   */
  type: {
    /**
     * agent disconnect : golden signal -> errors
     *
     * @generated from field: alerting.AlertConditionSystem system = 1;
     */
    value: AlertConditionSystem;
    case: "system";
  } | {
    /**
     * kube state : golden signal -> errors
     *
     * @generated from field: alerting.AlertConditionKubeState kubeState = 2;
     */
    value: AlertConditionKubeState;
    case: "kubeState";
  } | {
    /**
     * not implemented
     *
     * @generated from field: alerting.AlertConditionComposition composition = 3;
     */
    value: AlertConditionComposition;
    case: "composition";
  } | {
    /**
     * not implemented
     *
     * @generated from field: alerting.AlertConditionControlFlow controlFlow = 4;
     */
    value: AlertConditionControlFlow;
    case: "controlFlow";
  } | {
    /**
     * cpu saturation : golden signal -> saturation
     *
     * @generated from field: alerting.AlertConditionCPUSaturation cpu = 5;
     */
    value: AlertConditionCPUSaturation;
    case: "cpu";
  } | {
    /**
     * memory saturation : golden signal -> saturation
     *
     * @generated from field: alerting.AlertConditionMemorySaturation memory = 6;
     */
    value: AlertConditionMemorySaturation;
    case: "memory";
  } | {
    /**
     * fs saturation : golden signal -> saturation
     *
     * @generated from field: alerting.AlertConditionFilesystemSaturation fs = 8;
     */
    value: AlertConditionFilesystemSaturation;
    case: "fs";
  } | {
    /**
     * no golden signal; custom
     *
     * @generated from field: alerting.AlertConditionPrometheusQuery prometheusQuery = 9;
     */
    value: AlertConditionPrometheusQuery;
    case: "prometheusQuery";
  } | {
    /**
     * agent downstream capability alerts
     *
     * @generated from field: alerting.AlertConditionDownstreamCapability downstreamCapability = 10;
     */
    value: AlertConditionDownstreamCapability;
    case: "downstreamCapability";
  } | {
    /**
     * monitoring backend alerts
     *
     * @generated from field: alerting.AlertConditionMonitoringBackend monitoringBackend = 11;
     */
    value: AlertConditionMonitoringBackend;
    case: "monitoringBackend";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<AlertTypeDetails>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.AlertTypeDetails";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "system", kind: "message", T: AlertConditionSystem, oneof: "type" },
    { no: 2, name: "kubeState", kind: "message", T: AlertConditionKubeState, oneof: "type" },
    { no: 3, name: "composition", kind: "message", T: AlertConditionComposition, oneof: "type" },
    { no: 4, name: "controlFlow", kind: "message", T: AlertConditionControlFlow, oneof: "type" },
    { no: 5, name: "cpu", kind: "message", T: AlertConditionCPUSaturation, oneof: "type" },
    { no: 6, name: "memory", kind: "message", T: AlertConditionMemorySaturation, oneof: "type" },
    { no: 8, name: "fs", kind: "message", T: AlertConditionFilesystemSaturation, oneof: "type" },
    { no: 9, name: "prometheusQuery", kind: "message", T: AlertConditionPrometheusQuery, oneof: "type" },
    { no: 10, name: "downstreamCapability", kind: "message", T: AlertConditionDownstreamCapability, oneof: "type" },
    { no: 11, name: "monitoringBackend", kind: "message", T: AlertConditionMonitoringBackend, oneof: "type" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AlertTypeDetails {
    return new AlertTypeDetails().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AlertTypeDetails {
    return new AlertTypeDetails().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AlertTypeDetails {
    return new AlertTypeDetails().fromJsonString(jsonString, options);
  }

  static equals(a: AlertTypeDetails | PlainMessage<AlertTypeDetails> | undefined, b: AlertTypeDetails | PlainMessage<AlertTypeDetails> | undefined): boolean {
    return proto3.util.equals(AlertTypeDetails, a, b);
  }
}

/**
 * @generated from message alerting.ListAlertTypeDetails
 */
export class ListAlertTypeDetails extends Message<ListAlertTypeDetails> {
  /**
   * @generated from oneof alerting.ListAlertTypeDetails.type
   */
  type: {
    /**
     * @generated from field: alerting.ListAlertConditionSystem system = 1;
     */
    value: ListAlertConditionSystem;
    case: "system";
  } | {
    /**
     * @generated from field: alerting.ListAlertConditionKubeState kubeState = 2;
     */
    value: ListAlertConditionKubeState;
    case: "kubeState";
  } | {
    /**
     * @generated from field: alerting.ListAlertConditionComposition composition = 3;
     */
    value: ListAlertConditionComposition;
    case: "composition";
  } | {
    /**
     * @generated from field: alerting.ListAlertConditionControlFlow controlFlow = 4;
     */
    value: ListAlertConditionControlFlow;
    case: "controlFlow";
  } | {
    /**
     * @generated from field: alerting.ListAlertConditionCPUSaturation cpu = 5;
     */
    value: ListAlertConditionCPUSaturation;
    case: "cpu";
  } | {
    /**
     * @generated from field: alerting.ListAlertConditionMemorySaturation memory = 6;
     */
    value: ListAlertConditionMemorySaturation;
    case: "memory";
  } | {
    /**
     * @generated from field: alerting.ListAlertConditionFilesystemSaturation fs = 7;
     */
    value: ListAlertConditionFilesystemSaturation;
    case: "fs";
  } | {
    /**
     * @generated from field: alerting.ListAlertConditionDownstreamCapability downstreamCapability = 8;
     */
    value: ListAlertConditionDownstreamCapability;
    case: "downstreamCapability";
  } | {
    /**
     * @generated from field: alerting.ListAlertConditionPrometheusQuery prometheusQuery = 9;
     */
    value: ListAlertConditionPrometheusQuery;
    case: "prometheusQuery";
  } | {
    /**
     * @generated from field: alerting.ListAlertConditionMonitoringBackend monitoringBackend = 10;
     */
    value: ListAlertConditionMonitoringBackend;
    case: "monitoringBackend";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ListAlertTypeDetails>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.ListAlertTypeDetails";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "system", kind: "message", T: ListAlertConditionSystem, oneof: "type" },
    { no: 2, name: "kubeState", kind: "message", T: ListAlertConditionKubeState, oneof: "type" },
    { no: 3, name: "composition", kind: "message", T: ListAlertConditionComposition, oneof: "type" },
    { no: 4, name: "controlFlow", kind: "message", T: ListAlertConditionControlFlow, oneof: "type" },
    { no: 5, name: "cpu", kind: "message", T: ListAlertConditionCPUSaturation, oneof: "type" },
    { no: 6, name: "memory", kind: "message", T: ListAlertConditionMemorySaturation, oneof: "type" },
    { no: 7, name: "fs", kind: "message", T: ListAlertConditionFilesystemSaturation, oneof: "type" },
    { no: 8, name: "downstreamCapability", kind: "message", T: ListAlertConditionDownstreamCapability, oneof: "type" },
    { no: 9, name: "prometheusQuery", kind: "message", T: ListAlertConditionPrometheusQuery, oneof: "type" },
    { no: 10, name: "monitoringBackend", kind: "message", T: ListAlertConditionMonitoringBackend, oneof: "type" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAlertTypeDetails {
    return new ListAlertTypeDetails().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAlertTypeDetails {
    return new ListAlertTypeDetails().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAlertTypeDetails {
    return new ListAlertTypeDetails().fromJsonString(jsonString, options);
  }

  static equals(a: ListAlertTypeDetails | PlainMessage<ListAlertTypeDetails> | undefined, b: ListAlertTypeDetails | PlainMessage<ListAlertTypeDetails> | undefined): boolean {
    return proto3.util.equals(ListAlertTypeDetails, a, b);
  }
}

/**
 * @generated from message alerting.ListAlertConditionPrometheusQuery
 */
export class ListAlertConditionPrometheusQuery extends Message<ListAlertConditionPrometheusQuery> {
  /**
   * @generated from field: repeated string clusters = 1;
   */
  clusters: string[] = [];

  constructor(data?: PartialMessage<ListAlertConditionPrometheusQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.ListAlertConditionPrometheusQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "clusters", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAlertConditionPrometheusQuery {
    return new ListAlertConditionPrometheusQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAlertConditionPrometheusQuery {
    return new ListAlertConditionPrometheusQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAlertConditionPrometheusQuery {
    return new ListAlertConditionPrometheusQuery().fromJsonString(jsonString, options);
  }

  static equals(a: ListAlertConditionPrometheusQuery | PlainMessage<ListAlertConditionPrometheusQuery> | undefined, b: ListAlertConditionPrometheusQuery | PlainMessage<ListAlertConditionPrometheusQuery> | undefined): boolean {
    return proto3.util.equals(ListAlertConditionPrometheusQuery, a, b);
  }
}

/**
 * @generated from message alerting.AlertConditionSystem
 */
export class AlertConditionSystem extends Message<AlertConditionSystem> {
  /**
   * same as clusterId
   *
   * @generated from field: core.Reference clusterId = 1;
   */
  clusterId?: Reference;

  /**
   * after how long should we alert on disconnect?
   *
   * @generated from field: google.protobuf.Duration timeout = 2;
   */
  timeout?: Duration;

  constructor(data?: PartialMessage<AlertConditionSystem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.AlertConditionSystem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "clusterId", kind: "message", T: Reference },
    { no: 2, name: "timeout", kind: "message", T: Duration },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AlertConditionSystem {
    return new AlertConditionSystem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AlertConditionSystem {
    return new AlertConditionSystem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AlertConditionSystem {
    return new AlertConditionSystem().fromJsonString(jsonString, options);
  }

  static equals(a: AlertConditionSystem | PlainMessage<AlertConditionSystem> | undefined, b: AlertConditionSystem | PlainMessage<AlertConditionSystem> | undefined): boolean {
    return proto3.util.equals(AlertConditionSystem, a, b);
  }
}

/**
 * @generated from message alerting.ListAlertConditionSystem
 */
export class ListAlertConditionSystem extends Message<ListAlertConditionSystem> {
  /**
   * clusters we can apply this to
   *
   * @generated from field: repeated string agentIds = 1;
   */
  agentIds: string[] = [];

  constructor(data?: PartialMessage<ListAlertConditionSystem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.ListAlertConditionSystem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "agentIds", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAlertConditionSystem {
    return new ListAlertConditionSystem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAlertConditionSystem {
    return new ListAlertConditionSystem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAlertConditionSystem {
    return new ListAlertConditionSystem().fromJsonString(jsonString, options);
  }

  static equals(a: ListAlertConditionSystem | PlainMessage<ListAlertConditionSystem> | undefined, b: ListAlertConditionSystem | PlainMessage<ListAlertConditionSystem> | undefined): boolean {
    return proto3.util.equals(ListAlertConditionSystem, a, b);
  }
}

/**
 * Requires kube state metrics, otherwise the list of choices will be empty
 *
 * @generated from message alerting.AlertConditionKubeState
 */
export class AlertConditionKubeState extends Message<AlertConditionKubeState> {
  /**
   * @generated from field: string clusterId = 1;
   */
  clusterId = "";

  /**
   * must be one of the listed kube objects
   *
   * @generated from field: string objectType = 2;
   */
  objectType = "";

  /**
   * kubernetes object name
   *
   * @generated from field: string objectName = 3;
   */
  objectName = "";

  /**
   * kubernetes namespace
   *
   * @generated from field: string namespace = 4;
   */
  namespace = "";

  /**
   * must be one of the listed kube states
   *
   * @generated from field: string state = 5;
   */
  state = "";

  /**
   * @generated from field: google.protobuf.Duration for = 6;
   */
  for?: Duration;

  constructor(data?: PartialMessage<AlertConditionKubeState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.AlertConditionKubeState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "clusterId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "objectType", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "objectName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "state", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "for", kind: "message", T: Duration },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AlertConditionKubeState {
    return new AlertConditionKubeState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AlertConditionKubeState {
    return new AlertConditionKubeState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AlertConditionKubeState {
    return new AlertConditionKubeState().fromJsonString(jsonString, options);
  }

  static equals(a: AlertConditionKubeState | PlainMessage<AlertConditionKubeState> | undefined, b: AlertConditionKubeState | PlainMessage<AlertConditionKubeState> | undefined): boolean {
    return proto3.util.equals(AlertConditionKubeState, a, b);
  }
}

/**
 * clusters --> resourceType --> namespace --> resourceName
 *
 * @generated from message alerting.ListAlertConditionKubeState
 */
export class ListAlertConditionKubeState extends Message<ListAlertConditionKubeState> {
  /**
   * @generated from field: map<string, alerting.KubeObjectGroups> clusters = 1;
   */
  clusters: { [key: string]: KubeObjectGroups } = {};

  /**
   * @generated from field: repeated string states = 2;
   */
  states: string[] = [];

  /**
   * @generated from field: repeated google.protobuf.Duration fors = 3;
   */
  fors: Duration[] = [];

  constructor(data?: PartialMessage<ListAlertConditionKubeState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.ListAlertConditionKubeState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "clusters", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: KubeObjectGroups} },
    { no: 2, name: "states", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "fors", kind: "message", T: Duration, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAlertConditionKubeState {
    return new ListAlertConditionKubeState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAlertConditionKubeState {
    return new ListAlertConditionKubeState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAlertConditionKubeState {
    return new ListAlertConditionKubeState().fromJsonString(jsonString, options);
  }

  static equals(a: ListAlertConditionKubeState | PlainMessage<ListAlertConditionKubeState> | undefined, b: ListAlertConditionKubeState | PlainMessage<ListAlertConditionKubeState> | undefined): boolean {
    return proto3.util.equals(ListAlertConditionKubeState, a, b);
  }
}

/**
 * Defaults :
 * - cpuState : "user", "system", "guest" selected
 *
 * @generated from message alerting.AlertConditionCPUSaturation
 */
export class AlertConditionCPUSaturation extends Message<AlertConditionCPUSaturation> {
  /**
   * @generated from field: core.Reference clusterId = 1;
   */
  clusterId?: Reference;

  /**
   * optional filters for nodes and cores, restrict observation to said nodes or cores,
   * if empty, all nodes and cores are selected
   *
   * @generated from field: map<string, alerting.Cores> nodeCoreFilters = 2;
   */
  nodeCoreFilters: { [key: string]: Cores } = {};

  /**
   * at least one cpu state should be specified
   *
   * @generated from field: repeated string cpuStates = 3;
   */
  cpuStates: string[] = [];

  /**
   * one of "<", ">", "<=", ">=", "=". "!="
   *
   * @generated from field: string operation = 4;
   */
  operation = "";

  /**
   * 0-1
   *
   * @generated from field: float expectedRatio = 5;
   */
  expectedRatio = 0;

  /**
   * @generated from field: google.protobuf.Duration for = 6;
   */
  for?: Duration;

  constructor(data?: PartialMessage<AlertConditionCPUSaturation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.AlertConditionCPUSaturation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "clusterId", kind: "message", T: Reference },
    { no: 2, name: "nodeCoreFilters", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Cores} },
    { no: 3, name: "cpuStates", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "operation", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "expectedRatio", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 6, name: "for", kind: "message", T: Duration },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AlertConditionCPUSaturation {
    return new AlertConditionCPUSaturation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AlertConditionCPUSaturation {
    return new AlertConditionCPUSaturation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AlertConditionCPUSaturation {
    return new AlertConditionCPUSaturation().fromJsonString(jsonString, options);
  }

  static equals(a: AlertConditionCPUSaturation | PlainMessage<AlertConditionCPUSaturation> | undefined, b: AlertConditionCPUSaturation | PlainMessage<AlertConditionCPUSaturation> | undefined): boolean {
    return proto3.util.equals(AlertConditionCPUSaturation, a, b);
  }
}

/**
 * @generated from message alerting.Cores
 */
export class Cores extends Message<Cores> {
  /**
   * @generated from field: repeated int64 items = 1;
   */
  items: bigint[] = [];

  constructor(data?: PartialMessage<Cores>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.Cores";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "items", kind: "scalar", T: 3 /* ScalarType.INT64 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Cores {
    return new Cores().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Cores {
    return new Cores().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Cores {
    return new Cores().fromJsonString(jsonString, options);
  }

  static equals(a: Cores | PlainMessage<Cores> | undefined, b: Cores | PlainMessage<Cores> | undefined): boolean {
    return proto3.util.equals(Cores, a, b);
  }
}

/**
 * @generated from message alerting.ListAlertConditionCPUSaturation
 */
export class ListAlertConditionCPUSaturation extends Message<ListAlertConditionCPUSaturation> {
  /**
   * clusters -> node (empty selection defaults to all) -> (cpus, cpu_state)
   *
   * @generated from field: map<string, alerting.CpuNodeGroup> clusters = 1;
   */
  clusters: { [key: string]: CpuNodeGroup } = {};

  /**
   * cpu state, one of : 
   * "user": The time spent in userland
   * "system": The time spent in the kernel
   * "iowait": Time spent waiting for I/O
   * "idle": Time the CPU had nothing to do
   * "irq" : Time servicing interrupts
   * "softirq": Time servicing interrupts
   * "guest" : If you are running VMs, the CPU they use
   * "steal" : If you are a VM, time other VMs "stole" from your CPUs
   *
   * @generated from field: repeated string cpuStates = 2;
   */
  cpuStates: string[] = [];

  constructor(data?: PartialMessage<ListAlertConditionCPUSaturation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.ListAlertConditionCPUSaturation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "clusters", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: CpuNodeGroup} },
    { no: 2, name: "cpuStates", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAlertConditionCPUSaturation {
    return new ListAlertConditionCPUSaturation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAlertConditionCPUSaturation {
    return new ListAlertConditionCPUSaturation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAlertConditionCPUSaturation {
    return new ListAlertConditionCPUSaturation().fromJsonString(jsonString, options);
  }

  static equals(a: ListAlertConditionCPUSaturation | PlainMessage<ListAlertConditionCPUSaturation> | undefined, b: ListAlertConditionCPUSaturation | PlainMessage<ListAlertConditionCPUSaturation> | undefined): boolean {
    return proto3.util.equals(ListAlertConditionCPUSaturation, a, b);
  }
}

/**
 * @generated from message alerting.CpuNodeGroup
 */
export class CpuNodeGroup extends Message<CpuNodeGroup> {
  /**
   * @generated from field: map<string, alerting.CpuInfo> nodes = 1;
   */
  nodes: { [key: string]: CpuInfo } = {};

  constructor(data?: PartialMessage<CpuNodeGroup>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.CpuNodeGroup";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "nodes", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: CpuInfo} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CpuNodeGroup {
    return new CpuNodeGroup().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CpuNodeGroup {
    return new CpuNodeGroup().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CpuNodeGroup {
    return new CpuNodeGroup().fromJsonString(jsonString, options);
  }

  static equals(a: CpuNodeGroup | PlainMessage<CpuNodeGroup> | undefined, b: CpuNodeGroup | PlainMessage<CpuNodeGroup> | undefined): boolean {
    return proto3.util.equals(CpuNodeGroup, a, b);
  }
}

/**
 * @generated from message alerting.CpuInfo
 */
export class CpuInfo extends Message<CpuInfo> {
  /**
   * cores
   *
   * @generated from field: repeated int64 coreIds = 1;
   */
  coreIds: bigint[] = [];

  constructor(data?: PartialMessage<CpuInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.CpuInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "coreIds", kind: "scalar", T: 3 /* ScalarType.INT64 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CpuInfo {
    return new CpuInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CpuInfo {
    return new CpuInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CpuInfo {
    return new CpuInfo().fromJsonString(jsonString, options);
  }

  static equals(a: CpuInfo | PlainMessage<CpuInfo> | undefined, b: CpuInfo | PlainMessage<CpuInfo> | undefined): boolean {
    return proto3.util.equals(CpuInfo, a, b);
  }
}

/**
 * @generated from message alerting.AlertConditionMemorySaturation
 */
export class AlertConditionMemorySaturation extends Message<AlertConditionMemorySaturation> {
  /**
   * @generated from field: core.Reference clusterId = 1;
   */
  clusterId?: Reference;

  /**
   * nodes to devices
   *
   * @generated from field: map<string, alerting.MemoryInfo> nodeMemoryFilters = 2;
   */
  nodeMemoryFilters: { [key: string]: MemoryInfo } = {};

  /**
   * at least one usageType is required
   *
   * @generated from field: repeated string usageTypes = 3;
   */
  usageTypes: string[] = [];

  /**
   * one of "<", ">", "<=", ">=", "=". "!="
   *
   * @generated from field: string operation = 4;
   */
  operation = "";

  /**
   * @generated from field: double expectedRatio = 5;
   */
  expectedRatio = 0;

  /**
   * @generated from field: google.protobuf.Duration for = 6;
   */
  for?: Duration;

  constructor(data?: PartialMessage<AlertConditionMemorySaturation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.AlertConditionMemorySaturation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "clusterId", kind: "message", T: Reference },
    { no: 2, name: "nodeMemoryFilters", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: MemoryInfo} },
    { no: 3, name: "usageTypes", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "operation", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "expectedRatio", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 6, name: "for", kind: "message", T: Duration },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AlertConditionMemorySaturation {
    return new AlertConditionMemorySaturation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AlertConditionMemorySaturation {
    return new AlertConditionMemorySaturation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AlertConditionMemorySaturation {
    return new AlertConditionMemorySaturation().fromJsonString(jsonString, options);
  }

  static equals(a: AlertConditionMemorySaturation | PlainMessage<AlertConditionMemorySaturation> | undefined, b: AlertConditionMemorySaturation | PlainMessage<AlertConditionMemorySaturation> | undefined): boolean {
    return proto3.util.equals(AlertConditionMemorySaturation, a, b);
  }
}

/**
 * @generated from message alerting.ListAlertConditionMemorySaturation
 */
export class ListAlertConditionMemorySaturation extends Message<ListAlertConditionMemorySaturation> {
  /**
   * @generated from field: map<string, alerting.MemoryNodeGroup> clusters = 1;
   */
  clusters: { [key: string]: MemoryNodeGroup } = {};

  /**
   * @generated from field: repeated string usageTypes = 2;
   */
  usageTypes: string[] = [];

  constructor(data?: PartialMessage<ListAlertConditionMemorySaturation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.ListAlertConditionMemorySaturation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "clusters", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: MemoryNodeGroup} },
    { no: 2, name: "usageTypes", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAlertConditionMemorySaturation {
    return new ListAlertConditionMemorySaturation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAlertConditionMemorySaturation {
    return new ListAlertConditionMemorySaturation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAlertConditionMemorySaturation {
    return new ListAlertConditionMemorySaturation().fromJsonString(jsonString, options);
  }

  static equals(a: ListAlertConditionMemorySaturation | PlainMessage<ListAlertConditionMemorySaturation> | undefined, b: ListAlertConditionMemorySaturation | PlainMessage<ListAlertConditionMemorySaturation> | undefined): boolean {
    return proto3.util.equals(ListAlertConditionMemorySaturation, a, b);
  }
}

/**
 * @generated from message alerting.MemoryNodeGroup
 */
export class MemoryNodeGroup extends Message<MemoryNodeGroup> {
  /**
   * @generated from field: map<string, alerting.MemoryInfo> nodes = 1;
   */
  nodes: { [key: string]: MemoryInfo } = {};

  constructor(data?: PartialMessage<MemoryNodeGroup>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.MemoryNodeGroup";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "nodes", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: MemoryInfo} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MemoryNodeGroup {
    return new MemoryNodeGroup().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MemoryNodeGroup {
    return new MemoryNodeGroup().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MemoryNodeGroup {
    return new MemoryNodeGroup().fromJsonString(jsonString, options);
  }

  static equals(a: MemoryNodeGroup | PlainMessage<MemoryNodeGroup> | undefined, b: MemoryNodeGroup | PlainMessage<MemoryNodeGroup> | undefined): boolean {
    return proto3.util.equals(MemoryNodeGroup, a, b);
  }
}

/**
 * @generated from message alerting.MemoryInfo
 */
export class MemoryInfo extends Message<MemoryInfo> {
  /**
   * @generated from field: repeated string devices = 2;
   */
  devices: string[] = [];

  constructor(data?: PartialMessage<MemoryInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.MemoryInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "devices", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MemoryInfo {
    return new MemoryInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MemoryInfo {
    return new MemoryInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MemoryInfo {
    return new MemoryInfo().fromJsonString(jsonString, options);
  }

  static equals(a: MemoryInfo | PlainMessage<MemoryInfo> | undefined, b: MemoryInfo | PlainMessage<MemoryInfo> | undefined): boolean {
    return proto3.util.equals(MemoryInfo, a, b);
  }
}

/**
 * @generated from message alerting.AlertConditionFilesystemSaturation
 */
export class AlertConditionFilesystemSaturation extends Message<AlertConditionFilesystemSaturation> {
  /**
   * @generated from field: core.Reference clusterId = 1;
   */
  clusterId?: Reference;

  /**
   * optional filters, if none are set then everything is selected
   *
   * @generated from field: map<string, alerting.FilesystemInfo> nodeFilters = 2;
   */
  nodeFilters: { [key: string]: FilesystemInfo } = {};

  /**
   * one of "<", ">", "<=", ">=", "=". "!="
   *
   * @generated from field: string operation = 3;
   */
  operation = "";

  /**
   * 0-1
   *
   * @generated from field: double expectedRatio = 4;
   */
  expectedRatio = 0;

  /**
   * @generated from field: google.protobuf.Duration for = 5;
   */
  for?: Duration;

  constructor(data?: PartialMessage<AlertConditionFilesystemSaturation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.AlertConditionFilesystemSaturation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "clusterId", kind: "message", T: Reference },
    { no: 2, name: "nodeFilters", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: FilesystemInfo} },
    { no: 3, name: "operation", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "expectedRatio", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 5, name: "for", kind: "message", T: Duration },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AlertConditionFilesystemSaturation {
    return new AlertConditionFilesystemSaturation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AlertConditionFilesystemSaturation {
    return new AlertConditionFilesystemSaturation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AlertConditionFilesystemSaturation {
    return new AlertConditionFilesystemSaturation().fromJsonString(jsonString, options);
  }

  static equals(a: AlertConditionFilesystemSaturation | PlainMessage<AlertConditionFilesystemSaturation> | undefined, b: AlertConditionFilesystemSaturation | PlainMessage<AlertConditionFilesystemSaturation> | undefined): boolean {
    return proto3.util.equals(AlertConditionFilesystemSaturation, a, b);
  }
}

/**
 * @generated from message alerting.ListAlertConditionFilesystemSaturation
 */
export class ListAlertConditionFilesystemSaturation extends Message<ListAlertConditionFilesystemSaturation> {
  /**
   * @generated from field: map<string, alerting.FilesystemNodeGroup> clusters = 1;
   */
  clusters: { [key: string]: FilesystemNodeGroup } = {};

  constructor(data?: PartialMessage<ListAlertConditionFilesystemSaturation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.ListAlertConditionFilesystemSaturation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "clusters", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: FilesystemNodeGroup} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAlertConditionFilesystemSaturation {
    return new ListAlertConditionFilesystemSaturation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAlertConditionFilesystemSaturation {
    return new ListAlertConditionFilesystemSaturation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAlertConditionFilesystemSaturation {
    return new ListAlertConditionFilesystemSaturation().fromJsonString(jsonString, options);
  }

  static equals(a: ListAlertConditionFilesystemSaturation | PlainMessage<ListAlertConditionFilesystemSaturation> | undefined, b: ListAlertConditionFilesystemSaturation | PlainMessage<ListAlertConditionFilesystemSaturation> | undefined): boolean {
    return proto3.util.equals(ListAlertConditionFilesystemSaturation, a, b);
  }
}

/**
 * @generated from message alerting.FilesystemNodeGroup
 */
export class FilesystemNodeGroup extends Message<FilesystemNodeGroup> {
  /**
   * @generated from field: map<string, alerting.FilesystemInfo> nodes = 1;
   */
  nodes: { [key: string]: FilesystemInfo } = {};

  constructor(data?: PartialMessage<FilesystemNodeGroup>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.FilesystemNodeGroup";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "nodes", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: FilesystemInfo} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FilesystemNodeGroup {
    return new FilesystemNodeGroup().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FilesystemNodeGroup {
    return new FilesystemNodeGroup().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FilesystemNodeGroup {
    return new FilesystemNodeGroup().fromJsonString(jsonString, options);
  }

  static equals(a: FilesystemNodeGroup | PlainMessage<FilesystemNodeGroup> | undefined, b: FilesystemNodeGroup | PlainMessage<FilesystemNodeGroup> | undefined): boolean {
    return proto3.util.equals(FilesystemNodeGroup, a, b);
  }
}

/**
 * @generated from message alerting.FilesystemInfo
 */
export class FilesystemInfo extends Message<FilesystemInfo> {
  /**
   * @generated from field: repeated string mountpoints = 1;
   */
  mountpoints: string[] = [];

  /**
   * @generated from field: repeated string devices = 2;
   */
  devices: string[] = [];

  constructor(data?: PartialMessage<FilesystemInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.FilesystemInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "mountpoints", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "devices", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FilesystemInfo {
    return new FilesystemInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FilesystemInfo {
    return new FilesystemInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FilesystemInfo {
    return new FilesystemInfo().fromJsonString(jsonString, options);
  }

  static equals(a: FilesystemInfo | PlainMessage<FilesystemInfo> | undefined, b: FilesystemInfo | PlainMessage<FilesystemInfo> | undefined): boolean {
    return proto3.util.equals(FilesystemInfo, a, b);
  }
}

/**
 * @generated from message alerting.AlertConditionPrometheusQuery
 */
export class AlertConditionPrometheusQuery extends Message<AlertConditionPrometheusQuery> {
  /**
   * @generated from field: core.Reference clusterId = 1;
   */
  clusterId?: Reference;

  /**
   * @generated from field: string query = 2;
   */
  query = "";

  /**
   * @generated from field: google.protobuf.Duration for = 3;
   */
  for?: Duration;

  constructor(data?: PartialMessage<AlertConditionPrometheusQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.AlertConditionPrometheusQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "clusterId", kind: "message", T: Reference },
    { no: 2, name: "query", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "for", kind: "message", T: Duration },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AlertConditionPrometheusQuery {
    return new AlertConditionPrometheusQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AlertConditionPrometheusQuery {
    return new AlertConditionPrometheusQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AlertConditionPrometheusQuery {
    return new AlertConditionPrometheusQuery().fromJsonString(jsonString, options);
  }

  static equals(a: AlertConditionPrometheusQuery | PlainMessage<AlertConditionPrometheusQuery> | undefined, b: AlertConditionPrometheusQuery | PlainMessage<AlertConditionPrometheusQuery> | undefined): boolean {
    return proto3.util.equals(AlertConditionPrometheusQuery, a, b);
  }
}

/**
 * @generated from message alerting.AlertConditionDownstreamCapability
 */
export class AlertConditionDownstreamCapability extends Message<AlertConditionDownstreamCapability> {
  /**
   * @generated from field: core.Reference clusterId = 1;
   */
  clusterId?: Reference;

  /**
   * @generated from field: repeated string capabilityState = 2;
   */
  capabilityState: string[] = [];

  /**
   * @generated from field: google.protobuf.Duration for = 3;
   */
  for?: Duration;

  constructor(data?: PartialMessage<AlertConditionDownstreamCapability>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.AlertConditionDownstreamCapability";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "clusterId", kind: "message", T: Reference },
    { no: 2, name: "capabilityState", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "for", kind: "message", T: Duration },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AlertConditionDownstreamCapability {
    return new AlertConditionDownstreamCapability().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AlertConditionDownstreamCapability {
    return new AlertConditionDownstreamCapability().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AlertConditionDownstreamCapability {
    return new AlertConditionDownstreamCapability().fromJsonString(jsonString, options);
  }

  static equals(a: AlertConditionDownstreamCapability | PlainMessage<AlertConditionDownstreamCapability> | undefined, b: AlertConditionDownstreamCapability | PlainMessage<AlertConditionDownstreamCapability> | undefined): boolean {
    return proto3.util.equals(AlertConditionDownstreamCapability, a, b);
  }
}

/**
 * @generated from message alerting.ListAlertConditionDownstreamCapability
 */
export class ListAlertConditionDownstreamCapability extends Message<ListAlertConditionDownstreamCapability> {
  /**
   * @generated from field: map<string, alerting.CapabilityState> clusters = 1;
   */
  clusters: { [key: string]: CapabilityState } = {};

  constructor(data?: PartialMessage<ListAlertConditionDownstreamCapability>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.ListAlertConditionDownstreamCapability";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "clusters", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: CapabilityState} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAlertConditionDownstreamCapability {
    return new ListAlertConditionDownstreamCapability().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAlertConditionDownstreamCapability {
    return new ListAlertConditionDownstreamCapability().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAlertConditionDownstreamCapability {
    return new ListAlertConditionDownstreamCapability().fromJsonString(jsonString, options);
  }

  static equals(a: ListAlertConditionDownstreamCapability | PlainMessage<ListAlertConditionDownstreamCapability> | undefined, b: ListAlertConditionDownstreamCapability | PlainMessage<ListAlertConditionDownstreamCapability> | undefined): boolean {
    return proto3.util.equals(ListAlertConditionDownstreamCapability, a, b);
  }
}

/**
 * @generated from message alerting.CapabilityState
 */
export class CapabilityState extends Message<CapabilityState> {
  /**
   * @generated from field: repeated string states = 1;
   */
  states: string[] = [];

  constructor(data?: PartialMessage<CapabilityState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.CapabilityState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "states", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CapabilityState {
    return new CapabilityState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CapabilityState {
    return new CapabilityState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CapabilityState {
    return new CapabilityState().fromJsonString(jsonString, options);
  }

  static equals(a: CapabilityState | PlainMessage<CapabilityState> | undefined, b: CapabilityState | PlainMessage<CapabilityState> | undefined): boolean {
    return proto3.util.equals(CapabilityState, a, b);
  }
}

/**
 * @generated from message alerting.AlertConditionMonitoringBackend
 */
export class AlertConditionMonitoringBackend extends Message<AlertConditionMonitoringBackend> {
  /**
   * this will alert if these any of these components are unhealthy
   *
   * @generated from field: repeated string backendComponents = 1;
   */
  backendComponents: string[] = [];

  /**
   * @generated from field: google.protobuf.Duration for = 2;
   */
  for?: Duration;

  /**
   * @generated from field: core.Reference clusterId = 3;
   */
  clusterId?: Reference;

  constructor(data?: PartialMessage<AlertConditionMonitoringBackend>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.AlertConditionMonitoringBackend";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "backendComponents", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "for", kind: "message", T: Duration },
    { no: 3, name: "clusterId", kind: "message", T: Reference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AlertConditionMonitoringBackend {
    return new AlertConditionMonitoringBackend().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AlertConditionMonitoringBackend {
    return new AlertConditionMonitoringBackend().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AlertConditionMonitoringBackend {
    return new AlertConditionMonitoringBackend().fromJsonString(jsonString, options);
  }

  static equals(a: AlertConditionMonitoringBackend | PlainMessage<AlertConditionMonitoringBackend> | undefined, b: AlertConditionMonitoringBackend | PlainMessage<AlertConditionMonitoringBackend> | undefined): boolean {
    return proto3.util.equals(AlertConditionMonitoringBackend, a, b);
  }
}

/**
 * @generated from message alerting.ListAlertConditionMonitoringBackend
 */
export class ListAlertConditionMonitoringBackend extends Message<ListAlertConditionMonitoringBackend> {
  /**
   * @generated from field: repeated string backendComponents = 1;
   */
  backendComponents: string[] = [];

  constructor(data?: PartialMessage<ListAlertConditionMonitoringBackend>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.ListAlertConditionMonitoringBackend";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "backendComponents", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAlertConditionMonitoringBackend {
    return new ListAlertConditionMonitoringBackend().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAlertConditionMonitoringBackend {
    return new ListAlertConditionMonitoringBackend().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAlertConditionMonitoringBackend {
    return new ListAlertConditionMonitoringBackend().fromJsonString(jsonString, options);
  }

  static equals(a: ListAlertConditionMonitoringBackend | PlainMessage<ListAlertConditionMonitoringBackend> | undefined, b: ListAlertConditionMonitoringBackend | PlainMessage<ListAlertConditionMonitoringBackend> | undefined): boolean {
    return proto3.util.equals(ListAlertConditionMonitoringBackend, a, b);
  }
}

/**
 * @generated from message alerting.StringArray
 */
export class StringArray extends Message<StringArray> {
  /**
   * @generated from field: repeated string items = 1;
   */
  items: string[] = [];

  constructor(data?: PartialMessage<StringArray>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.StringArray";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "items", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StringArray {
    return new StringArray().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StringArray {
    return new StringArray().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StringArray {
    return new StringArray().fromJsonString(jsonString, options);
  }

  static equals(a: StringArray | PlainMessage<StringArray> | undefined, b: StringArray | PlainMessage<StringArray> | undefined): boolean {
    return proto3.util.equals(StringArray, a, b);
  }
}

/**
 * @generated from message alerting.ObjectList
 */
export class ObjectList extends Message<ObjectList> {
  /**
   * @generated from field: repeated string objects = 1;
   */
  objects: string[] = [];

  constructor(data?: PartialMessage<ObjectList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.ObjectList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "objects", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ObjectList {
    return new ObjectList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ObjectList {
    return new ObjectList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ObjectList {
    return new ObjectList().fromJsonString(jsonString, options);
  }

  static equals(a: ObjectList | PlainMessage<ObjectList> | undefined, b: ObjectList | PlainMessage<ObjectList> | undefined): boolean {
    return proto3.util.equals(ObjectList, a, b);
  }
}

/**
 * @generated from message alerting.NamespaceObjects
 */
export class NamespaceObjects extends Message<NamespaceObjects> {
  /**
   * @generated from field: map<string, alerting.ObjectList> namespaces = 1;
   */
  namespaces: { [key: string]: ObjectList } = {};

  constructor(data?: PartialMessage<NamespaceObjects>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.NamespaceObjects";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "namespaces", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: ObjectList} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NamespaceObjects {
    return new NamespaceObjects().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NamespaceObjects {
    return new NamespaceObjects().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NamespaceObjects {
    return new NamespaceObjects().fromJsonString(jsonString, options);
  }

  static equals(a: NamespaceObjects | PlainMessage<NamespaceObjects> | undefined, b: NamespaceObjects | PlainMessage<NamespaceObjects> | undefined): boolean {
    return proto3.util.equals(NamespaceObjects, a, b);
  }
}

/**
 * @generated from message alerting.KubeObjectGroups
 */
export class KubeObjectGroups extends Message<KubeObjectGroups> {
  /**
   * @generated from field: map<string, alerting.NamespaceObjects> resourceTypes = 1;
   */
  resourceTypes: { [key: string]: NamespaceObjects } = {};

  constructor(data?: PartialMessage<KubeObjectGroups>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.KubeObjectGroups";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "resourceTypes", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: NamespaceObjects} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): KubeObjectGroups {
    return new KubeObjectGroups().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): KubeObjectGroups {
    return new KubeObjectGroups().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): KubeObjectGroups {
    return new KubeObjectGroups().fromJsonString(jsonString, options);
  }

  static equals(a: KubeObjectGroups | PlainMessage<KubeObjectGroups> | undefined, b: KubeObjectGroups | PlainMessage<KubeObjectGroups> | undefined): boolean {
    return proto3.util.equals(KubeObjectGroups, a, b);
  }
}

/**
 * @generated from message alerting.ListSelectAlertInfo
 */
export class ListSelectAlertInfo extends Message<ListSelectAlertInfo> {
  /**
   * @generated from field: alerting.AlertType alertType = 1;
   */
  alertType = AlertType.System;

  constructor(data?: PartialMessage<ListSelectAlertInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.ListSelectAlertInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "alertType", kind: "enum", T: proto3.getEnumType(AlertType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListSelectAlertInfo {
    return new ListSelectAlertInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListSelectAlertInfo {
    return new ListSelectAlertInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListSelectAlertInfo {
    return new ListSelectAlertInfo().fromJsonString(jsonString, options);
  }

  static equals(a: ListSelectAlertInfo | PlainMessage<ListSelectAlertInfo> | undefined, b: ListSelectAlertInfo | PlainMessage<ListSelectAlertInfo> | undefined): boolean {
    return proto3.util.equals(ListSelectAlertInfo, a, b);
  }
}

/**
 * @generated from message alerting.AlertConditionList
 */
export class AlertConditionList extends Message<AlertConditionList> {
  /**
   * @generated from field: repeated alerting.AlertConditionWithId items = 1;
   */
  items: AlertConditionWithId[] = [];

  constructor(data?: PartialMessage<AlertConditionList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.AlertConditionList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "items", kind: "message", T: AlertConditionWithId, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AlertConditionList {
    return new AlertConditionList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AlertConditionList {
    return new AlertConditionList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AlertConditionList {
    return new AlertConditionList().fromJsonString(jsonString, options);
  }

  static equals(a: AlertConditionList | PlainMessage<AlertConditionList> | undefined, b: AlertConditionList | PlainMessage<AlertConditionList> | undefined): boolean {
    return proto3.util.equals(AlertConditionList, a, b);
  }
}

/**
 * @generated from message alerting.AlertConditionComposition
 */
export class AlertConditionComposition extends Message<AlertConditionComposition> {
  /**
   * @generated from field: alerting.CompositionAction action = 1;
   */
  action = CompositionAction.AND;

  /**
   * @generated from field: core.Reference x = 2;
   */
  x?: Reference;

  /**
   * @generated from field: core.Reference y = 3;
   */
  y?: Reference;

  constructor(data?: PartialMessage<AlertConditionComposition>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.AlertConditionComposition";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "action", kind: "enum", T: proto3.getEnumType(CompositionAction) },
    { no: 2, name: "x", kind: "message", T: Reference },
    { no: 3, name: "y", kind: "message", T: Reference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AlertConditionComposition {
    return new AlertConditionComposition().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AlertConditionComposition {
    return new AlertConditionComposition().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AlertConditionComposition {
    return new AlertConditionComposition().fromJsonString(jsonString, options);
  }

  static equals(a: AlertConditionComposition | PlainMessage<AlertConditionComposition> | undefined, b: AlertConditionComposition | PlainMessage<AlertConditionComposition> | undefined): boolean {
    return proto3.util.equals(AlertConditionComposition, a, b);
  }
}

/**
 * @generated from message alerting.ListAlertConditionComposition
 */
export class ListAlertConditionComposition extends Message<ListAlertConditionComposition> {
  /**
   * @generated from field: repeated core.Reference x = 1;
   */
  x: Reference[] = [];

  /**
   * @generated from field: repeated core.Reference y = 2;
   */
  y: Reference[] = [];

  constructor(data?: PartialMessage<ListAlertConditionComposition>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.ListAlertConditionComposition";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "x", kind: "message", T: Reference, repeated: true },
    { no: 2, name: "y", kind: "message", T: Reference, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAlertConditionComposition {
    return new ListAlertConditionComposition().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAlertConditionComposition {
    return new ListAlertConditionComposition().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAlertConditionComposition {
    return new ListAlertConditionComposition().fromJsonString(jsonString, options);
  }

  static equals(a: ListAlertConditionComposition | PlainMessage<ListAlertConditionComposition> | undefined, b: ListAlertConditionComposition | PlainMessage<ListAlertConditionComposition> | undefined): boolean {
    return proto3.util.equals(ListAlertConditionComposition, a, b);
  }
}

/**
 * @generated from message alerting.AlertConditionControlFlow
 */
export class AlertConditionControlFlow extends Message<AlertConditionControlFlow> {
  /**
   * @generated from field: alerting.ControlFlowAction action = 1;
   */
  action = ControlFlowAction.IF_THEN;

  /**
   * @generated from field: core.Reference x = 2;
   */
  x?: Reference;

  /**
   * @generated from field: core.Reference y = 3;
   */
  y?: Reference;

  /**
   * @generated from field: google.protobuf.Duration for = 4;
   */
  for?: Duration;

  constructor(data?: PartialMessage<AlertConditionControlFlow>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.AlertConditionControlFlow";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "action", kind: "enum", T: proto3.getEnumType(ControlFlowAction) },
    { no: 2, name: "x", kind: "message", T: Reference },
    { no: 3, name: "y", kind: "message", T: Reference },
    { no: 4, name: "for", kind: "message", T: Duration },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AlertConditionControlFlow {
    return new AlertConditionControlFlow().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AlertConditionControlFlow {
    return new AlertConditionControlFlow().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AlertConditionControlFlow {
    return new AlertConditionControlFlow().fromJsonString(jsonString, options);
  }

  static equals(a: AlertConditionControlFlow | PlainMessage<AlertConditionControlFlow> | undefined, b: AlertConditionControlFlow | PlainMessage<AlertConditionControlFlow> | undefined): boolean {
    return proto3.util.equals(AlertConditionControlFlow, a, b);
  }
}

/**
 * @generated from message alerting.ListAlertConditionControlFlow
 */
export class ListAlertConditionControlFlow extends Message<ListAlertConditionControlFlow> {
  /**
   * @generated from field: repeated core.Reference x = 1;
   */
  x: Reference[] = [];

  /**
   * @generated from field: repeated core.Reference y = 2;
   */
  y: Reference[] = [];

  /**
   * @generated from field: repeated google.protobuf.Duration fors = 3;
   */
  fors: Duration[] = [];

  constructor(data?: PartialMessage<ListAlertConditionControlFlow>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.ListAlertConditionControlFlow";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "x", kind: "message", T: Reference, repeated: true },
    { no: 2, name: "y", kind: "message", T: Reference, repeated: true },
    { no: 3, name: "fors", kind: "message", T: Duration, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAlertConditionControlFlow {
    return new ListAlertConditionControlFlow().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAlertConditionControlFlow {
    return new ListAlertConditionControlFlow().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAlertConditionControlFlow {
    return new ListAlertConditionControlFlow().fromJsonString(jsonString, options);
  }

  static equals(a: ListAlertConditionControlFlow | PlainMessage<ListAlertConditionControlFlow> | undefined, b: ListAlertConditionControlFlow | PlainMessage<ListAlertConditionControlFlow> | undefined): boolean {
    return proto3.util.equals(ListAlertConditionControlFlow, a, b);
  }
}

/**
 * @generated from message alerting.AlertConditionWithId
 */
export class AlertConditionWithId extends Message<AlertConditionWithId> {
  /**
   * @generated from field: core.Reference id = 1;
   */
  id?: Reference;

  /**
   * @generated from field: alerting.AlertCondition alertCondition = 2;
   */
  alertCondition?: AlertCondition;

  constructor(data?: PartialMessage<AlertConditionWithId>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.AlertConditionWithId";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: Reference },
    { no: 2, name: "alertCondition", kind: "message", T: AlertCondition },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AlertConditionWithId {
    return new AlertConditionWithId().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AlertConditionWithId {
    return new AlertConditionWithId().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AlertConditionWithId {
    return new AlertConditionWithId().fromJsonString(jsonString, options);
  }

  static equals(a: AlertConditionWithId | PlainMessage<AlertConditionWithId> | undefined, b: AlertConditionWithId | PlainMessage<AlertConditionWithId> | undefined): boolean {
    return proto3.util.equals(AlertConditionWithId, a, b);
  }
}

/**
 * @generated from message alerting.ListAlertConditionRequest
 */
export class ListAlertConditionRequest extends Message<ListAlertConditionRequest> {
  /**
   * @generated from field: repeated string clusters = 1;
   */
  clusters: string[] = [];

  /**
   * @generated from field: repeated alerting.OpniSeverity severities = 2;
   */
  severities: OpniSeverity[] = [];

  /**
   * @generated from field: repeated string labels = 3;
   */
  labels: string[] = [];

  /**
   * @generated from field: repeated alerting.AlertType alertTypes = 4;
   */
  alertTypes: AlertType[] = [];

  constructor(data?: PartialMessage<ListAlertConditionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.ListAlertConditionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "clusters", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "severities", kind: "enum", T: proto3.getEnumType(OpniSeverity), repeated: true },
    { no: 3, name: "labels", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "alertTypes", kind: "enum", T: proto3.getEnumType(AlertType), repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAlertConditionRequest {
    return new ListAlertConditionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAlertConditionRequest {
    return new ListAlertConditionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAlertConditionRequest {
    return new ListAlertConditionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListAlertConditionRequest | PlainMessage<ListAlertConditionRequest> | undefined, b: ListAlertConditionRequest | PlainMessage<ListAlertConditionRequest> | undefined): boolean {
    return proto3.util.equals(ListAlertConditionRequest, a, b);
  }
}

/**
 * @generated from message alerting.UpdateAlertConditionRequest
 */
export class UpdateAlertConditionRequest extends Message<UpdateAlertConditionRequest> {
  /**
   * @generated from field: core.Reference id = 1;
   */
  id?: Reference;

  /**
   * @generated from field: alerting.AlertCondition updateAlert = 2;
   */
  updateAlert?: AlertCondition;

  constructor(data?: PartialMessage<UpdateAlertConditionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.UpdateAlertConditionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: Reference },
    { no: 2, name: "updateAlert", kind: "message", T: AlertCondition },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateAlertConditionRequest {
    return new UpdateAlertConditionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateAlertConditionRequest {
    return new UpdateAlertConditionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateAlertConditionRequest {
    return new UpdateAlertConditionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateAlertConditionRequest | PlainMessage<UpdateAlertConditionRequest> | undefined, b: UpdateAlertConditionRequest | PlainMessage<UpdateAlertConditionRequest> | undefined): boolean {
    return proto3.util.equals(UpdateAlertConditionRequest, a, b);
  }
}

/**
 * @generated from message alerting.SilenceRequest
 */
export class SilenceRequest extends Message<SilenceRequest> {
  /**
   * @generated from field: core.Reference conditionId = 1;
   */
  conditionId?: Reference;

  /**
   * @generated from field: google.protobuf.Duration duration = 2;
   */
  duration?: Duration;

  constructor(data?: PartialMessage<SilenceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.SilenceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "conditionId", kind: "message", T: Reference },
    { no: 2, name: "duration", kind: "message", T: Duration },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SilenceRequest {
    return new SilenceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SilenceRequest {
    return new SilenceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SilenceRequest {
    return new SilenceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SilenceRequest | PlainMessage<SilenceRequest> | undefined, b: SilenceRequest | PlainMessage<SilenceRequest> | undefined): boolean {
    return proto3.util.equals(SilenceRequest, a, b);
  }
}

/**
 * @generated from message alerting.SilenceInfo
 */
export class SilenceInfo extends Message<SilenceInfo> {
  /**
   * @generated from field: string silenceId = 1;
   */
  silenceId = "";

  /**
   * @generated from field: google.protobuf.Timestamp startsAt = 2;
   */
  startsAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp endsAt = 3;
   */
  endsAt?: Timestamp;

  constructor(data?: PartialMessage<SilenceInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.SilenceInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "silenceId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "startsAt", kind: "message", T: Timestamp },
    { no: 3, name: "endsAt", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SilenceInfo {
    return new SilenceInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SilenceInfo {
    return new SilenceInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SilenceInfo {
    return new SilenceInfo().fromJsonString(jsonString, options);
  }

  static equals(a: SilenceInfo | PlainMessage<SilenceInfo> | undefined, b: SilenceInfo | PlainMessage<SilenceInfo> | undefined): boolean {
    return proto3.util.equals(SilenceInfo, a, b);
  }
}

/**
 * @generated from message alerting.AlertStatusResponse
 */
export class AlertStatusResponse extends Message<AlertStatusResponse> {
  /**
   * @generated from field: alerting.AlertConditionState state = 1;
   */
  state = AlertConditionState.Unkown;

  /**
   * @generated from field: string reason = 2;
   */
  reason = "";

  constructor(data?: PartialMessage<AlertStatusResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.AlertStatusResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "state", kind: "enum", T: proto3.getEnumType(AlertConditionState) },
    { no: 2, name: "reason", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AlertStatusResponse {
    return new AlertStatusResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AlertStatusResponse {
    return new AlertStatusResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AlertStatusResponse {
    return new AlertStatusResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AlertStatusResponse | PlainMessage<AlertStatusResponse> | undefined, b: AlertStatusResponse | PlainMessage<AlertStatusResponse> | undefined): boolean {
    return proto3.util.equals(AlertStatusResponse, a, b);
  }
}

/**
 * query for status timeline page
 *
 * @generated from message alerting.TimelineRequest
 */
export class TimelineRequest extends Message<TimelineRequest> {
  /**
   * @generated from field: google.protobuf.Duration lookbackWindow = 1;
   */
  lookbackWindow?: Duration;

  /**
   * @generated from field: int64 limit = 2;
   */
  limit = protoInt64.zero;

  /**
   * @generated from field: alerting.ListAlertConditionRequest filters = 3;
   */
  filters?: ListAlertConditionRequest;

  constructor(data?: PartialMessage<TimelineRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.TimelineRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "lookbackWindow", kind: "message", T: Duration },
    { no: 2, name: "limit", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "filters", kind: "message", T: ListAlertConditionRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TimelineRequest {
    return new TimelineRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TimelineRequest {
    return new TimelineRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TimelineRequest {
    return new TimelineRequest().fromJsonString(jsonString, options);
  }

  static equals(a: TimelineRequest | PlainMessage<TimelineRequest> | undefined, b: TimelineRequest | PlainMessage<TimelineRequest> | undefined): boolean {
    return proto3.util.equals(TimelineRequest, a, b);
  }
}

/**
 * maps conditionId => list of active windows
 *
 * @generated from message alerting.TimelineResponse
 */
export class TimelineResponse extends Message<TimelineResponse> {
  /**
   * @generated from field: map<string, alerting.ActiveWindows> items = 1;
   */
  items: { [key: string]: ActiveWindows } = {};

  constructor(data?: PartialMessage<TimelineResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.TimelineResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "items", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: ActiveWindows} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TimelineResponse {
    return new TimelineResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TimelineResponse {
    return new TimelineResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TimelineResponse {
    return new TimelineResponse().fromJsonString(jsonString, options);
  }

  static equals(a: TimelineResponse | PlainMessage<TimelineResponse> | undefined, b: TimelineResponse | PlainMessage<TimelineResponse> | undefined): boolean {
    return proto3.util.equals(TimelineResponse, a, b);
  }
}

/**
 * @generated from message alerting.ActiveWindow
 */
export class ActiveWindow extends Message<ActiveWindow> {
  /**
   * @generated from field: google.protobuf.Timestamp start = 1;
   */
  start?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp end = 2;
   */
  end?: Timestamp;

  /**
   * @generated from field: alerting.TimelineType type = 3;
   */
  type = TimelineType.Timeline_Unknown;

  /**
   * @generated from field: repeated string fingerprints = 4;
   */
  fingerprints: string[] = [];

  constructor(data?: PartialMessage<ActiveWindow>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.ActiveWindow";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "start", kind: "message", T: Timestamp },
    { no: 2, name: "end", kind: "message", T: Timestamp },
    { no: 3, name: "type", kind: "enum", T: proto3.getEnumType(TimelineType) },
    { no: 4, name: "fingerprints", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ActiveWindow {
    return new ActiveWindow().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ActiveWindow {
    return new ActiveWindow().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ActiveWindow {
    return new ActiveWindow().fromJsonString(jsonString, options);
  }

  static equals(a: ActiveWindow | PlainMessage<ActiveWindow> | undefined, b: ActiveWindow | PlainMessage<ActiveWindow> | undefined): boolean {
    return proto3.util.equals(ActiveWindow, a, b);
  }
}

/**
 * @generated from message alerting.ActiveWindows
 */
export class ActiveWindows extends Message<ActiveWindows> {
  /**
   * @generated from field: repeated alerting.ActiveWindow windows = 1;
   */
  windows: ActiveWindow[] = [];

  constructor(data?: PartialMessage<ActiveWindows>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.ActiveWindows";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "windows", kind: "message", T: ActiveWindow, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ActiveWindows {
    return new ActiveWindows().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ActiveWindows {
    return new ActiveWindows().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ActiveWindows {
    return new ActiveWindows().fromJsonString(jsonString, options);
  }

  static equals(a: ActiveWindows | PlainMessage<ActiveWindows> | undefined, b: ActiveWindows | PlainMessage<ActiveWindows> | undefined): boolean {
    return proto3.util.equals(ActiveWindows, a, b);
  }
}

/**
 * @generated from message alerting.CloneToRequest
 */
export class CloneToRequest extends Message<CloneToRequest> {
  /**
   * @generated from field: alerting.AlertCondition alertCondition = 1;
   */
  alertCondition?: AlertCondition;

  /**
   * @generated from field: repeated string toClusters = 2;
   */
  toClusters: string[] = [];

  constructor(data?: PartialMessage<CloneToRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "alerting.CloneToRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "alertCondition", kind: "message", T: AlertCondition },
    { no: 2, name: "toClusters", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CloneToRequest {
    return new CloneToRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CloneToRequest {
    return new CloneToRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CloneToRequest {
    return new CloneToRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CloneToRequest | PlainMessage<CloneToRequest> | undefined, b: CloneToRequest | PlainMessage<CloneToRequest> | undefined): boolean {
    return proto3.util.equals(CloneToRequest, a, b);
  }
}

