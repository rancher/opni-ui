// @generated by protoc-gen-es v1.2.1 with parameter "target=ts,import_extension=none"
// @generated from file github.com/rancher/opni/pkg/apis/bootstrap/v1/bootstrap.proto (package bootstrap, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message bootstrap.BootstrapJoinRequest
 */
export class BootstrapJoinRequest extends Message<BootstrapJoinRequest> {
  constructor(data?: PartialMessage<BootstrapJoinRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bootstrap.BootstrapJoinRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BootstrapJoinRequest {
    return new BootstrapJoinRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BootstrapJoinRequest {
    return new BootstrapJoinRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BootstrapJoinRequest {
    return new BootstrapJoinRequest().fromJsonString(jsonString, options);
  }

  static equals(a: BootstrapJoinRequest | PlainMessage<BootstrapJoinRequest> | undefined, b: BootstrapJoinRequest | PlainMessage<BootstrapJoinRequest> | undefined): boolean {
    return proto3.util.equals(BootstrapJoinRequest, a, b);
  }
}

/**
 * @generated from message bootstrap.BootstrapJoinResponse
 */
export class BootstrapJoinResponse extends Message<BootstrapJoinResponse> {
  /**
   * @generated from field: map<string, bytes> Signatures = 1;
   */
  Signatures: { [key: string]: Uint8Array } = {};

  constructor(data?: PartialMessage<BootstrapJoinResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bootstrap.BootstrapJoinResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Signatures", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 12 /* ScalarType.BYTES */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BootstrapJoinResponse {
    return new BootstrapJoinResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BootstrapJoinResponse {
    return new BootstrapJoinResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BootstrapJoinResponse {
    return new BootstrapJoinResponse().fromJsonString(jsonString, options);
  }

  static equals(a: BootstrapJoinResponse | PlainMessage<BootstrapJoinResponse> | undefined, b: BootstrapJoinResponse | PlainMessage<BootstrapJoinResponse> | undefined): boolean {
    return proto3.util.equals(BootstrapJoinResponse, a, b);
  }
}

/**
 * @generated from message bootstrap.BootstrapAuthRequest
 */
export class BootstrapAuthRequest extends Message<BootstrapAuthRequest> {
  /**
   * @generated from field: string ClientID = 1;
   */
  ClientID = "";

  /**
   * @generated from field: bytes ClientPubKey = 2;
   */
  ClientPubKey = new Uint8Array(0);

  /**
   * @generated from field: string Capability = 3;
   */
  Capability = "";

  constructor(data?: PartialMessage<BootstrapAuthRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bootstrap.BootstrapAuthRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ClientID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "ClientPubKey", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "Capability", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BootstrapAuthRequest {
    return new BootstrapAuthRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BootstrapAuthRequest {
    return new BootstrapAuthRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BootstrapAuthRequest {
    return new BootstrapAuthRequest().fromJsonString(jsonString, options);
  }

  static equals(a: BootstrapAuthRequest | PlainMessage<BootstrapAuthRequest> | undefined, b: BootstrapAuthRequest | PlainMessage<BootstrapAuthRequest> | undefined): boolean {
    return proto3.util.equals(BootstrapAuthRequest, a, b);
  }
}

/**
 * @generated from message bootstrap.BootstrapAuthResponse
 */
export class BootstrapAuthResponse extends Message<BootstrapAuthResponse> {
  /**
   * @generated from field: bytes ServerPubKey = 1;
   */
  ServerPubKey = new Uint8Array(0);

  constructor(data?: PartialMessage<BootstrapAuthResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bootstrap.BootstrapAuthResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ServerPubKey", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BootstrapAuthResponse {
    return new BootstrapAuthResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BootstrapAuthResponse {
    return new BootstrapAuthResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BootstrapAuthResponse {
    return new BootstrapAuthResponse().fromJsonString(jsonString, options);
  }

  static equals(a: BootstrapAuthResponse | PlainMessage<BootstrapAuthResponse> | undefined, b: BootstrapAuthResponse | PlainMessage<BootstrapAuthResponse> | undefined): boolean {
    return proto3.util.equals(BootstrapAuthResponse, a, b);
  }
}

