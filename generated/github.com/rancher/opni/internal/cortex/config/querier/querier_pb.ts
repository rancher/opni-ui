// Code generated by internal/codegen. DO NOT EDIT.

// @generated by protoc-gen-es v1.2.1 with parameter "target=ts,import_extension=none"
// @generated from file github.com/rancher/opni/internal/cortex/config/querier/querier.proto (package querier, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Duration } from "../../../../../../../google/protobuf/duration_pb";

/**
 * @generated from message querier.Config
 */
export class Config extends Message<Config> {
  /**
   * The maximum number of concurrent queries.
   *
   * @generated from field: int32 max_concurrent = 1;
   */
  maxConcurrent = 0;

  /**
   * The timeout for a query.
   *
   * @generated from field: google.protobuf.Duration timeout = 2;
   */
  timeout?: Duration;

  /**
   * Use iterators to execute query, as opposed to fully materialising the series in memory.
   *
   * @generated from field: bool iterators = 3;
   */
  iterators = false;

  /**
   * Use batch iterators to execute query, as opposed to fully materialising the series in memory.  Takes precedent over the -querier.iterators flag.
   *
   * @generated from field: bool batch_iterators = 4;
   */
  batchIterators = false;

  /**
   * Use streaming RPCs to query ingester.
   *
   * @generated from field: bool ingester_streaming = 5;
   */
  ingesterStreaming = false;

  /**
   * Use streaming RPCs for metadata APIs from ingester.
   *
   * @generated from field: bool ingester_metadata_streaming = 6;
   */
  ingesterMetadataStreaming = false;

  /**
   * Maximum number of samples a single query can load into memory.
   *
   * @generated from field: int32 max_samples = 7;
   */
  maxSamples = 0;

  /**
   * Maximum lookback beyond which queries are not sent to ingester. 0 means all queries are sent to ingester.
   *
   * @generated from field: google.protobuf.Duration query_ingesters_within = 8;
   */
  queryIngestersWithin?: Duration;

  /**
   * Deprecated (Querying long-term store for labels will be always enabled in the future.): Query long-term store for series, label values and label names APIs.
   *
   * @generated from field: bool query_store_for_labels_enabled = 9;
   */
  queryStoreForLabelsEnabled = false;

  /**
   * Enable returning samples stats per steps in query response.
   *
   * @generated from field: bool per_step_stats_enabled = 10;
   */
  perStepStatsEnabled = false;

  /**
   * The time after which a metric should be queried from storage and not just ingesters. 0 means all queries are sent to store. When running the blocks storage, if this option is enabled, the time range of the query sent to the store will be manipulated to ensure the query end is not more recent than 'now - query-store-after'.
   *
   * @generated from field: google.protobuf.Duration query_store_after = 11;
   */
  queryStoreAfter?: Duration;

  /**
   * Maximum duration into the future you can query. 0 to disable.
   *
   * @generated from field: google.protobuf.Duration max_query_into_future = 12;
   */
  maxQueryIntoFuture?: Duration;

  /**
   * The default evaluation interval or step size for subqueries.
   *
   * @generated from field: google.protobuf.Duration default_evaluation_interval = 13;
   */
  defaultEvaluationInterval?: Duration;

  /**
   * Time since the last sample after which a time series is considered stale and ignored by expression evaluations.
   *
   * @generated from field: google.protobuf.Duration lookback_delta = 14;
   */
  lookbackDelta?: Duration;

  /**
   * When distributor's sharding strategy is shuffle-sharding and this setting is > 0, queriers fetch in-memory series from the minimum set of required ingesters, selecting only ingesters which may have received series since 'now - lookback period'. The lookback period should be greater or equal than the configured 'query store after' and 'query ingesters within'. If this setting is 0, queriers always query all ingesters (ingesters shuffle sharding on read path is disabled).
   *
   * @generated from field: google.protobuf.Duration shuffle_sharding_ingesters_lookback_period = 15;
   */
  shuffleShardingIngestersLookbackPeriod?: Duration;

  /**
   * Experimental. Use Thanos promql engine https://github.com/thanos-community/promql-engine rather than the Prometheus promql engine.
   *
   * @generated from field: bool thanos_engine = 16;
   */
  thanosEngine = false;

  constructor(data?: PartialMessage<Config>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "querier.Config";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "max_concurrent", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "timeout", kind: "message", T: Duration },
    { no: 3, name: "iterators", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "batch_iterators", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "ingester_streaming", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "ingester_metadata_streaming", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "max_samples", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 8, name: "query_ingesters_within", kind: "message", T: Duration },
    { no: 9, name: "query_store_for_labels_enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 10, name: "per_step_stats_enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 11, name: "query_store_after", kind: "message", T: Duration },
    { no: 12, name: "max_query_into_future", kind: "message", T: Duration },
    { no: 13, name: "default_evaluation_interval", kind: "message", T: Duration },
    { no: 14, name: "lookback_delta", kind: "message", T: Duration },
    { no: 15, name: "shuffle_sharding_ingesters_lookback_period", kind: "message", T: Duration },
    { no: 16, name: "thanos_engine", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Config {
    return new Config().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Config {
    return new Config().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Config {
    return new Config().fromJsonString(jsonString, options);
  }

  static equals(a: Config | PlainMessage<Config> | undefined, b: Config | PlainMessage<Config> | undefined): boolean {
    return proto3.util.equals(Config, a, b);
  }
}

