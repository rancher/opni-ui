// @generated by protoc-gen-es v1.2.1 with parameter "target=ts,import_extension=none"
// @generated from file github.com/rancher/opni/internal/codegen/cli/cli.proto (package cli, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Any } from "../../../../../../google/protobuf/any_pb";

/**
 * @generated from enum cli.ClientDependencyInjectionStrategy
 */
export enum ClientDependencyInjectionStrategy {
  /**
   * @generated from enum value: InjectIntoContext = 0;
   */
  InjectIntoContext = 0,

  /**
   * @generated from enum value: InjectAsArgument = 1;
   */
  InjectAsArgument = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(ClientDependencyInjectionStrategy)
proto3.util.setEnumType(ClientDependencyInjectionStrategy, "cli.ClientDependencyInjectionStrategy", [
  { no: 0, name: "InjectIntoContext" },
  { no: 1, name: "InjectAsArgument" },
]);

/**
 * @generated from message cli.GeneratorOptions
 */
export class GeneratorOptions extends Message<GeneratorOptions> {
  /**
   * @generated from field: bool generate = 1;
   */
  generate = false;

  /**
   * @generated from field: bool generate_deepcopy = 2;
   */
  generateDeepcopy = false;

  /**
   * @generated from field: cli.ClientDependencyInjectionStrategy client_dependency_injection = 3;
   */
  clientDependencyInjection = ClientDependencyInjectionStrategy.InjectIntoContext;

  constructor(data?: PartialMessage<GeneratorOptions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cli.GeneratorOptions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "generate", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "generate_deepcopy", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "client_dependency_injection", kind: "enum", T: proto3.getEnumType(ClientDependencyInjectionStrategy) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GeneratorOptions {
    return new GeneratorOptions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GeneratorOptions {
    return new GeneratorOptions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GeneratorOptions {
    return new GeneratorOptions().fromJsonString(jsonString, options);
  }

  static equals(a: GeneratorOptions | PlainMessage<GeneratorOptions> | undefined, b: GeneratorOptions | PlainMessage<GeneratorOptions> | undefined): boolean {
    return proto3.util.equals(GeneratorOptions, a, b);
  }
}

/**
 * @generated from message cli.FlagOptions
 */
export class FlagOptions extends Message<FlagOptions> {
  /**
   * @generated from field: string default = 1;
   */
  default = "";

  /**
   * @generated from field: string env = 2;
   */
  env = "";

  /**
   * @generated from field: bool secret = 3;
   */
  secret = false;

  /**
   * @generated from field: string type_override = 4;
   */
  typeOverride = "";

  /**
   * @generated from field: bool skip = 5;
   */
  skip = false;

  constructor(data?: PartialMessage<FlagOptions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cli.FlagOptions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "default", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "env", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "secret", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "type_override", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "skip", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FlagOptions {
    return new FlagOptions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FlagOptions {
    return new FlagOptions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FlagOptions {
    return new FlagOptions().fromJsonString(jsonString, options);
  }

  static equals(a: FlagOptions | PlainMessage<FlagOptions> | undefined, b: FlagOptions | PlainMessage<FlagOptions> | undefined): boolean {
    return proto3.util.equals(FlagOptions, a, b);
  }
}

/**
 * @generated from message cli.FlagSetOptions
 */
export class FlagSetOptions extends Message<FlagSetOptions> {
  /**
   * @generated from field: google.protobuf.Any default = 1;
   */
  default?: Any;

  constructor(data?: PartialMessage<FlagSetOptions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cli.FlagSetOptions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "default", kind: "message", T: Any },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FlagSetOptions {
    return new FlagSetOptions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FlagSetOptions {
    return new FlagSetOptions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FlagSetOptions {
    return new FlagSetOptions().fromJsonString(jsonString, options);
  }

  static equals(a: FlagSetOptions | PlainMessage<FlagSetOptions> | undefined, b: FlagSetOptions | PlainMessage<FlagSetOptions> | undefined): boolean {
    return proto3.util.equals(FlagSetOptions, a, b);
  }
}

/**
 * @generated from message cli.CommandGroupOptions
 */
export class CommandGroupOptions extends Message<CommandGroupOptions> {
  /**
   * @generated from field: string use = 25601;
   */
  use = "";

  /**
   * @generated from field: string group_id = 25602;
   */
  groupId = "";

  constructor(data?: PartialMessage<CommandGroupOptions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cli.CommandGroupOptions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 25601, name: "use", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 25602, name: "group_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CommandGroupOptions {
    return new CommandGroupOptions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CommandGroupOptions {
    return new CommandGroupOptions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CommandGroupOptions {
    return new CommandGroupOptions().fromJsonString(jsonString, options);
  }

  static equals(a: CommandGroupOptions | PlainMessage<CommandGroupOptions> | undefined, b: CommandGroupOptions | PlainMessage<CommandGroupOptions> | undefined): boolean {
    return proto3.util.equals(CommandGroupOptions, a, b);
  }
}

/**
 * @generated from message cli.CommandOptions
 */
export class CommandOptions extends Message<CommandOptions> {
  /**
   * @generated from field: string use = 25601;
   */
  use = "";

  /**
   * @generated from field: repeated string required_flags = 25603;
   */
  requiredFlags: string[] = [];

  constructor(data?: PartialMessage<CommandOptions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cli.CommandOptions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 25601, name: "use", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 25603, name: "required_flags", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CommandOptions {
    return new CommandOptions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CommandOptions {
    return new CommandOptions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CommandOptions {
    return new CommandOptions().fromJsonString(jsonString, options);
  }

  static equals(a: CommandOptions | PlainMessage<CommandOptions> | undefined, b: CommandOptions | PlainMessage<CommandOptions> | undefined): boolean {
    return proto3.util.equals(CommandOptions, a, b);
  }
}

